Watching for file changes with StatReloader
Method Not Allowed: /api/register/
C:\Users\Evert\Desktop\Django\monreal\monreal\settings.py changed, reloading.
Watching for file changes with StatReloader
Not Found: /api/api/register/
Method Not Allowed: /api/register/
C:\Users\Evert\Desktop\Django\monreal\accounts\views.py changed, reloading.
Watching for file changes with StatReloader
C:\Users\Evert\Desktop\Django\monreal\accounts\views.py changed, reloading.
Watching for file changes with StatReloader
C:\Users\Evert\Desktop\Django\monreal\accounts\views.py changed, reloading.
Watching for file changes with StatReloader
C:\Users\Evert\Desktop\Django\monreal\accounts\views.py changed, reloading.
Watching for file changes with StatReloader
C:\Users\Evert\Desktop\Django\monreal\monreal\settings.py changed, reloading.
2023-06-21 13:01:48,812 INFO autoreload 16844 17580 Watching for file changes with StatReloader
2023-06-21 13:02:07,329 DEBUG functional 18620 9052 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-21 13:02:07,330 DEBUG functional 18620 9052 
def backend_cleanup():
    return 1

2023-06-21 13:02:07,330 DEBUG functional 18620 9052 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-21 13:02:07,330 DEBUG functional 18620 9052 
def debug_task(self):
    return 1

2023-06-21 13:02:07,331 DEBUG functional 18620 9052 
def xmap(task, it):
    return 1

2023-06-21 13:02:07,331 DEBUG functional 18620 9052 
def chain(*args, **kwargs):
    return 1

2023-06-21 13:02:07,331 DEBUG functional 18620 9052 
def db_update_task():
    return 1

2023-06-21 13:02:07,332 DEBUG functional 18620 9052 
def xstarmap(task, it):
    return 1

2023-06-21 13:02:07,333 DEBUG functional 18620 9052 
def start_ws_client():
    return 1

2023-06-21 13:02:07,333 DEBUG functional 18620 9052 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-21 13:02:07,334 DEBUG functional 18620 9052 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-21 13:02:07,334 DEBUG functional 18620 9052 
def chunks(task, it, n):
    return 1

2023-06-21 13:03:34,217 INFO autoreload 16844 17580 C:\Users\Evert\Desktop\Django\monreal\trading\data_feed.py changed, reloading.
2023-06-21 13:03:35,723 INFO autoreload 16436 14548 Watching for file changes with StatReloader
2023-06-21 13:03:44,702 INFO autoreload 14380 9868 Watching for file changes with StatReloader
2023-06-21 13:04:00,367 DEBUG functional 16732 14416 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-21 13:04:00,368 DEBUG functional 16732 14416 
def backend_cleanup():
    return 1

2023-06-21 13:04:00,368 DEBUG functional 16732 14416 
def db_update_task():
    return 1

2023-06-21 13:04:00,369 DEBUG functional 16732 14416 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-21 13:04:00,369 DEBUG functional 16732 14416 
def debug_task(self):
    return 1

2023-06-21 13:04:00,369 DEBUG functional 16732 14416 
def xmap(task, it):
    return 1

2023-06-21 13:04:00,370 DEBUG functional 16732 14416 
def chain(*args, **kwargs):
    return 1

2023-06-21 13:04:00,371 DEBUG functional 16732 14416 
def xstarmap(task, it):
    return 1

2023-06-21 13:04:00,371 DEBUG functional 16732 14416 
def start_ws_client():
    return 1

2023-06-21 13:04:00,371 DEBUG functional 16732 14416 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-21 13:04:00,372 DEBUG functional 16732 14416 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-21 13:04:00,372 DEBUG functional 16732 14416 
def chunks(task, it, n):
    return 1

2023-06-21 13:04:54,592 INFO autoreload 14380 9868 C:\Users\Evert\Desktop\Django\monreal\monreal\settings.py changed, reloading.
2023-06-21 13:05:18,805 INFO autoreload 20332 9384 Watching for file changes with StatReloader
2023-06-21 13:05:36,734 DEBUG functional 12976 19988 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-21 13:05:36,734 DEBUG functional 12976 19988 
def backend_cleanup():
    return 1

2023-06-21 13:05:36,735 DEBUG functional 12976 19988 
def db_update_task():
    return 1

2023-06-21 13:05:36,735 DEBUG functional 12976 19988 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-21 13:05:36,735 DEBUG functional 12976 19988 
def debug_task(self):
    return 1

2023-06-21 13:05:36,736 DEBUG functional 12976 19988 
def xmap(task, it):
    return 1

2023-06-21 13:05:36,736 DEBUG functional 12976 19988 
def chain(*args, **kwargs):
    return 1

2023-06-21 13:05:36,737 DEBUG functional 12976 19988 
def xstarmap(task, it):
    return 1

2023-06-21 13:05:36,737 DEBUG functional 12976 19988 
def start_ws_client():
    return 1

2023-06-21 13:05:36,738 DEBUG functional 12976 19988 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-21 13:05:36,738 DEBUG functional 12976 19988 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-21 13:05:36,738 DEBUG functional 12976 19988 
def chunks(task, it, n):
    return 1

2023-06-21 13:07:07,566 INFO autoreload 15048 15444 Watching for file changes with StatReloader
2023-06-21 13:07:21,725 DEBUG functional 15132 16072 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-21 13:07:21,726 DEBUG functional 15132 16072 
def backend_cleanup():
    return 1

2023-06-21 13:07:21,726 DEBUG functional 15132 16072 
def db_update_task():
    return 1

2023-06-21 13:07:21,727 DEBUG functional 15132 16072 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-21 13:07:21,727 DEBUG functional 15132 16072 
def debug_task(self):
    return 1

2023-06-21 13:07:21,727 DEBUG functional 15132 16072 
def xmap(task, it):
    return 1

2023-06-21 13:07:21,728 DEBUG functional 15132 16072 
def chain(*args, **kwargs):
    return 1

2023-06-21 13:07:21,729 DEBUG functional 15132 16072 
def xstarmap(task, it):
    return 1

2023-06-21 13:07:21,729 DEBUG functional 15132 16072 
def start_ws_client():
    return 1

2023-06-21 13:07:21,729 DEBUG functional 15132 16072 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-21 13:07:21,730 DEBUG functional 15132 16072 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-21 13:07:21,730 DEBUG functional 15132 16072 
def chunks(task, it, n):
    return 1

2023-06-21 13:10:33,136 INFO autoreload 12172 3588 Watching for file changes with StatReloader
2023-06-21 13:10:46,521 DEBUG functional 20996 18260 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-21 13:10:46,521 DEBUG functional 20996 18260 
def backend_cleanup():
    return 1

2023-06-21 13:10:46,521 DEBUG functional 20996 18260 
def db_update_task():
    return 1

2023-06-21 13:10:46,522 DEBUG functional 20996 18260 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-21 13:10:46,522 DEBUG functional 20996 18260 
def debug_task(self):
    return 1

2023-06-21 13:10:46,522 DEBUG functional 20996 18260 
def xmap(task, it):
    return 1

2023-06-21 13:10:46,523 DEBUG functional 20996 18260 
def chain(*args, **kwargs):
    return 1

2023-06-21 13:10:46,524 DEBUG functional 20996 18260 
def xstarmap(task, it):
    return 1

2023-06-21 13:10:46,524 DEBUG functional 20996 18260 
def start_ws_client():
    return 1

2023-06-21 13:10:46,524 DEBUG functional 20996 18260 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-21 13:10:46,525 DEBUG functional 20996 18260 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-21 13:10:46,525 DEBUG functional 20996 18260 
def chunks(task, it, n):
    return 1

2023-06-21 13:14:07,254 INFO autoreload 5556 20404 Watching for file changes with StatReloader
2023-06-21 13:14:21,712 DEBUG functional 14720 20080 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-21 13:14:21,712 DEBUG functional 14720 20080 
def backend_cleanup():
    return 1

2023-06-21 13:14:21,713 DEBUG functional 14720 20080 
def db_update_task():
    return 1

2023-06-21 13:14:21,713 DEBUG functional 14720 20080 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-21 13:14:21,713 DEBUG functional 14720 20080 
def debug_task(self):
    return 1

2023-06-21 13:14:21,714 DEBUG functional 14720 20080 
def xmap(task, it):
    return 1

2023-06-21 13:14:21,714 DEBUG functional 14720 20080 
def chain(*args, **kwargs):
    return 1

2023-06-21 13:14:21,715 DEBUG functional 14720 20080 
def xstarmap(task, it):
    return 1

2023-06-21 13:14:21,715 DEBUG functional 14720 20080 
def start_ws_client():
    return 1

2023-06-21 13:14:21,716 DEBUG functional 14720 20080 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-21 13:14:21,716 DEBUG functional 14720 20080 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-21 13:14:21,717 DEBUG functional 14720 20080 
def chunks(task, it, n):
    return 1

2023-06-21 13:16:23,771 INFO autoreload 5556 20404 C:\Users\Evert\Desktop\Django\monreal\monreal\settings.py changed, reloading.
2023-06-21 13:16:25,317 INFO autoreload 18664 18800 Watching for file changes with StatReloader
2023-06-21 13:16:38,556 INFO autoreload 6828 11576 Watching for file changes with StatReloader
2023-06-21 13:16:52,875 DEBUG functional 9656 11100 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-21 13:16:52,876 DEBUG functional 9656 11100 
def backend_cleanup():
    return 1

2023-06-21 13:16:52,876 DEBUG functional 9656 11100 
def db_update_task():
    return 1

2023-06-21 13:16:52,877 DEBUG functional 9656 11100 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-21 13:16:52,877 DEBUG functional 9656 11100 
def debug_task(self):
    return 1

2023-06-21 13:16:52,877 DEBUG functional 9656 11100 
def xmap(task, it):
    return 1

2023-06-21 13:16:52,878 DEBUG functional 9656 11100 
def chain(*args, **kwargs):
    return 1

2023-06-21 13:16:52,879 DEBUG functional 9656 11100 
def xstarmap(task, it):
    return 1

2023-06-21 13:16:52,879 DEBUG functional 9656 11100 
def start_ws_client():
    return 1

2023-06-21 13:16:52,879 DEBUG functional 9656 11100 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-21 13:16:52,880 DEBUG functional 9656 11100 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-21 13:16:52,880 DEBUG functional 9656 11100 
def chunks(task, it, n):
    return 1

2023-06-21 13:19:23,894 INFO autoreload 12972 12420 Watching for file changes with StatReloader
2023-06-21 13:19:36,896 DEBUG functional 10908 18848 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-21 13:19:36,897 DEBUG functional 10908 18848 
def backend_cleanup():
    return 1

2023-06-21 13:19:36,897 DEBUG functional 10908 18848 
def db_update_task():
    return 1

2023-06-21 13:19:36,897 DEBUG functional 10908 18848 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-21 13:19:36,898 DEBUG functional 10908 18848 
def debug_task(self):
    return 1

2023-06-21 13:19:36,898 DEBUG functional 10908 18848 
def xmap(task, it):
    return 1

2023-06-21 13:19:36,898 DEBUG functional 10908 18848 
def chain(*args, **kwargs):
    return 1

2023-06-21 13:19:36,899 DEBUG functional 10908 18848 
def xstarmap(task, it):
    return 1

2023-06-21 13:19:36,900 DEBUG functional 10908 18848 
def start_ws_client():
    return 1

2023-06-21 13:19:36,900 DEBUG functional 10908 18848 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-21 13:19:36,900 DEBUG functional 10908 18848 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-21 13:19:36,901 DEBUG functional 10908 18848 
def chunks(task, it, n):
    return 1

2023-06-25 17:47:15,980 DEBUG proactor_events 16624 20436 Using proactor: IocpProactor
2023-06-25 17:47:16,005 DEBUG __init__ 16624 20436 connect: wss://socket.polygon.io/crypto
2023-06-25 17:47:16,196 DEBUG protocol 16624 20436 = connection is CONNECTING
2023-06-25 17:47:16,309 DEBUG client 16624 20436 > GET /crypto HTTP/1.1
2023-06-25 17:47:16,309 DEBUG client 16624 20436 > Host: socket.polygon.io
2023-06-25 17:47:16,309 DEBUG client 16624 20436 > Upgrade: websocket
2023-06-25 17:47:16,309 DEBUG client 16624 20436 > Connection: Upgrade
2023-06-25 17:47:16,309 DEBUG client 16624 20436 > Sec-WebSocket-Key: XB5Q7DsfsE9YTgjs+PfhXA==
2023-06-25 17:47:16,309 DEBUG client 16624 20436 > Sec-WebSocket-Version: 13
2023-06-25 17:47:16,309 DEBUG client 16624 20436 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 17:47:16,309 DEBUG client 16624 20436 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 17:47:16,511 DEBUG client 16624 20436 < HTTP/1.1 101 Switching Protocols
2023-06-25 17:47:16,511 DEBUG client 16624 20436 < Server: nginx/1.19.2
2023-06-25 17:47:16,511 DEBUG client 16624 20436 < Date: Sun, 25 Jun 2023 14:47:16 GMT
2023-06-25 17:47:16,511 DEBUG client 16624 20436 < Connection: upgrade
2023-06-25 17:47:16,511 DEBUG client 16624 20436 < Upgrade: websocket
2023-06-25 17:47:16,512 DEBUG client 16624 20436 < Sec-WebSocket-Accept: YtOO+VfZHlMVcqTCOV8opnLYtvg=
2023-06-25 17:47:16,512 DEBUG client 16624 20436 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 17:47:16,512 DEBUG protocol 16624 20436 = connection is OPEN
2023-06-25 17:47:16,512 DEBUG protocol 16624 20436 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 17:47:16,513 DEBUG __init__ 16624 20436 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 17:47:16,513 DEBUG __init__ 16624 20436 authing...
2023-06-25 17:47:16,513 DEBUG protocol 16624 20436 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 17:47:16,620 DEBUG protocol 16624 20436 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 17:47:16,620 DEBUG __init__ 16624 20436 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 17:47:16,621 DEBUG __init__ 16624 20436 reconciling: set() {'XA.BTC-USD'}
2023-06-25 17:47:16,621 DEBUG __init__ 16624 20436 subbing: XA.BTC-USD
2023-06-25 17:47:16,621 DEBUG protocol 16624 20436 > TEXT '{"action": "subscribe", "params": "XA.BTC-USD"}' [47 bytes]
2023-06-25 17:47:16,722 DEBUG protocol 16624 20436 < TEXT '[{"ev":"status","status":"success","message":"s...ribed to: XA.BTC-USD"}]' [74 bytes]
2023-06-25 17:47:16,722 DEBUG __init__ 16624 20436 status: subscribed to: XA.BTC-USD
2023-06-25 17:47:21,511 DEBUG protocol 16624 20436 < PING '' [0 bytes]
2023-06-25 17:47:21,511 DEBUG protocol 16624 20436 > PONG '' [0 bytes]
2023-06-25 17:47:26,512 DEBUG protocol 16624 20436 < PING '' [0 bytes]
2023-06-25 17:47:26,512 DEBUG protocol 16624 20436 > PONG '' [0 bytes]
2023-06-25 17:47:37,773 INFO autoreload 10420 11652 Watching for file changes with StatReloader
2023-06-25 17:47:38,029 DEBUG proactor_events 10420 20256 Using proactor: IocpProactor
2023-06-25 17:47:38,032 DEBUG __init__ 10420 20256 connect: wss://socket.polygon.io/crypto
2023-06-25 17:47:38,176 DEBUG protocol 10420 20256 = connection is CONNECTING
2023-06-25 17:47:38,278 DEBUG client 10420 20256 > GET /crypto HTTP/1.1
2023-06-25 17:47:38,278 DEBUG client 10420 20256 > Host: socket.polygon.io
2023-06-25 17:47:38,278 DEBUG client 10420 20256 > Upgrade: websocket
2023-06-25 17:47:38,278 DEBUG client 10420 20256 > Connection: Upgrade
2023-06-25 17:47:38,278 DEBUG client 10420 20256 > Sec-WebSocket-Key: R0pr46UieEUTaZzEakTznw==
2023-06-25 17:47:38,278 DEBUG client 10420 20256 > Sec-WebSocket-Version: 13
2023-06-25 17:47:38,278 DEBUG client 10420 20256 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 17:47:38,278 DEBUG client 10420 20256 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 17:47:38,488 DEBUG client 10420 20256 < HTTP/1.1 101 Switching Protocols
2023-06-25 17:47:38,488 DEBUG client 10420 20256 < Server: nginx/1.19.2
2023-06-25 17:47:38,488 DEBUG client 10420 20256 < Date: Sun, 25 Jun 2023 14:47:38 GMT
2023-06-25 17:47:38,488 DEBUG client 10420 20256 < Connection: upgrade
2023-06-25 17:47:38,488 DEBUG client 10420 20256 < Upgrade: websocket
2023-06-25 17:47:38,488 DEBUG client 10420 20256 < Sec-WebSocket-Accept: yxBbXfRSY7t8uXKkX3Wj5BYaOwo=
2023-06-25 17:47:38,489 DEBUG client 10420 20256 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 17:47:38,489 DEBUG protocol 10420 20256 = connection is OPEN
2023-06-25 17:47:38,489 DEBUG protocol 10420 20256 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 17:47:38,489 DEBUG __init__ 10420 20256 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 17:47:38,490 DEBUG __init__ 10420 20256 authing...
2023-06-25 17:47:38,490 DEBUG protocol 10420 20256 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 17:47:38,589 DEBUG protocol 10420 20256 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 17:47:38,589 DEBUG __init__ 10420 20256 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 17:47:38,589 DEBUG __init__ 10420 20256 reconciling: set() {'XA.BTC-USD'}
2023-06-25 17:47:38,590 DEBUG __init__ 10420 20256 subbing: XA.BTC-USD
2023-06-25 17:47:38,590 DEBUG protocol 10420 20256 > TEXT '{"action": "subscribe", "params": "XA.BTC-USD"}' [47 bytes]
2023-06-25 17:47:38,689 DEBUG protocol 10420 20256 < TEXT '[{"ev":"status","status":"success","message":"s...ribed to: XA.BTC-USD"}]' [74 bytes]
2023-06-25 17:47:38,689 DEBUG __init__ 10420 20256 status: subscribed to: XA.BTC-USD
2023-06-25 17:47:43,473 DEBUG protocol 10420 20256 < PING '' [0 bytes]
2023-06-25 17:47:43,473 DEBUG protocol 10420 20256 > PONG '' [0 bytes]
2023-06-25 17:47:48,472 DEBUG protocol 10420 20256 < PING '' [0 bytes]
2023-06-25 17:47:48,473 DEBUG protocol 10420 20256 > PONG '' [0 bytes]
2023-06-25 17:47:48,780 WARNING log 10420 18908 Not Found: /
2023-06-25 17:47:53,472 DEBUG protocol 10420 20256 < PING '' [0 bytes]
2023-06-25 17:47:53,472 DEBUG protocol 10420 20256 > PONG '' [0 bytes]
2023-06-25 17:47:53,602 DEBUG core 10420 18908 Successfully imported extension module "markdown.extensions.toc".
2023-06-25 17:47:53,602 DEBUG core 10420 18908 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-25 17:47:53,812 WARNING log 10420 18908 Not Found: /favicon.ico
2023-06-25 17:47:58,472 DEBUG protocol 10420 20256 < PING '' [0 bytes]
2023-06-25 17:47:58,472 DEBUG protocol 10420 20256 > PONG '' [0 bytes]
2023-06-25 17:47:58,499 DEBUG protocol 10420 20256 % sending keepalive ping
2023-06-25 17:47:58,499 DEBUG protocol 10420 20256 > PING 88 07 48 ad [binary, 4 bytes]
2023-06-25 17:47:58,669 DEBUG protocol 10420 20256 < PONG 88 07 48 ad [binary, 4 bytes]
2023-06-25 17:47:58,670 DEBUG protocol 10420 20256 % received keepalive pong
2023-06-25 17:48:01,987 DEBUG protocol 10420 20256 < TEXT '[{"ev":"XA","pair":"BTC-USD","v":4.03005206,"vw...000,"e":1687704480000}]' [148 bytes]
2023-06-25 17:48:06,046 DEBUG protocol 10420 20256 = connection is CLOSING
2023-06-25 17:48:06,046 DEBUG protocol 10420 20256 > CLOSE 1000 (OK) [2 bytes]
2023-06-25 17:48:06,145 DEBUG protocol 10420 20256 = connection is CLOSED
2023-06-25 17:48:06,146 DEBUG protocol 10420 20256 x closing TCP connection
2023-06-25 20:14:19,392 INFO autoreload 13648 8968 Watching for file changes with StatReloader
2023-06-25 20:14:19,661 DEBUG proactor_events 13648 3568 Using proactor: IocpProactor
2023-06-25 20:14:19,664 DEBUG __init__ 13648 3568 connect: wss://socket.polygon.io/crypto
2023-06-25 20:14:19,834 DEBUG protocol 13648 3568 = connection is CONNECTING
2023-06-25 20:14:19,940 DEBUG client 13648 3568 > GET /crypto HTTP/1.1
2023-06-25 20:14:19,940 DEBUG client 13648 3568 > Host: socket.polygon.io
2023-06-25 20:14:19,940 DEBUG client 13648 3568 > Upgrade: websocket
2023-06-25 20:14:19,940 DEBUG client 13648 3568 > Connection: Upgrade
2023-06-25 20:14:19,940 DEBUG client 13648 3568 > Sec-WebSocket-Key: njG33FdDmqsV3AO1WGJHPg==
2023-06-25 20:14:19,941 DEBUG client 13648 3568 > Sec-WebSocket-Version: 13
2023-06-25 20:14:19,941 DEBUG client 13648 3568 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 20:14:19,941 DEBUG client 13648 3568 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 20:14:20,150 DEBUG client 13648 3568 < HTTP/1.1 101 Switching Protocols
2023-06-25 20:14:20,151 DEBUG client 13648 3568 < Server: nginx/1.19.2
2023-06-25 20:14:20,151 DEBUG client 13648 3568 < Date: Sun, 25 Jun 2023 17:14:20 GMT
2023-06-25 20:14:20,151 DEBUG client 13648 3568 < Connection: upgrade
2023-06-25 20:14:20,151 DEBUG client 13648 3568 < Upgrade: websocket
2023-06-25 20:14:20,151 DEBUG client 13648 3568 < Sec-WebSocket-Accept: c2Fdaa1ts5tgq6mkxK619p1q+rw=
2023-06-25 20:14:20,151 DEBUG client 13648 3568 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 20:14:20,151 DEBUG protocol 13648 3568 = connection is OPEN
2023-06-25 20:14:20,152 DEBUG protocol 13648 3568 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 20:14:20,152 DEBUG __init__ 13648 3568 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 20:14:20,152 DEBUG __init__ 13648 3568 authing...
2023-06-25 20:14:20,153 DEBUG protocol 13648 3568 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 20:14:20,260 DEBUG protocol 13648 3568 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 20:14:20,260 DEBUG __init__ 13648 3568 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 20:14:20,261 DEBUG __init__ 13648 3568 reconciling: set() {'XG.BTC-USD'}
2023-06-25 20:14:20,261 DEBUG __init__ 13648 3568 subbing: XG.BTC-USD
2023-06-25 20:14:20,261 DEBUG protocol 13648 3568 > TEXT '{"action": "subscribe", "params": "XG.BTC-USD"}' [47 bytes]
2023-06-25 20:14:25,151 DEBUG protocol 13648 3568 < PING '' [0 bytes]
2023-06-25 20:14:25,151 DEBUG protocol 13648 3568 > PONG '' [0 bytes]
2023-06-25 20:14:30,151 DEBUG protocol 13648 3568 < PING '' [0 bytes]
2023-06-25 20:14:30,151 DEBUG protocol 13648 3568 > PONG '' [0 bytes]
2023-06-25 20:14:35,150 DEBUG protocol 13648 3568 < PING '' [0 bytes]
2023-06-25 20:14:35,150 DEBUG protocol 13648 3568 > PONG '' [0 bytes]
2023-06-25 20:14:40,150 DEBUG protocol 13648 3568 < PING '' [0 bytes]
2023-06-25 20:14:40,151 DEBUG protocol 13648 3568 > PONG '' [0 bytes]
2023-06-25 20:14:40,151 DEBUG protocol 13648 3568 % sending keepalive ping
2023-06-25 20:14:40,151 DEBUG protocol 13648 3568 > PING 1b 38 95 a9 [binary, 4 bytes]
2023-06-25 20:14:40,354 DEBUG protocol 13648 3568 < PONG 1b 38 95 a9 [binary, 4 bytes]
2023-06-25 20:14:40,354 DEBUG protocol 13648 3568 % received keepalive pong
2023-06-25 20:14:45,150 DEBUG protocol 13648 3568 < PING '' [0 bytes]
2023-06-25 20:14:45,150 DEBUG protocol 13648 3568 > PONG '' [0 bytes]
2023-06-25 20:14:50,150 DEBUG protocol 13648 3568 < PING '' [0 bytes]
2023-06-25 20:14:50,150 DEBUG protocol 13648 3568 > PONG '' [0 bytes]
2023-06-25 20:14:55,150 DEBUG protocol 13648 3568 < PING '' [0 bytes]
2023-06-25 20:14:55,150 DEBUG protocol 13648 3568 > PONG '' [0 bytes]
2023-06-25 20:14:58,224 DEBUG proactor_events 9172 8060 Using proactor: IocpProactor
2023-06-25 20:14:58,227 DEBUG __init__ 9172 8060 connect: wss://socket.polygon.io/crypto
2023-06-25 20:14:58,251 DEBUG functional 9172 6424 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-25 20:14:58,252 DEBUG functional 9172 6424 
def backend_cleanup():
    return 1

2023-06-25 20:14:58,252 DEBUG functional 9172 6424 
def db_update_task():
    return 1

2023-06-25 20:14:58,252 DEBUG functional 9172 6424 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-25 20:14:58,253 DEBUG functional 9172 6424 
def xmap(task, it):
    return 1

2023-06-25 20:14:58,253 DEBUG functional 9172 6424 
def chain(*args, **kwargs):
    return 1

2023-06-25 20:14:58,253 DEBUG functional 9172 6424 
def debug_task(self):
    return 1

2023-06-25 20:14:58,254 DEBUG functional 9172 6424 
def xstarmap(task, it):
    return 1

2023-06-25 20:14:58,254 DEBUG functional 9172 6424 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-25 20:14:58,254 DEBUG functional 9172 6424 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-25 20:14:58,255 DEBUG functional 9172 6424 
def chunks(task, it, n):
    return 1

2023-06-25 20:14:58,255 DEBUG functional 9172 6424 
def get_current_buy_price(symbol):
    return 1

2023-06-25 20:15:00,149 DEBUG protocol 13648 3568 < PING '' [0 bytes]
2023-06-25 20:15:00,149 DEBUG protocol 13648 3568 > PONG '' [0 bytes]
2023-06-25 20:15:00,184 DEBUG proactor_events 6344 20624 Using proactor: IocpProactor
2023-06-25 20:15:00,186 DEBUG __init__ 6344 20624 connect: wss://socket.polygon.io/crypto
2023-06-25 20:15:00,193 DEBUG proactor_events 12788 4452 Using proactor: IocpProactor
2023-06-25 20:15:00,196 DEBUG __init__ 12788 4452 connect: wss://socket.polygon.io/crypto
2023-06-25 20:15:00,367 DEBUG protocol 13648 3568 % sending keepalive ping
2023-06-25 20:15:00,367 DEBUG protocol 13648 3568 > PING 1c e0 6d 22 [binary, 4 bytes]
2023-06-25 20:15:00,469 DEBUG protocol 13648 3568 < PONG 1c e0 6d 22 [binary, 4 bytes]
2023-06-25 20:15:00,469 DEBUG protocol 13648 3568 % received keepalive pong
2023-06-25 20:15:01,943 DEBUG proactor_events 8840 15396 Using proactor: IocpProactor
2023-06-25 20:15:01,945 DEBUG __init__ 8840 15396 connect: wss://socket.polygon.io/crypto
2023-06-25 20:15:02,803 DEBUG protocol 13648 3568 < TEXT '[{"ev":"status","status":"max_connections","mes...onnections exceeded."}]' [96 bytes]
2023-06-25 20:15:02,803 DEBUG protocol 13648 3568 < CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 20:15:02,803 DEBUG protocol 13648 3568 = connection is CLOSING
2023-06-25 20:15:02,803 DEBUG protocol 13648 3568 > CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 20:15:02,803 DEBUG protocol 13648 3568 = connection is CLOSED
2023-06-25 20:15:02,804 DEBUG __init__ 13648 3568 status: Maximum number of connections exceeded.
2023-06-25 20:15:02,804 DEBUG protocol 13648 3568 x closing TCP connection
2023-06-25 20:15:02,804 DEBUG __init__ 13648 3568 connection closed (ERR): received 1008 (policy violation); then sent 1008 (policy violation)
2023-06-25 20:15:02,905 DEBUG protocol 13648 3568 = connection is CONNECTING
2023-06-25 20:15:03,012 DEBUG client 13648 3568 > GET /crypto HTTP/1.1
2023-06-25 20:15:03,012 DEBUG client 13648 3568 > Host: socket.polygon.io
2023-06-25 20:15:03,012 DEBUG client 13648 3568 > Upgrade: websocket
2023-06-25 20:15:03,012 DEBUG client 13648 3568 > Connection: Upgrade
2023-06-25 20:15:03,012 DEBUG client 13648 3568 > Sec-WebSocket-Key: IyGWOw4IBJtU1LXA6AwlyQ==
2023-06-25 20:15:03,012 DEBUG client 13648 3568 > Sec-WebSocket-Version: 13
2023-06-25 20:15:03,012 DEBUG client 13648 3568 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 20:15:03,013 DEBUG client 13648 3568 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 20:15:03,210 DEBUG client 13648 3568 < HTTP/1.1 101 Switching Protocols
2023-06-25 20:15:03,210 DEBUG client 13648 3568 < Server: nginx/1.19.2
2023-06-25 20:15:03,210 DEBUG client 13648 3568 < Date: Sun, 25 Jun 2023 17:15:03 GMT
2023-06-25 20:15:03,210 DEBUG client 13648 3568 < Connection: upgrade
2023-06-25 20:15:03,210 DEBUG client 13648 3568 < Upgrade: websocket
2023-06-25 20:15:03,210 DEBUG client 13648 3568 < Sec-WebSocket-Accept: fsMQdxSBQjv/mV8P+hjyemfGATQ=
2023-06-25 20:15:03,210 DEBUG client 13648 3568 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 20:15:03,210 DEBUG protocol 13648 3568 = connection is OPEN
2023-06-25 20:15:03,210 DEBUG protocol 13648 3568 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 20:15:03,211 DEBUG __init__ 13648 3568 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 20:15:03,211 DEBUG __init__ 13648 3568 authing...
2023-06-25 20:15:03,212 DEBUG protocol 13648 3568 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 20:15:03,312 DEBUG protocol 13648 3568 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 20:15:03,312 DEBUG __init__ 13648 3568 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 20:15:03,312 DEBUG __init__ 13648 3568 reconciling: set() {'XG.BTC-USD'}
2023-06-25 20:15:03,312 DEBUG __init__ 13648 3568 subbing: XG.BTC-USD
2023-06-25 20:15:03,313 DEBUG protocol 13648 3568 > TEXT '{"action": "subscribe", "params": "XG.BTC-USD"}' [47 bytes]
2023-06-25 20:15:07,762 DEBUG protocol 13648 3568 < TEXT '[{"ev":"status","status":"max_connections","mes...onnections exceeded."}]' [96 bytes]
2023-06-25 20:15:07,762 DEBUG protocol 13648 3568 < CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 20:15:07,762 DEBUG protocol 13648 3568 = connection is CLOSING
2023-06-25 20:15:07,762 DEBUG protocol 13648 3568 > CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 20:15:07,763 DEBUG protocol 13648 3568 = connection is CLOSED
2023-06-25 20:15:07,763 DEBUG __init__ 13648 3568 status: Maximum number of connections exceeded.
2023-06-25 20:15:07,763 DEBUG protocol 13648 3568 x closing TCP connection
2023-06-25 20:15:07,764 DEBUG __init__ 13648 3568 connection closed (ERR): received 1008 (policy violation); then sent 1008 (policy violation)
2023-06-25 20:15:07,867 DEBUG protocol 13648 3568 = connection is CONNECTING
2023-06-25 20:15:07,968 DEBUG client 13648 3568 > GET /crypto HTTP/1.1
2023-06-25 20:15:07,968 DEBUG client 13648 3568 > Host: socket.polygon.io
2023-06-25 20:15:07,968 DEBUG client 13648 3568 > Upgrade: websocket
2023-06-25 20:15:07,968 DEBUG client 13648 3568 > Connection: Upgrade
2023-06-25 20:15:07,968 DEBUG client 13648 3568 > Sec-WebSocket-Key: UCgGRzJ3wN6W5r0O255+hA==
2023-06-25 20:15:07,968 DEBUG client 13648 3568 > Sec-WebSocket-Version: 13
2023-06-25 20:15:07,968 DEBUG client 13648 3568 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 20:15:07,968 DEBUG client 13648 3568 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 20:15:08,168 DEBUG client 13648 3568 < HTTP/1.1 101 Switching Protocols
2023-06-25 20:15:08,168 DEBUG client 13648 3568 < Server: nginx/1.19.2
2023-06-25 20:15:08,168 DEBUG client 13648 3568 < Date: Sun, 25 Jun 2023 17:15:08 GMT
2023-06-25 20:15:08,168 DEBUG client 13648 3568 < Connection: upgrade
2023-06-25 20:15:08,168 DEBUG client 13648 3568 < Upgrade: websocket
2023-06-25 20:15:08,168 DEBUG client 13648 3568 < Sec-WebSocket-Accept: k9d6Jr1HWG+GuzCkeH+lKyatEZs=
2023-06-25 20:15:08,168 DEBUG client 13648 3568 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 20:15:08,168 DEBUG protocol 13648 3568 = connection is OPEN
2023-06-25 20:15:08,168 DEBUG protocol 13648 3568 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 20:15:08,168 DEBUG __init__ 13648 3568 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 20:15:08,169 DEBUG __init__ 13648 3568 authing...
2023-06-25 20:15:08,169 DEBUG protocol 13648 3568 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 20:15:08,268 DEBUG protocol 13648 3568 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 20:15:08,268 DEBUG __init__ 13648 3568 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 20:15:08,268 DEBUG __init__ 13648 3568 reconciling: set() {'XG.BTC-USD'}
2023-06-25 20:15:08,269 DEBUG __init__ 13648 3568 subbing: XG.BTC-USD
2023-06-25 20:15:08,269 DEBUG protocol 13648 3568 > TEXT '{"action": "subscribe", "params": "XG.BTC-USD"}' [47 bytes]
2023-06-25 20:15:12,835 DEBUG protocol 13648 3568 < TEXT '[{"ev":"status","status":"max_connections","mes...onnections exceeded."}]' [96 bytes]
2023-06-25 20:15:12,835 DEBUG protocol 13648 3568 < CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 20:15:12,835 DEBUG protocol 13648 3568 = connection is CLOSING
2023-06-25 20:15:12,835 DEBUG protocol 13648 3568 > CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 20:15:12,836 DEBUG protocol 13648 3568 = connection is CLOSED
2023-06-25 20:15:12,836 DEBUG __init__ 13648 3568 status: Maximum number of connections exceeded.
2023-06-25 20:15:12,836 DEBUG protocol 13648 3568 x closing TCP connection
2023-06-25 20:15:12,836 DEBUG __init__ 13648 3568 connection closed (ERR): received 1008 (policy violation); then sent 1008 (policy violation)
2023-06-25 20:15:12,937 DEBUG protocol 13648 3568 = connection is CONNECTING
2023-06-25 20:15:13,042 DEBUG client 13648 3568 > GET /crypto HTTP/1.1
2023-06-25 20:15:13,042 DEBUG client 13648 3568 > Host: socket.polygon.io
2023-06-25 20:15:13,042 DEBUG client 13648 3568 > Upgrade: websocket
2023-06-25 20:15:13,042 DEBUG client 13648 3568 > Connection: Upgrade
2023-06-25 20:15:13,042 DEBUG client 13648 3568 > Sec-WebSocket-Key: dlEKmqdExORfaJ8C5LVcTQ==
2023-06-25 20:15:13,042 DEBUG client 13648 3568 > Sec-WebSocket-Version: 13
2023-06-25 20:15:13,042 DEBUG client 13648 3568 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 20:15:13,042 DEBUG client 13648 3568 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 20:15:13,242 DEBUG client 13648 3568 < HTTP/1.1 101 Switching Protocols
2023-06-25 20:15:13,242 DEBUG client 13648 3568 < Server: nginx/1.19.2
2023-06-25 20:15:13,242 DEBUG client 13648 3568 < Date: Sun, 25 Jun 2023 17:15:13 GMT
2023-06-25 20:15:13,242 DEBUG client 13648 3568 < Connection: upgrade
2023-06-25 20:15:13,242 DEBUG client 13648 3568 < Upgrade: websocket
2023-06-25 20:15:13,243 DEBUG client 13648 3568 < Sec-WebSocket-Accept: F+2fcVqRULd53Ytp/IwZdqXzgHs=
2023-06-25 20:15:13,243 DEBUG client 13648 3568 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 20:15:13,243 DEBUG protocol 13648 3568 = connection is OPEN
2023-06-25 20:15:13,243 DEBUG protocol 13648 3568 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 20:15:13,243 DEBUG __init__ 13648 3568 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 20:15:13,243 DEBUG __init__ 13648 3568 authing...
2023-06-25 20:15:13,244 DEBUG protocol 13648 3568 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 20:15:13,343 DEBUG protocol 13648 3568 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 20:15:13,344 DEBUG __init__ 13648 3568 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 20:15:13,344 DEBUG __init__ 13648 3568 reconciling: set() {'XG.BTC-USD'}
2023-06-25 20:15:13,345 DEBUG __init__ 13648 3568 subbing: XG.BTC-USD
2023-06-25 20:15:13,345 DEBUG protocol 13648 3568 > TEXT '{"action": "subscribe", "params": "XG.BTC-USD"}' [47 bytes]
2023-06-25 20:15:17,984 DEBUG protocol 13648 3568 < TEXT '[{"ev":"status","status":"max_connections","mes...onnections exceeded."}]' [96 bytes]
2023-06-25 20:15:17,984 DEBUG protocol 13648 3568 < CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 20:15:17,984 DEBUG protocol 13648 3568 = connection is CLOSING
2023-06-25 20:15:17,984 DEBUG protocol 13648 3568 > CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 20:15:17,984 DEBUG protocol 13648 3568 = connection is CLOSED
2023-06-25 20:15:17,984 DEBUG __init__ 13648 3568 status: Maximum number of connections exceeded.
2023-06-25 20:15:17,985 DEBUG protocol 13648 3568 x closing TCP connection
2023-06-25 20:15:17,985 DEBUG __init__ 13648 3568 connection closed (ERR): received 1008 (policy violation); then sent 1008 (policy violation)
2023-06-25 20:15:18,089 DEBUG protocol 13648 3568 = connection is CONNECTING
2023-06-25 20:15:18,194 DEBUG client 13648 3568 > GET /crypto HTTP/1.1
2023-06-25 20:15:18,194 DEBUG client 13648 3568 > Host: socket.polygon.io
2023-06-25 20:15:18,194 DEBUG client 13648 3568 > Upgrade: websocket
2023-06-25 20:15:18,194 DEBUG client 13648 3568 > Connection: Upgrade
2023-06-25 20:15:18,194 DEBUG client 13648 3568 > Sec-WebSocket-Key: JDyNGzOYiI5Mmz1eIyGjcQ==
2023-06-25 20:15:18,194 DEBUG client 13648 3568 > Sec-WebSocket-Version: 13
2023-06-25 20:15:18,194 DEBUG client 13648 3568 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 20:15:18,194 DEBUG client 13648 3568 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 20:15:18,397 DEBUG client 13648 3568 < HTTP/1.1 101 Switching Protocols
2023-06-25 20:15:18,397 DEBUG client 13648 3568 < Server: nginx/1.19.2
2023-06-25 20:15:18,397 DEBUG client 13648 3568 < Date: Sun, 25 Jun 2023 17:15:18 GMT
2023-06-25 20:15:18,397 DEBUG client 13648 3568 < Connection: upgrade
2023-06-25 20:15:18,397 DEBUG client 13648 3568 < Upgrade: websocket
2023-06-25 20:15:18,397 DEBUG client 13648 3568 < Sec-WebSocket-Accept: 2Yk+5fnmu0IjhBShOgTeMne3MDI=
2023-06-25 20:15:18,397 DEBUG client 13648 3568 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 20:15:18,397 DEBUG protocol 13648 3568 = connection is OPEN
2023-06-25 20:15:18,398 DEBUG protocol 13648 3568 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 20:15:18,398 DEBUG __init__ 13648 3568 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 20:15:18,398 DEBUG __init__ 13648 3568 authing...
2023-06-25 20:15:18,398 DEBUG protocol 13648 3568 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 20:15:18,501 DEBUG protocol 13648 3568 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 20:15:18,501 DEBUG __init__ 13648 3568 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 20:15:18,501 DEBUG __init__ 13648 3568 reconciling: set() {'XG.BTC-USD'}
2023-06-25 20:15:18,502 DEBUG __init__ 13648 3568 subbing: XG.BTC-USD
2023-06-25 20:15:18,502 DEBUG protocol 13648 3568 > TEXT '{"action": "subscribe", "params": "XG.BTC-USD"}' [47 bytes]
2023-06-25 20:15:23,397 DEBUG protocol 13648 3568 < PING '' [0 bytes]
2023-06-25 20:15:23,397 DEBUG protocol 13648 3568 > PONG '' [0 bytes]
2023-06-25 20:15:28,397 DEBUG protocol 13648 3568 < PING '' [0 bytes]
2023-06-25 20:15:28,397 DEBUG protocol 13648 3568 > PONG '' [0 bytes]
2023-06-25 20:15:33,396 DEBUG protocol 13648 3568 < PING '' [0 bytes]
2023-06-25 20:15:33,397 DEBUG protocol 13648 3568 > PONG '' [0 bytes]
2023-06-25 20:16:01,629 DEBUG proactor_events 11360 6708 Using proactor: IocpProactor
2023-06-25 20:16:01,632 DEBUG __init__ 11360 6708 connect: wss://socket.polygon.io/crypto
2023-06-25 20:16:01,655 DEBUG functional 11360 19428 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-25 20:16:01,656 DEBUG functional 11360 19428 
def backend_cleanup():
    return 1

2023-06-25 20:16:01,656 DEBUG functional 11360 19428 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-25 20:16:01,657 DEBUG functional 11360 19428 
def xmap(task, it):
    return 1

2023-06-25 20:16:01,657 DEBUG functional 11360 19428 
def db_update_task():
    return 1

2023-06-25 20:16:01,657 DEBUG functional 11360 19428 
def chain(*args, **kwargs):
    return 1

2023-06-25 20:16:01,657 DEBUG functional 11360 19428 
def debug_task(self):
    return 1

2023-06-25 20:16:01,658 DEBUG functional 11360 19428 
def xstarmap(task, it):
    return 1

2023-06-25 20:16:01,658 DEBUG functional 11360 19428 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-25 20:16:01,658 DEBUG functional 11360 19428 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-25 20:16:01,659 DEBUG functional 11360 19428 
def chunks(task, it, n):
    return 1

2023-06-25 20:16:01,659 DEBUG functional 11360 19428 
def get_current_buy_price(symbol):
    return 1

2023-06-25 20:16:03,590 DEBUG proactor_events 8772 12312 Using proactor: IocpProactor
2023-06-25 20:16:03,592 DEBUG __init__ 8772 12312 connect: wss://socket.polygon.io/crypto
2023-06-25 20:16:03,596 DEBUG proactor_events 9236 6248 Using proactor: IocpProactor
2023-06-25 20:16:03,598 DEBUG __init__ 9236 6248 connect: wss://socket.polygon.io/crypto
2023-06-25 20:16:58,760 DEBUG proactor_events 4140 6116 Using proactor: IocpProactor
2023-06-25 20:16:58,764 DEBUG __init__ 4140 6116 connect: wss://socket.polygon.io/crypto
2023-06-25 20:16:58,789 DEBUG functional 4140 13484 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-25 20:16:58,790 DEBUG functional 4140 13484 
def backend_cleanup():
    return 1

2023-06-25 20:16:58,790 DEBUG functional 4140 13484 
def db_update_task():
    return 1

2023-06-25 20:16:58,791 DEBUG functional 4140 13484 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-25 20:16:58,791 DEBUG functional 4140 13484 
def xmap(task, it):
    return 1

2023-06-25 20:16:58,791 DEBUG functional 4140 13484 
def chain(*args, **kwargs):
    return 1

2023-06-25 20:16:58,792 DEBUG functional 4140 13484 
def debug_task(self):
    return 1

2023-06-25 20:16:58,792 DEBUG functional 4140 13484 
def xstarmap(task, it):
    return 1

2023-06-25 20:16:58,792 DEBUG functional 4140 13484 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-25 20:16:58,793 DEBUG functional 4140 13484 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-25 20:16:58,793 DEBUG functional 4140 13484 
def chunks(task, it, n):
    return 1

2023-06-25 20:16:58,793 DEBUG functional 4140 13484 
def get_current_buy_price(symbol):
    return 1

2023-06-25 20:17:00,729 DEBUG proactor_events 16088 17492 Using proactor: IocpProactor
2023-06-25 20:17:00,732 DEBUG __init__ 16088 17492 connect: wss://socket.polygon.io/crypto
2023-06-25 20:17:00,755 DEBUG proactor_events 18176 12544 Using proactor: IocpProactor
2023-06-25 20:17:00,756 DEBUG __init__ 18176 12544 connect: wss://socket.polygon.io/crypto
2023-06-25 20:17:02,487 DEBUG proactor_events 9148 20992 Using proactor: IocpProactor
2023-06-25 20:17:02,490 DEBUG __init__ 9148 20992 connect: wss://socket.polygon.io/crypto
2023-06-25 20:17:05,045 DEBUG proactor_events 13524 92 Using proactor: IocpProactor
2023-06-25 20:17:05,047 DEBUG __init__ 13524 92 connect: wss://socket.polygon.io/crypto
2023-06-25 20:19:07,772 DEBUG proactor_events 12544 4408 Using proactor: IocpProactor
2023-06-25 20:19:07,774 DEBUG __init__ 12544 4408 connect: wss://socket.polygon.io/crypto
2023-06-25 20:19:07,806 DEBUG functional 12544 12812 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-25 20:19:07,806 DEBUG functional 12544 12812 
def backend_cleanup():
    return 1

2023-06-25 20:19:07,807 DEBUG functional 12544 12812 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-25 20:19:07,807 DEBUG functional 12544 12812 
def xmap(task, it):
    return 1

2023-06-25 20:19:07,807 DEBUG functional 12544 12812 
def chain(*args, **kwargs):
    return 1

2023-06-25 20:19:07,808 DEBUG functional 12544 12812 
def debug_task(self):
    return 1

2023-06-25 20:19:07,808 DEBUG functional 12544 12812 
def xstarmap(task, it):
    return 1

2023-06-25 20:19:07,808 DEBUG functional 12544 12812 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-25 20:19:07,809 DEBUG functional 12544 12812 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-25 20:19:07,809 DEBUG functional 12544 12812 
def chunks(task, it, n):
    return 1

2023-06-25 20:19:07,809 DEBUG functional 12544 12812 
def get_current_buy_price(symbol):
    return 1

2023-06-25 20:19:09,894 DEBUG proactor_events 10984 15256 Using proactor: IocpProactor
2023-06-25 20:19:09,897 DEBUG __init__ 10984 15256 connect: wss://socket.polygon.io/crypto
2023-06-25 20:19:09,902 DEBUG proactor_events 11652 17952 Using proactor: IocpProactor
2023-06-25 20:19:09,906 DEBUG __init__ 11652 17952 connect: wss://socket.polygon.io/crypto
2023-06-25 20:19:12,411 DEBUG proactor_events 17324 9760 Using proactor: IocpProactor
2023-06-25 20:19:12,414 DEBUG __init__ 17324 9760 connect: wss://socket.polygon.io/crypto
2023-06-25 20:19:14,915 DEBUG proactor_events 10396 17020 Using proactor: IocpProactor
2023-06-25 20:19:14,918 DEBUG __init__ 10396 17020 connect: wss://socket.polygon.io/crypto
2023-06-25 20:19:17,255 DEBUG proactor_events 996 16148 Using proactor: IocpProactor
2023-06-25 20:19:17,258 DEBUG __init__ 996 16148 connect: wss://socket.polygon.io/crypto
2023-06-25 20:26:33,826 INFO autoreload 7088 10880 Watching for file changes with StatReloader
2023-06-25 20:27:10,177 INFO autoreload 7088 10880 C:\Users\Evert\Desktop\Django\monreal\trading\data_feed.py changed, reloading.
2023-06-25 20:27:11,705 INFO autoreload 6512 21512 Watching for file changes with StatReloader
2023-06-25 20:27:38,963 INFO autoreload 18928 2904 Watching for file changes with StatReloader
2023-06-25 20:27:48,750 DEBUG functional 18660 7072 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-25 20:27:48,750 DEBUG functional 18660 7072 
def backend_cleanup():
    return 1

2023-06-25 20:27:48,750 DEBUG functional 18660 7072 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-25 20:27:48,751 DEBUG functional 18660 7072 
def xmap(task, it):
    return 1

2023-06-25 20:27:48,751 DEBUG functional 18660 7072 
def chain(*args, **kwargs):
    return 1

2023-06-25 20:27:48,751 DEBUG functional 18660 7072 
def debug_task(self):
    return 1

2023-06-25 20:27:48,752 DEBUG functional 18660 7072 
def xstarmap(task, it):
    return 1

2023-06-25 20:27:48,752 DEBUG functional 18660 7072 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-25 20:27:48,752 DEBUG functional 18660 7072 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-25 20:27:48,753 DEBUG functional 18660 7072 
def chunks(task, it, n):
    return 1

2023-06-25 20:27:48,753 DEBUG functional 18660 7072 
def get_current_buy_price(symbol):
    return 1

2023-06-25 20:28:40,257 INFO autoreload 18928 2904 C:\Users\Evert\Desktop\Django\monreal\monreal\settings.py changed, reloading.
2023-06-25 20:28:41,808 INFO autoreload 11464 11396 Watching for file changes with StatReloader
2023-06-25 20:28:51,410 DEBUG functional 22036 13912 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-25 20:28:51,411 DEBUG functional 22036 13912 
def backend_cleanup():
    return 1

2023-06-25 20:28:51,411 DEBUG functional 22036 13912 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-25 20:28:51,412 DEBUG functional 22036 13912 
def xmap(task, it):
    return 1

2023-06-25 20:28:51,412 DEBUG functional 22036 13912 
def chain(*args, **kwargs):
    return 1

2023-06-25 20:28:51,412 DEBUG functional 22036 13912 
def debug_task(self):
    return 1

2023-06-25 20:28:51,413 DEBUG functional 22036 13912 
def xstarmap(task, it):
    return 1

2023-06-25 20:28:51,413 DEBUG functional 22036 13912 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-25 20:28:51,413 DEBUG functional 22036 13912 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-25 20:28:51,414 DEBUG functional 22036 13912 
def chunks(task, it, n):
    return 1

2023-06-25 20:28:51,414 DEBUG functional 22036 13912 
def get_current_buy_price(symbol):
    return 1

2023-06-25 20:45:36,538 DEBUG proactor_events 2408 1356 Using proactor: IocpProactor
2023-06-25 20:45:36,539 DEBUG __init__ 2408 1356 connect: wss://socket.polygon.io/crypto
2023-06-25 20:45:36,671 DEBUG protocol 2408 1356 = connection is CONNECTING
2023-06-25 20:45:36,777 DEBUG client 2408 1356 > GET /crypto HTTP/1.1
2023-06-25 20:45:36,777 DEBUG client 2408 1356 > Host: socket.polygon.io
2023-06-25 20:45:36,777 DEBUG client 2408 1356 > Upgrade: websocket
2023-06-25 20:45:36,777 DEBUG client 2408 1356 > Connection: Upgrade
2023-06-25 20:45:36,777 DEBUG client 2408 1356 > Sec-WebSocket-Key: N43yH1IrxmyMSmJlvsELuw==
2023-06-25 20:45:36,777 DEBUG client 2408 1356 > Sec-WebSocket-Version: 13
2023-06-25 20:45:36,777 DEBUG client 2408 1356 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 20:45:36,777 DEBUG client 2408 1356 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 20:45:36,985 DEBUG client 2408 1356 < HTTP/1.1 101 Switching Protocols
2023-06-25 20:45:36,985 DEBUG client 2408 1356 < Server: nginx/1.19.2
2023-06-25 20:45:36,985 DEBUG client 2408 1356 < Date: Sun, 25 Jun 2023 17:45:37 GMT
2023-06-25 20:45:36,985 DEBUG client 2408 1356 < Connection: upgrade
2023-06-25 20:45:36,986 DEBUG client 2408 1356 < Upgrade: websocket
2023-06-25 20:45:36,986 DEBUG client 2408 1356 < Sec-WebSocket-Accept: /F9myf6Svm6IB4SkqL0XMbNWt+c=
2023-06-25 20:45:36,986 DEBUG client 2408 1356 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 20:45:36,986 DEBUG protocol 2408 1356 = connection is OPEN
2023-06-25 20:45:36,986 DEBUG protocol 2408 1356 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 20:45:36,986 DEBUG __init__ 2408 1356 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 20:45:36,986 DEBUG __init__ 2408 1356 authing...
2023-06-25 20:45:36,987 DEBUG protocol 2408 1356 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 20:45:37,092 DEBUG protocol 2408 1356 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 20:45:37,092 DEBUG __init__ 2408 1356 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 20:45:37,093 DEBUG __init__ 2408 1356 reconciling: set() {'XG.BTC-USD'}
2023-06-25 20:45:37,093 DEBUG __init__ 2408 1356 subbing: XG.BTC-USD
2023-06-25 20:45:37,093 DEBUG protocol 2408 1356 > TEXT '{"action": "subscribe", "params": "XG.BTC-USD"}' [47 bytes]
2023-06-25 20:45:38,031 DEBUG proactor_events 11620 2780 Using proactor: IocpProactor
2023-06-25 20:45:38,032 DEBUG __init__ 11620 2780 connect: wss://socket.polygon.io/crypto
2023-06-25 20:45:38,061 INFO autoreload 11620 15796 Watching for file changes with StatReloader
2023-06-25 20:45:38,152 DEBUG protocol 11620 2780 = connection is CONNECTING
2023-06-25 20:45:38,254 DEBUG client 11620 2780 > GET /crypto HTTP/1.1
2023-06-25 20:45:38,254 DEBUG client 11620 2780 > Host: socket.polygon.io
2023-06-25 20:45:38,254 DEBUG client 11620 2780 > Upgrade: websocket
2023-06-25 20:45:38,254 DEBUG client 11620 2780 > Connection: Upgrade
2023-06-25 20:45:38,255 DEBUG client 11620 2780 > Sec-WebSocket-Key: 0mOlhEYLpo7Q2YkUUzXiag==
2023-06-25 20:45:38,255 DEBUG client 11620 2780 > Sec-WebSocket-Version: 13
2023-06-25 20:45:38,255 DEBUG client 11620 2780 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 20:45:38,255 DEBUG client 11620 2780 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 20:45:38,454 DEBUG client 11620 2780 < HTTP/1.1 101 Switching Protocols
2023-06-25 20:45:38,454 DEBUG client 11620 2780 < Server: nginx/1.19.2
2023-06-25 20:45:38,454 DEBUG client 11620 2780 < Date: Sun, 25 Jun 2023 17:45:38 GMT
2023-06-25 20:45:38,454 DEBUG client 11620 2780 < Connection: upgrade
2023-06-25 20:45:38,454 DEBUG client 11620 2780 < Upgrade: websocket
2023-06-25 20:45:38,454 DEBUG client 11620 2780 < Sec-WebSocket-Accept: 8/zyPemyC15rIM1Q/5F9+xVEpRk=
2023-06-25 20:45:38,455 DEBUG client 11620 2780 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 20:45:38,455 DEBUG protocol 11620 2780 = connection is OPEN
2023-06-25 20:45:38,455 DEBUG protocol 11620 2780 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 20:45:38,455 DEBUG __init__ 11620 2780 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 20:45:38,456 DEBUG __init__ 11620 2780 authing...
2023-06-25 20:45:38,456 DEBUG protocol 11620 2780 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 20:45:38,563 DEBUG protocol 11620 2780 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 20:45:38,563 DEBUG __init__ 11620 2780 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 20:45:38,564 DEBUG __init__ 11620 2780 reconciling: set() {'XG.BTC-USD'}
2023-06-25 20:45:38,564 DEBUG __init__ 11620 2780 subbing: XG.BTC-USD
2023-06-25 20:45:38,564 DEBUG protocol 11620 2780 > TEXT '{"action": "subscribe", "params": "XG.BTC-USD"}' [47 bytes]
2023-06-25 20:45:40,266 DEBUG protocol 2408 1356 < TEXT '[{"ev":"status","status":"max_connections","mes...onnections exceeded."}]' [96 bytes]
2023-06-25 20:45:40,266 DEBUG protocol 2408 1356 < CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 20:45:40,266 DEBUG protocol 2408 1356 = connection is CLOSING
2023-06-25 20:45:40,266 DEBUG protocol 2408 1356 > CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 20:45:40,267 DEBUG protocol 2408 1356 = connection is CLOSED
2023-06-25 20:45:40,267 DEBUG __init__ 2408 1356 status: Maximum number of connections exceeded.
2023-06-25 20:45:40,267 DEBUG protocol 2408 1356 x closing TCP connection
2023-06-25 20:45:40,267 DEBUG __init__ 2408 1356 connection closed (ERR): received 1008 (policy violation); then sent 1008 (policy violation)
2023-06-25 20:45:40,366 DEBUG protocol 2408 1356 = connection is CONNECTING
2023-06-25 20:45:40,468 DEBUG client 2408 1356 > GET /crypto HTTP/1.1
2023-06-25 20:45:40,469 DEBUG client 2408 1356 > Host: socket.polygon.io
2023-06-25 20:45:40,469 DEBUG client 2408 1356 > Upgrade: websocket
2023-06-25 20:45:40,469 DEBUG client 2408 1356 > Connection: Upgrade
2023-06-25 20:45:40,469 DEBUG client 2408 1356 > Sec-WebSocket-Key: n/PHhni+XU32zFRb1INpxQ==
2023-06-25 20:45:40,469 DEBUG client 2408 1356 > Sec-WebSocket-Version: 13
2023-06-25 20:45:40,469 DEBUG client 2408 1356 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 20:45:40,469 DEBUG client 2408 1356 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 20:45:40,663 DEBUG client 2408 1356 < HTTP/1.1 101 Switching Protocols
2023-06-25 20:45:40,664 DEBUG client 2408 1356 < Server: nginx/1.19.2
2023-06-25 20:45:40,664 DEBUG client 2408 1356 < Date: Sun, 25 Jun 2023 17:45:40 GMT
2023-06-25 20:45:40,664 DEBUG client 2408 1356 < Connection: upgrade
2023-06-25 20:45:40,664 DEBUG client 2408 1356 < Upgrade: websocket
2023-06-25 20:45:40,664 DEBUG client 2408 1356 < Sec-WebSocket-Accept: SHEFoetBX8YGGYlLWQ3R1255QaY=
2023-06-25 20:45:40,664 DEBUG client 2408 1356 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 20:45:40,664 DEBUG protocol 2408 1356 = connection is OPEN
2023-06-25 20:45:40,664 DEBUG protocol 2408 1356 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 20:45:40,664 DEBUG __init__ 2408 1356 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 20:45:40,665 DEBUG __init__ 2408 1356 authing...
2023-06-25 20:45:40,665 DEBUG protocol 2408 1356 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 20:45:40,765 DEBUG protocol 2408 1356 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 20:45:40,765 DEBUG __init__ 2408 1356 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 20:45:40,765 DEBUG __init__ 2408 1356 reconciling: set() {'XG.BTC-USD'}
2023-06-25 20:45:40,766 DEBUG __init__ 2408 1356 subbing: XG.BTC-USD
2023-06-25 20:45:40,766 DEBUG protocol 2408 1356 > TEXT '{"action": "subscribe", "params": "XG.BTC-USD"}' [47 bytes]
2023-06-25 20:45:43,452 DEBUG protocol 11620 2780 < PING '' [0 bytes]
2023-06-25 20:45:43,452 DEBUG protocol 11620 2780 > PONG '' [0 bytes]
2023-06-25 20:52:18,033 INFO autoreload 12248 17216 Watching for file changes with StatReloader
2023-06-25 20:53:18,964 INFO autoreload 5036 22308 Watching for file changes with StatReloader
2023-06-25 20:54:04,631 INFO autoreload 5036 22308 C:\Users\Evert\Desktop\Django\monreal\trading\data_feed.py changed, reloading.
2023-06-25 20:54:06,107 DEBUG proactor_events 21868 15220 Using proactor: IocpProactor
2023-06-25 20:54:06,108 DEBUG __init__ 21868 15220 connect: wss://socket.polygon.io/crypto
2023-06-25 20:54:06,140 INFO autoreload 21868 21476 Watching for file changes with StatReloader
2023-06-25 20:54:06,239 DEBUG protocol 21868 15220 = connection is CONNECTING
2023-06-25 20:54:06,341 DEBUG client 21868 15220 > GET /crypto HTTP/1.1
2023-06-25 20:54:06,341 DEBUG client 21868 15220 > Host: socket.polygon.io
2023-06-25 20:54:06,341 DEBUG client 21868 15220 > Upgrade: websocket
2023-06-25 20:54:06,341 DEBUG client 21868 15220 > Connection: Upgrade
2023-06-25 20:54:06,341 DEBUG client 21868 15220 > Sec-WebSocket-Key: 8VcHAm7HvfSpUoBfMPm+1A==
2023-06-25 20:54:06,341 DEBUG client 21868 15220 > Sec-WebSocket-Version: 13
2023-06-25 20:54:06,341 DEBUG client 21868 15220 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 20:54:06,342 DEBUG client 21868 15220 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 20:54:06,538 DEBUG client 21868 15220 < HTTP/1.1 101 Switching Protocols
2023-06-25 20:54:06,538 DEBUG client 21868 15220 < Server: nginx/1.19.2
2023-06-25 20:54:06,538 DEBUG client 21868 15220 < Date: Sun, 25 Jun 2023 17:54:06 GMT
2023-06-25 20:54:06,538 DEBUG client 21868 15220 < Connection: upgrade
2023-06-25 20:54:06,538 DEBUG client 21868 15220 < Upgrade: websocket
2023-06-25 20:54:06,539 DEBUG client 21868 15220 < Sec-WebSocket-Accept: aEJQe+S7JKH/d4+L1dHl1Q35ohI=
2023-06-25 20:54:06,539 DEBUG client 21868 15220 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 20:54:06,539 DEBUG protocol 21868 15220 = connection is OPEN
2023-06-25 20:54:06,539 DEBUG protocol 21868 15220 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 20:54:06,540 DEBUG __init__ 21868 15220 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 20:54:06,540 DEBUG __init__ 21868 15220 authing...
2023-06-25 20:54:06,540 DEBUG protocol 21868 15220 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 20:54:06,643 DEBUG protocol 21868 15220 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 20:54:06,643 DEBUG __init__ 21868 15220 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 20:54:06,643 DEBUG __init__ 21868 15220 reconciling: set() {'XG.BTC-USD'}
2023-06-25 20:54:06,644 DEBUG __init__ 21868 15220 subbing: XG.BTC-USD
2023-06-25 20:54:06,644 DEBUG protocol 21868 15220 > TEXT '{"action": "subscribe", "params": "XG.BTC-USD"}' [47 bytes]
2023-06-25 20:54:11,538 DEBUG protocol 21868 15220 < PING '' [0 bytes]
2023-06-25 20:54:11,538 DEBUG protocol 21868 15220 > PONG '' [0 bytes]
2023-06-25 20:54:16,537 DEBUG protocol 21868 15220 < PING '' [0 bytes]
2023-06-25 20:54:16,537 DEBUG protocol 21868 15220 > PONG '' [0 bytes]
2023-06-25 20:54:21,537 DEBUG protocol 21868 15220 < PING '' [0 bytes]
2023-06-25 20:54:21,537 DEBUG protocol 21868 15220 > PONG '' [0 bytes]
2023-06-25 20:54:26,537 DEBUG protocol 21868 15220 < PING '' [0 bytes]
2023-06-25 20:54:26,537 DEBUG protocol 21868 15220 > PONG '' [0 bytes]
2023-06-25 20:54:26,537 DEBUG protocol 21868 15220 % sending keepalive ping
2023-06-25 20:54:26,751 DEBUG protocol 21868 15220 % received keepalive pong
2023-06-25 20:54:31,537 DEBUG protocol 21868 15220 < PING '' [0 bytes]
2023-06-25 20:54:31,537 DEBUG protocol 21868 15220 > PONG '' [0 bytes]
2023-06-25 20:54:36,536 DEBUG protocol 21868 15220 < PING '' [0 bytes]
2023-06-25 20:54:36,537 DEBUG protocol 21868 15220 > PONG '' [0 bytes]
2023-06-25 20:54:41,536 DEBUG protocol 21868 15220 < PING '' [0 bytes]
2023-06-25 20:54:41,536 DEBUG protocol 21868 15220 > PONG '' [0 bytes]
2023-06-25 20:54:46,536 DEBUG protocol 21868 15220 < PING '' [0 bytes]
2023-06-25 20:54:46,536 DEBUG protocol 21868 15220 > PONG '' [0 bytes]
2023-06-25 20:54:46,746 DEBUG protocol 21868 15220 % sending keepalive ping
2023-06-25 20:54:46,746 DEBUG protocol 21868 15220 > PING c8 04 80 3a [binary, 4 bytes]
2023-06-25 20:54:46,843 DEBUG protocol 21868 15220 < PONG c8 04 80 3a [binary, 4 bytes]
2023-06-25 20:54:46,843 DEBUG protocol 21868 15220 % received keepalive pong
2023-06-25 20:54:51,537 DEBUG protocol 21868 15220 < PING '' [0 bytes]
2023-06-25 20:54:51,537 DEBUG protocol 21868 15220 > PONG '' [0 bytes]
2023-06-25 20:54:56,536 DEBUG protocol 21868 15220 < PING '' [0 bytes]
2023-06-25 20:54:56,536 DEBUG protocol 21868 15220 > PONG '' [0 bytes]
2023-06-25 20:55:01,536 DEBUG protocol 21868 15220 < PING '' [0 bytes]
2023-06-25 20:55:01,536 DEBUG protocol 21868 15220 > PONG '' [0 bytes]
2023-06-25 20:55:06,536 DEBUG protocol 21868 15220 < PING '' [0 bytes]
2023-06-25 20:55:06,536 DEBUG protocol 21868 15220 > PONG '' [0 bytes]
2023-06-25 20:55:06,842 DEBUG protocol 21868 15220 % sending keepalive ping
2023-06-25 20:55:06,842 DEBUG protocol 21868 15220 > PING 2f 58 50 87 [binary, 4 bytes]
2023-06-25 20:55:06,939 DEBUG protocol 21868 15220 < PONG 2f 58 50 87 [binary, 4 bytes]
2023-06-25 20:55:06,939 DEBUG protocol 21868 15220 % received keepalive pong
2023-06-25 20:55:33,495 DEBUG proactor_events 14024 21668 Using proactor: IocpProactor
2023-06-25 20:55:33,496 DEBUG __init__ 14024 21668 connect: wss://socket.polygon.io/crypto
2023-06-25 20:55:33,630 DEBUG protocol 14024 21668 = connection is CONNECTING
2023-06-25 20:55:33,738 DEBUG client 14024 21668 > GET /crypto HTTP/1.1
2023-06-25 20:55:33,738 DEBUG client 14024 21668 > Host: socket.polygon.io
2023-06-25 20:55:33,738 DEBUG client 14024 21668 > Upgrade: websocket
2023-06-25 20:55:33,738 DEBUG client 14024 21668 > Connection: Upgrade
2023-06-25 20:55:33,738 DEBUG client 14024 21668 > Sec-WebSocket-Key: ORgZKdn6MJSinyi95dtD2w==
2023-06-25 20:55:33,738 DEBUG client 14024 21668 > Sec-WebSocket-Version: 13
2023-06-25 20:55:33,738 DEBUG client 14024 21668 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 20:55:33,738 DEBUG client 14024 21668 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 20:55:33,943 DEBUG client 14024 21668 < HTTP/1.1 101 Switching Protocols
2023-06-25 20:55:33,943 DEBUG client 14024 21668 < Server: nginx/1.19.2
2023-06-25 20:55:33,943 DEBUG client 14024 21668 < Date: Sun, 25 Jun 2023 17:55:34 GMT
2023-06-25 20:55:33,943 DEBUG client 14024 21668 < Connection: upgrade
2023-06-25 20:55:33,943 DEBUG client 14024 21668 < Upgrade: websocket
2023-06-25 20:55:33,943 DEBUG client 14024 21668 < Sec-WebSocket-Accept: WHAGwiINHeyT6Oo5cEputtA2uEo=
2023-06-25 20:55:33,943 DEBUG client 14024 21668 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 20:55:33,943 DEBUG protocol 14024 21668 = connection is OPEN
2023-06-25 20:55:33,944 DEBUG protocol 14024 21668 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 20:55:33,944 DEBUG __init__ 14024 21668 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 20:55:33,944 DEBUG __init__ 14024 21668 authing...
2023-06-25 20:55:33,944 DEBUG protocol 14024 21668 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 20:55:34,049 DEBUG protocol 14024 21668 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 20:55:34,050 DEBUG __init__ 14024 21668 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 20:55:34,050 DEBUG __init__ 14024 21668 reconciling: set() {'XG.BTC-USD'}
2023-06-25 20:55:34,050 DEBUG __init__ 14024 21668 subbing: XG.BTC-USD
2023-06-25 20:55:34,050 DEBUG protocol 14024 21668 > TEXT '{"action": "subscribe", "params": "XG.BTC-USD"}' [47 bytes]
2023-06-25 20:55:34,911 DEBUG proactor_events 20716 7052 Using proactor: IocpProactor
2023-06-25 20:55:34,912 DEBUG __init__ 20716 7052 connect: wss://socket.polygon.io/crypto
2023-06-25 20:55:34,940 INFO autoreload 20716 17668 Watching for file changes with StatReloader
2023-06-25 20:55:35,032 DEBUG protocol 20716 7052 = connection is CONNECTING
2023-06-25 20:55:35,136 DEBUG client 20716 7052 > GET /crypto HTTP/1.1
2023-06-25 20:55:35,136 DEBUG client 20716 7052 > Host: socket.polygon.io
2023-06-25 20:55:35,136 DEBUG client 20716 7052 > Upgrade: websocket
2023-06-25 20:55:35,136 DEBUG client 20716 7052 > Connection: Upgrade
2023-06-25 20:55:35,136 DEBUG client 20716 7052 > Sec-WebSocket-Key: jhIZNpvde0H3XG2IFlplww==
2023-06-25 20:55:35,137 DEBUG client 20716 7052 > Sec-WebSocket-Version: 13
2023-06-25 20:55:35,137 DEBUG client 20716 7052 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 20:55:35,137 DEBUG client 20716 7052 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 20:55:35,331 DEBUG client 20716 7052 < HTTP/1.1 101 Switching Protocols
2023-06-25 20:55:35,331 DEBUG client 20716 7052 < Server: nginx/1.19.2
2023-06-25 20:55:35,331 DEBUG client 20716 7052 < Date: Sun, 25 Jun 2023 17:55:35 GMT
2023-06-25 20:55:35,331 DEBUG client 20716 7052 < Connection: upgrade
2023-06-25 20:55:35,332 DEBUG client 20716 7052 < Upgrade: websocket
2023-06-25 20:55:35,332 DEBUG client 20716 7052 < Sec-WebSocket-Accept: +tTU8gda8dM1iDPtvGc8DqKVtRg=
2023-06-25 20:55:35,332 DEBUG client 20716 7052 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 20:55:35,332 DEBUG protocol 20716 7052 = connection is OPEN
2023-06-25 20:55:35,332 DEBUG protocol 20716 7052 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 20:55:35,332 DEBUG __init__ 20716 7052 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 20:55:35,333 DEBUG __init__ 20716 7052 authing...
2023-06-25 20:55:35,333 DEBUG protocol 20716 7052 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 20:55:35,433 DEBUG protocol 20716 7052 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 20:55:35,433 DEBUG __init__ 20716 7052 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 20:55:35,434 DEBUG __init__ 20716 7052 reconciling: set() {'XG.BTC-USD'}
2023-06-25 20:55:35,434 DEBUG __init__ 20716 7052 subbing: XG.BTC-USD
2023-06-25 20:55:35,434 DEBUG protocol 20716 7052 > TEXT '{"action": "subscribe", "params": "XG.BTC-USD"}' [47 bytes]
2023-06-25 20:55:36,018 DEBUG protocol 14024 21668 < TEXT '[{"ev":"status","status":"max_connections","mes...onnections exceeded."}]' [96 bytes]
2023-06-25 20:55:36,018 DEBUG protocol 14024 21668 < CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 20:55:36,018 DEBUG protocol 14024 21668 = connection is CLOSING
2023-06-25 20:55:36,018 DEBUG protocol 14024 21668 > CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 20:55:36,018 DEBUG protocol 14024 21668 = connection is CLOSED
2023-06-25 20:55:36,018 DEBUG __init__ 14024 21668 status: Maximum number of connections exceeded.
2023-06-25 20:55:36,019 DEBUG protocol 14024 21668 x closing TCP connection
2023-06-25 20:55:36,019 DEBUG __init__ 14024 21668 connection closed (ERR): received 1008 (policy violation); then sent 1008 (policy violation)
2023-06-25 20:55:36,121 DEBUG protocol 14024 21668 = connection is CONNECTING
2023-06-25 20:55:36,228 DEBUG client 14024 21668 > GET /crypto HTTP/1.1
2023-06-25 20:55:36,228 DEBUG client 14024 21668 > Host: socket.polygon.io
2023-06-25 20:55:36,228 DEBUG client 14024 21668 > Upgrade: websocket
2023-06-25 20:55:36,228 DEBUG client 14024 21668 > Connection: Upgrade
2023-06-25 20:55:36,228 DEBUG client 14024 21668 > Sec-WebSocket-Key: xTVSCVE+AaDP5HxTjY3InQ==
2023-06-25 20:55:36,228 DEBUG client 14024 21668 > Sec-WebSocket-Version: 13
2023-06-25 20:55:36,228 DEBUG client 14024 21668 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 20:55:36,228 DEBUG client 14024 21668 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 20:55:36,433 DEBUG client 14024 21668 < HTTP/1.1 101 Switching Protocols
2023-06-25 20:55:36,433 DEBUG client 14024 21668 < Server: nginx/1.19.2
2023-06-25 20:55:36,433 DEBUG client 14024 21668 < Date: Sun, 25 Jun 2023 17:55:36 GMT
2023-06-25 20:55:36,433 DEBUG client 14024 21668 < Connection: upgrade
2023-06-25 20:55:36,433 DEBUG client 14024 21668 < Upgrade: websocket
2023-06-25 20:55:36,433 DEBUG client 14024 21668 < Sec-WebSocket-Accept: PT4RjgzI2A4O+2/ssYJqtaFLWYE=
2023-06-25 20:55:36,433 DEBUG client 14024 21668 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 20:55:36,433 DEBUG protocol 14024 21668 = connection is OPEN
2023-06-25 20:55:36,433 DEBUG protocol 14024 21668 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 20:55:36,433 DEBUG __init__ 14024 21668 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 20:55:36,434 DEBUG __init__ 14024 21668 authing...
2023-06-25 20:55:36,434 DEBUG protocol 14024 21668 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 20:55:36,536 DEBUG protocol 14024 21668 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 20:55:36,536 DEBUG __init__ 14024 21668 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 20:55:36,537 DEBUG __init__ 14024 21668 reconciling: set() {'XG.BTC-USD'}
2023-06-25 20:55:36,537 DEBUG __init__ 14024 21668 subbing: XG.BTC-USD
2023-06-25 20:55:36,537 DEBUG protocol 14024 21668 > TEXT '{"action": "subscribe", "params": "XG.BTC-USD"}' [47 bytes]
2023-06-25 20:55:37,623 DEBUG protocol 20716 7052 < TEXT '[{"ev":"status","status":"max_connections","mes...onnections exceeded."}]' [96 bytes]
2023-06-25 20:55:37,623 DEBUG protocol 20716 7052 < CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 20:55:37,623 DEBUG protocol 20716 7052 = connection is CLOSING
2023-06-25 20:55:37,623 DEBUG protocol 20716 7052 > CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 20:55:37,623 DEBUG protocol 20716 7052 = connection is CLOSED
2023-06-25 20:55:37,623 DEBUG __init__ 20716 7052 status: Maximum number of connections exceeded.
2023-06-25 20:55:37,624 DEBUG protocol 20716 7052 x closing TCP connection
2023-06-25 20:55:37,624 DEBUG __init__ 20716 7052 connection closed (ERR): received 1008 (policy violation); then sent 1008 (policy violation)
2023-06-25 20:55:37,724 DEBUG protocol 20716 7052 = connection is CONNECTING
2023-06-25 20:55:37,825 DEBUG client 20716 7052 > GET /crypto HTTP/1.1
2023-06-25 20:55:37,826 DEBUG client 20716 7052 > Host: socket.polygon.io
2023-06-25 20:55:37,826 DEBUG client 20716 7052 > Upgrade: websocket
2023-06-25 20:55:37,826 DEBUG client 20716 7052 > Connection: Upgrade
2023-06-25 20:55:37,826 DEBUG client 20716 7052 > Sec-WebSocket-Key: Kt4/PN68Io/Ep5OFzpjodQ==
2023-06-25 20:55:37,826 DEBUG client 20716 7052 > Sec-WebSocket-Version: 13
2023-06-25 20:55:37,826 DEBUG client 20716 7052 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 20:55:37,826 DEBUG client 20716 7052 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 20:55:38,023 DEBUG client 20716 7052 < HTTP/1.1 101 Switching Protocols
2023-06-25 20:55:38,023 DEBUG client 20716 7052 < Server: nginx/1.19.2
2023-06-25 20:55:38,023 DEBUG client 20716 7052 < Date: Sun, 25 Jun 2023 17:55:38 GMT
2023-06-25 20:55:38,023 DEBUG client 20716 7052 < Connection: upgrade
2023-06-25 20:55:38,023 DEBUG client 20716 7052 < Upgrade: websocket
2023-06-25 20:55:38,023 DEBUG client 20716 7052 < Sec-WebSocket-Accept: ccRbxpYnG5q0ailjD2a2z1oSfYI=
2023-06-25 20:55:38,023 DEBUG client 20716 7052 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 20:55:38,023 DEBUG protocol 20716 7052 = connection is OPEN
2023-06-25 20:55:38,024 DEBUG protocol 20716 7052 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 20:55:38,024 DEBUG __init__ 20716 7052 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 20:55:38,024 DEBUG __init__ 20716 7052 authing...
2023-06-25 20:55:38,024 DEBUG protocol 20716 7052 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 20:55:38,123 DEBUG protocol 20716 7052 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 20:55:38,124 DEBUG __init__ 20716 7052 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 20:55:38,124 DEBUG __init__ 20716 7052 reconciling: set() {'XG.BTC-USD'}
2023-06-25 20:55:38,125 DEBUG __init__ 20716 7052 subbing: XG.BTC-USD
2023-06-25 20:55:38,125 DEBUG protocol 20716 7052 > TEXT '{"action": "subscribe", "params": "XG.BTC-USD"}' [47 bytes]
2023-06-25 20:55:41,035 DEBUG protocol 14024 21668 < TEXT '[{"ev":"status","status":"max_connections","mes...onnections exceeded."}]' [96 bytes]
2023-06-25 20:55:41,035 DEBUG protocol 14024 21668 < CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 20:55:41,035 DEBUG protocol 14024 21668 = connection is CLOSING
2023-06-25 20:55:41,035 DEBUG protocol 14024 21668 > CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 20:55:41,036 DEBUG protocol 14024 21668 = connection is CLOSED
2023-06-25 20:55:41,036 DEBUG __init__ 14024 21668 status: Maximum number of connections exceeded.
2023-06-25 20:55:41,036 DEBUG protocol 14024 21668 x closing TCP connection
2023-06-25 20:55:41,036 DEBUG __init__ 14024 21668 connection closed (ERR): received 1008 (policy violation); then sent 1008 (policy violation)
2023-06-25 20:58:15,070 INFO autoreload 13460 19720 Watching for file changes with StatReloader
2023-06-25 20:58:57,171 INFO autoreload 16448 21044 Watching for file changes with StatReloader
2023-06-25 21:01:25,524 DEBUG proactor_events 13448 14640 Using proactor: IocpProactor
2023-06-25 21:01:25,525 DEBUG __init__ 13448 14640 connect: wss://socket.polygon.io/crypto
2023-06-25 21:01:25,659 DEBUG protocol 13448 14640 = connection is CONNECTING
2023-06-25 21:01:25,765 DEBUG client 13448 14640 > GET /crypto HTTP/1.1
2023-06-25 21:01:25,765 DEBUG client 13448 14640 > Host: socket.polygon.io
2023-06-25 21:01:25,765 DEBUG client 13448 14640 > Upgrade: websocket
2023-06-25 21:01:25,765 DEBUG client 13448 14640 > Connection: Upgrade
2023-06-25 21:01:25,765 DEBUG client 13448 14640 > Sec-WebSocket-Key: a8IBpaB7fCBttQtufAR0Tg==
2023-06-25 21:01:25,765 DEBUG client 13448 14640 > Sec-WebSocket-Version: 13
2023-06-25 21:01:25,765 DEBUG client 13448 14640 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:01:25,765 DEBUG client 13448 14640 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:01:25,970 DEBUG client 13448 14640 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:01:25,970 DEBUG client 13448 14640 < Server: nginx/1.19.2
2023-06-25 21:01:25,970 DEBUG client 13448 14640 < Date: Sun, 25 Jun 2023 18:01:26 GMT
2023-06-25 21:01:25,970 DEBUG client 13448 14640 < Connection: upgrade
2023-06-25 21:01:25,970 DEBUG client 13448 14640 < Upgrade: websocket
2023-06-25 21:01:25,971 DEBUG client 13448 14640 < Sec-WebSocket-Accept: VDUX/9YbtG7UaLDGKPHVBKGkdOE=
2023-06-25 21:01:25,971 DEBUG client 13448 14640 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:01:25,971 DEBUG protocol 13448 14640 = connection is OPEN
2023-06-25 21:01:25,971 DEBUG protocol 13448 14640 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:01:25,971 DEBUG __init__ 13448 14640 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:01:25,971 DEBUG __init__ 13448 14640 authing...
2023-06-25 21:01:25,971 DEBUG protocol 13448 14640 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:01:26,077 DEBUG protocol 13448 14640 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:01:26,077 DEBUG __init__ 13448 14640 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:01:26,077 DEBUG __init__ 13448 14640 reconciling: set() {'XG.BTC-USD'}
2023-06-25 21:01:26,077 DEBUG __init__ 13448 14640 subbing: XG.BTC-USD
2023-06-25 21:01:26,077 DEBUG protocol 13448 14640 > TEXT '{"action": "subscribe", "params": "XG.BTC-USD"}' [47 bytes]
2023-06-25 21:01:26,948 DEBUG proactor_events 22488 19360 Using proactor: IocpProactor
2023-06-25 21:01:26,949 DEBUG __init__ 22488 19360 connect: wss://socket.polygon.io/crypto
2023-06-25 21:01:26,977 INFO autoreload 22488 6940 Watching for file changes with StatReloader
2023-06-25 21:01:27,070 DEBUG protocol 22488 19360 = connection is CONNECTING
2023-06-25 21:01:27,173 DEBUG client 22488 19360 > GET /crypto HTTP/1.1
2023-06-25 21:01:27,174 DEBUG client 22488 19360 > Host: socket.polygon.io
2023-06-25 21:01:27,174 DEBUG client 22488 19360 > Upgrade: websocket
2023-06-25 21:01:27,174 DEBUG client 22488 19360 > Connection: Upgrade
2023-06-25 21:01:27,174 DEBUG client 22488 19360 > Sec-WebSocket-Key: VFo4X2FaVYoRMUklRl7dBw==
2023-06-25 21:01:27,174 DEBUG client 22488 19360 > Sec-WebSocket-Version: 13
2023-06-25 21:01:27,174 DEBUG client 22488 19360 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:01:27,174 DEBUG client 22488 19360 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:01:27,372 DEBUG client 22488 19360 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:01:27,373 DEBUG client 22488 19360 < Server: nginx/1.19.2
2023-06-25 21:01:27,373 DEBUG client 22488 19360 < Date: Sun, 25 Jun 2023 18:01:27 GMT
2023-06-25 21:01:27,373 DEBUG client 22488 19360 < Connection: upgrade
2023-06-25 21:01:27,373 DEBUG client 22488 19360 < Upgrade: websocket
2023-06-25 21:01:27,373 DEBUG client 22488 19360 < Sec-WebSocket-Accept: AF00jr9kUVm4PQTfQsSmx0/+lcw=
2023-06-25 21:01:27,373 DEBUG client 22488 19360 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:01:27,373 DEBUG protocol 22488 19360 = connection is OPEN
2023-06-25 21:01:27,374 DEBUG protocol 22488 19360 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:01:27,374 DEBUG __init__ 22488 19360 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:01:27,375 DEBUG __init__ 22488 19360 authing...
2023-06-25 21:01:27,375 DEBUG protocol 22488 19360 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:01:27,477 DEBUG protocol 22488 19360 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:01:27,477 DEBUG __init__ 22488 19360 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:01:27,477 DEBUG __init__ 22488 19360 reconciling: set() {'XG.BTC-USD'}
2023-06-25 21:01:27,478 DEBUG __init__ 22488 19360 subbing: XG.BTC-USD
2023-06-25 21:01:27,478 DEBUG protocol 22488 19360 > TEXT '{"action": "subscribe", "params": "XG.BTC-USD"}' [47 bytes]
2023-06-25 21:01:28,967 DEBUG protocol 13448 14640 < TEXT '[{"ev":"status","status":"max_connections","mes...onnections exceeded."}]' [96 bytes]
2023-06-25 21:01:28,967 DEBUG protocol 13448 14640 < CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:01:28,967 DEBUG protocol 13448 14640 = connection is CLOSING
2023-06-25 21:01:28,967 DEBUG protocol 13448 14640 > CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:01:28,967 DEBUG protocol 13448 14640 = connection is CLOSED
2023-06-25 21:01:28,967 DEBUG __init__ 13448 14640 status: Maximum number of connections exceeded.
2023-06-25 21:01:28,968 DEBUG protocol 13448 14640 x closing TCP connection
2023-06-25 21:01:28,968 DEBUG __init__ 13448 14640 connection closed (ERR): received 1008 (policy violation); then sent 1008 (policy violation)
2023-06-25 21:01:29,081 DEBUG protocol 13448 14640 = connection is CONNECTING
2023-06-25 21:01:29,183 DEBUG client 13448 14640 > GET /crypto HTTP/1.1
2023-06-25 21:01:29,183 DEBUG client 13448 14640 > Host: socket.polygon.io
2023-06-25 21:01:29,183 DEBUG client 13448 14640 > Upgrade: websocket
2023-06-25 21:01:29,183 DEBUG client 13448 14640 > Connection: Upgrade
2023-06-25 21:01:29,183 DEBUG client 13448 14640 > Sec-WebSocket-Key: NiY/gyr50hFHZ+/v+1793A==
2023-06-25 21:01:29,183 DEBUG client 13448 14640 > Sec-WebSocket-Version: 13
2023-06-25 21:01:29,183 DEBUG client 13448 14640 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:01:29,183 DEBUG client 13448 14640 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:01:29,383 DEBUG client 13448 14640 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:01:29,383 DEBUG client 13448 14640 < Server: nginx/1.19.2
2023-06-25 21:01:29,383 DEBUG client 13448 14640 < Date: Sun, 25 Jun 2023 18:01:29 GMT
2023-06-25 21:01:29,383 DEBUG client 13448 14640 < Connection: upgrade
2023-06-25 21:01:29,383 DEBUG client 13448 14640 < Upgrade: websocket
2023-06-25 21:01:29,383 DEBUG client 13448 14640 < Sec-WebSocket-Accept: N3w8tA29QMc8tfa81u5GGEmVrMQ=
2023-06-25 21:01:29,383 DEBUG client 13448 14640 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:01:29,383 DEBUG protocol 13448 14640 = connection is OPEN
2023-06-25 21:01:29,383 DEBUG protocol 13448 14640 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:01:29,383 DEBUG __init__ 13448 14640 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:01:29,384 DEBUG __init__ 13448 14640 authing...
2023-06-25 21:01:29,384 DEBUG protocol 13448 14640 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:01:29,482 DEBUG protocol 13448 14640 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:01:29,482 DEBUG __init__ 13448 14640 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:01:29,482 DEBUG __init__ 13448 14640 reconciling: set() {'XG.BTC-USD'}
2023-06-25 21:01:29,483 DEBUG __init__ 13448 14640 subbing: XG.BTC-USD
2023-06-25 21:01:29,483 DEBUG protocol 13448 14640 > TEXT '{"action": "subscribe", "params": "XG.BTC-USD"}' [47 bytes]
2023-06-25 21:09:59,651 DEBUG proactor_events 11248 6556 Using proactor: IocpProactor
2023-06-25 21:09:59,652 DEBUG __init__ 11248 6556 connect: wss://socket.polygon.io/crypto
2023-06-25 21:09:59,790 DEBUG protocol 11248 6556 = connection is CONNECTING
2023-06-25 21:09:59,895 DEBUG client 11248 6556 > GET /crypto HTTP/1.1
2023-06-25 21:09:59,895 DEBUG client 11248 6556 > Host: socket.polygon.io
2023-06-25 21:09:59,895 DEBUG client 11248 6556 > Upgrade: websocket
2023-06-25 21:09:59,895 DEBUG client 11248 6556 > Connection: Upgrade
2023-06-25 21:09:59,895 DEBUG client 11248 6556 > Sec-WebSocket-Key: THr6ZL/ZOZcD2QySCSF1jw==
2023-06-25 21:09:59,896 DEBUG client 11248 6556 > Sec-WebSocket-Version: 13
2023-06-25 21:09:59,896 DEBUG client 11248 6556 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:09:59,896 DEBUG client 11248 6556 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:10:00,100 DEBUG client 11248 6556 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:10:00,100 DEBUG client 11248 6556 < Server: nginx/1.19.2
2023-06-25 21:10:00,100 DEBUG client 11248 6556 < Date: Sun, 25 Jun 2023 18:10:00 GMT
2023-06-25 21:10:00,100 DEBUG client 11248 6556 < Connection: upgrade
2023-06-25 21:10:00,100 DEBUG client 11248 6556 < Upgrade: websocket
2023-06-25 21:10:00,100 DEBUG client 11248 6556 < Sec-WebSocket-Accept: Kw5ixr8hyhm0+VXmUFylPFErCmc=
2023-06-25 21:10:00,100 DEBUG client 11248 6556 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:10:00,100 DEBUG protocol 11248 6556 = connection is OPEN
2023-06-25 21:10:00,101 DEBUG protocol 11248 6556 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:10:00,101 DEBUG __init__ 11248 6556 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:10:00,101 DEBUG __init__ 11248 6556 authing...
2023-06-25 21:10:00,101 DEBUG protocol 11248 6556 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:10:00,207 DEBUG protocol 11248 6556 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:10:00,208 DEBUG __init__ 11248 6556 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:10:00,208 DEBUG __init__ 11248 6556 reconciling: set() {'XG.BTC-USD'}
2023-06-25 21:10:00,208 DEBUG __init__ 11248 6556 subbing: XG.BTC-USD
2023-06-25 21:10:00,208 DEBUG protocol 11248 6556 > TEXT '{"action": "subscribe", "params": "XG.BTC-USD"}' [47 bytes]
2023-06-25 21:10:00,916 DEBUG proactor_events 1768 6292 Using proactor: IocpProactor
2023-06-25 21:10:00,918 DEBUG __init__ 1768 6292 connect: wss://socket.polygon.io/crypto
2023-06-25 21:10:00,936 INFO autoreload 1768 22272 Watching for file changes with StatReloader
2023-06-25 21:10:01,041 DEBUG protocol 1768 6292 = connection is CONNECTING
2023-06-25 21:10:01,142 DEBUG client 1768 6292 > GET /crypto HTTP/1.1
2023-06-25 21:10:01,142 DEBUG client 1768 6292 > Host: socket.polygon.io
2023-06-25 21:10:01,143 DEBUG client 1768 6292 > Upgrade: websocket
2023-06-25 21:10:01,143 DEBUG client 1768 6292 > Connection: Upgrade
2023-06-25 21:10:01,143 DEBUG client 1768 6292 > Sec-WebSocket-Key: L0D+piF4dOjrKHiY3sp3hQ==
2023-06-25 21:10:01,143 DEBUG client 1768 6292 > Sec-WebSocket-Version: 13
2023-06-25 21:10:01,143 DEBUG client 1768 6292 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:10:01,143 DEBUG client 1768 6292 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:10:01,351 DEBUG client 1768 6292 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:10:01,352 DEBUG client 1768 6292 < Server: nginx/1.19.2
2023-06-25 21:10:01,352 DEBUG client 1768 6292 < Date: Sun, 25 Jun 2023 18:10:01 GMT
2023-06-25 21:10:01,352 DEBUG client 1768 6292 < Connection: upgrade
2023-06-25 21:10:01,352 DEBUG client 1768 6292 < Upgrade: websocket
2023-06-25 21:10:01,352 DEBUG client 1768 6292 < Sec-WebSocket-Accept: apq7lC0kYY/0K0lgv2wOSmYM3ME=
2023-06-25 21:10:01,352 DEBUG client 1768 6292 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:10:01,352 DEBUG protocol 1768 6292 = connection is OPEN
2023-06-25 21:10:01,353 DEBUG protocol 1768 6292 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:10:01,353 DEBUG __init__ 1768 6292 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:10:01,354 DEBUG __init__ 1768 6292 authing...
2023-06-25 21:10:01,354 DEBUG protocol 1768 6292 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:10:01,454 DEBUG protocol 1768 6292 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:10:01,455 DEBUG __init__ 1768 6292 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:10:01,455 DEBUG __init__ 1768 6292 reconciling: set() {'XG.BTC-USD'}
2023-06-25 21:10:01,455 DEBUG __init__ 1768 6292 subbing: XG.BTC-USD
2023-06-25 21:10:01,456 DEBUG protocol 1768 6292 > TEXT '{"action": "subscribe", "params": "XG.BTC-USD"}' [47 bytes]
2023-06-25 21:10:03,684 DEBUG protocol 11248 6556 < TEXT '[{"ev":"status","status":"max_connections","mes...onnections exceeded."}]' [96 bytes]
2023-06-25 21:10:03,684 DEBUG protocol 11248 6556 < CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:10:03,684 DEBUG protocol 11248 6556 = connection is CLOSING
2023-06-25 21:10:03,684 DEBUG protocol 11248 6556 > CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:10:03,685 DEBUG protocol 11248 6556 = connection is CLOSED
2023-06-25 21:10:03,685 DEBUG __init__ 11248 6556 status: Maximum number of connections exceeded.
2023-06-25 21:10:03,686 DEBUG protocol 11248 6556 x closing TCP connection
2023-06-25 21:10:03,686 DEBUG __init__ 11248 6556 connection closed (ERR): received 1008 (policy violation); then sent 1008 (policy violation)
2023-06-25 21:10:03,785 DEBUG protocol 11248 6556 = connection is CONNECTING
2023-06-25 21:10:03,886 DEBUG client 11248 6556 > GET /crypto HTTP/1.1
2023-06-25 21:10:03,886 DEBUG client 11248 6556 > Host: socket.polygon.io
2023-06-25 21:10:03,886 DEBUG client 11248 6556 > Upgrade: websocket
2023-06-25 21:10:03,887 DEBUG client 11248 6556 > Connection: Upgrade
2023-06-25 21:10:03,887 DEBUG client 11248 6556 > Sec-WebSocket-Key: LIYLbg7Lewa8K2iB2X22fw==
2023-06-25 21:10:03,887 DEBUG client 11248 6556 > Sec-WebSocket-Version: 13
2023-06-25 21:10:03,887 DEBUG client 11248 6556 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:10:03,887 DEBUG client 11248 6556 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:10:04,086 DEBUG client 11248 6556 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:10:04,086 DEBUG client 11248 6556 < Server: nginx/1.19.2
2023-06-25 21:10:04,086 DEBUG client 11248 6556 < Date: Sun, 25 Jun 2023 18:10:04 GMT
2023-06-25 21:10:04,086 DEBUG client 11248 6556 < Connection: upgrade
2023-06-25 21:10:04,086 DEBUG client 11248 6556 < Upgrade: websocket
2023-06-25 21:10:04,086 DEBUG client 11248 6556 < Sec-WebSocket-Accept: TQRBZBT1EgqH/v/le2xjRd/Ch5c=
2023-06-25 21:10:04,086 DEBUG client 11248 6556 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:10:04,086 DEBUG protocol 11248 6556 = connection is OPEN
2023-06-25 21:10:04,087 DEBUG protocol 11248 6556 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:10:04,087 DEBUG __init__ 11248 6556 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:10:04,087 DEBUG __init__ 11248 6556 authing...
2023-06-25 21:10:04,087 DEBUG protocol 11248 6556 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:10:04,185 DEBUG protocol 11248 6556 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:10:04,186 DEBUG __init__ 11248 6556 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:10:04,186 DEBUG __init__ 11248 6556 reconciling: set() {'XG.BTC-USD'}
2023-06-25 21:10:04,186 DEBUG __init__ 11248 6556 subbing: XG.BTC-USD
2023-06-25 21:10:04,187 DEBUG protocol 11248 6556 > TEXT '{"action": "subscribe", "params": "XG.BTC-USD"}' [47 bytes]
2023-06-25 21:10:06,227 DEBUG protocol 1768 6292 < TEXT '[{"ev":"status","status":"max_connections","mes...onnections exceeded."}]' [96 bytes]
2023-06-25 21:10:06,227 DEBUG protocol 1768 6292 < CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:10:06,227 DEBUG protocol 1768 6292 = connection is CLOSING
2023-06-25 21:10:06,227 DEBUG protocol 1768 6292 > CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:10:06,227 DEBUG protocol 1768 6292 = connection is CLOSED
2023-06-25 21:10:06,228 DEBUG __init__ 1768 6292 status: Maximum number of connections exceeded.
2023-06-25 21:10:06,228 DEBUG protocol 1768 6292 x closing TCP connection
2023-06-25 21:10:06,228 DEBUG __init__ 1768 6292 connection closed (ERR): received 1008 (policy violation); then sent 1008 (policy violation)
2023-06-25 21:10:06,333 DEBUG protocol 1768 6292 = connection is CONNECTING
2023-06-25 21:10:06,438 DEBUG client 1768 6292 > GET /crypto HTTP/1.1
2023-06-25 21:10:06,438 DEBUG client 1768 6292 > Host: socket.polygon.io
2023-06-25 21:10:06,438 DEBUG client 1768 6292 > Upgrade: websocket
2023-06-25 21:10:06,438 DEBUG client 1768 6292 > Connection: Upgrade
2023-06-25 21:10:06,438 DEBUG client 1768 6292 > Sec-WebSocket-Key: wslD5kdAb7tYVBpsidJWTg==
2023-06-25 21:10:06,438 DEBUG client 1768 6292 > Sec-WebSocket-Version: 13
2023-06-25 21:10:06,438 DEBUG client 1768 6292 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:10:06,438 DEBUG client 1768 6292 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:10:06,642 DEBUG client 1768 6292 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:10:06,642 DEBUG client 1768 6292 < Server: nginx/1.19.2
2023-06-25 21:10:06,642 DEBUG client 1768 6292 < Date: Sun, 25 Jun 2023 18:10:06 GMT
2023-06-25 21:10:06,642 DEBUG client 1768 6292 < Connection: upgrade
2023-06-25 21:10:06,642 DEBUG client 1768 6292 < Upgrade: websocket
2023-06-25 21:10:06,642 DEBUG client 1768 6292 < Sec-WebSocket-Accept: LBXnvAFmvHEoQnFE2YYtvYokSCk=
2023-06-25 21:10:06,642 DEBUG client 1768 6292 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:10:06,642 DEBUG protocol 1768 6292 = connection is OPEN
2023-06-25 21:10:06,642 DEBUG protocol 1768 6292 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:10:06,643 DEBUG __init__ 1768 6292 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:10:06,643 DEBUG __init__ 1768 6292 authing...
2023-06-25 21:10:06,643 DEBUG protocol 1768 6292 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:10:06,746 DEBUG protocol 1768 6292 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:10:06,746 DEBUG __init__ 1768 6292 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:10:06,746 DEBUG __init__ 1768 6292 reconciling: set() {'XG.BTC-USD'}
2023-06-25 21:10:06,746 DEBUG __init__ 1768 6292 subbing: XG.BTC-USD
2023-06-25 21:10:06,746 DEBUG protocol 1768 6292 > TEXT '{"action": "subscribe", "params": "XG.BTC-USD"}' [47 bytes]
2023-06-25 21:12:01,001 INFO autoreload 11284 5224 Watching for file changes with StatReloader
2023-06-25 21:12:01,233 DEBUG proactor_events 11284 18868 Using proactor: IocpProactor
2023-06-25 21:12:01,236 DEBUG __init__ 11284 18868 connect: wss://socket.polygon.io/crypto
2023-06-25 21:12:01,404 DEBUG protocol 11284 18868 = connection is CONNECTING
2023-06-25 21:12:01,509 DEBUG client 11284 18868 > GET /crypto HTTP/1.1
2023-06-25 21:12:01,509 DEBUG client 11284 18868 > Host: socket.polygon.io
2023-06-25 21:12:01,509 DEBUG client 11284 18868 > Upgrade: websocket
2023-06-25 21:12:01,510 DEBUG client 11284 18868 > Connection: Upgrade
2023-06-25 21:12:01,510 DEBUG client 11284 18868 > Sec-WebSocket-Key: uyc/y9E5X0+wmqca0AKcag==
2023-06-25 21:12:01,510 DEBUG client 11284 18868 > Sec-WebSocket-Version: 13
2023-06-25 21:12:01,510 DEBUG client 11284 18868 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:12:01,510 DEBUG client 11284 18868 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:12:01,713 DEBUG client 11284 18868 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:12:01,713 DEBUG client 11284 18868 < Server: nginx/1.19.2
2023-06-25 21:12:01,713 DEBUG client 11284 18868 < Date: Sun, 25 Jun 2023 18:12:02 GMT
2023-06-25 21:12:01,713 DEBUG client 11284 18868 < Connection: upgrade
2023-06-25 21:12:01,713 DEBUG client 11284 18868 < Upgrade: websocket
2023-06-25 21:12:01,713 DEBUG client 11284 18868 < Sec-WebSocket-Accept: oa5VGAZQW7jjLanAuDQefJTVK5w=
2023-06-25 21:12:01,714 DEBUG client 11284 18868 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:12:01,714 DEBUG protocol 11284 18868 = connection is OPEN
2023-06-25 21:12:01,714 DEBUG protocol 11284 18868 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:12:01,714 DEBUG __init__ 11284 18868 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:12:01,715 DEBUG __init__ 11284 18868 authing...
2023-06-25 21:12:01,715 DEBUG protocol 11284 18868 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:12:01,823 DEBUG protocol 11284 18868 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:12:01,823 DEBUG __init__ 11284 18868 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:12:01,823 DEBUG __init__ 11284 18868 reconciling: set() {'XG.BTC-USD'}
2023-06-25 21:12:01,824 DEBUG __init__ 11284 18868 subbing: XG.BTC-USD
2023-06-25 21:12:01,824 DEBUG protocol 11284 18868 > TEXT '{"action": "subscribe", "params": "XG.BTC-USD"}' [47 bytes]
2023-06-25 21:12:06,712 DEBUG protocol 11284 18868 < PING '' [0 bytes]
2023-06-25 21:12:06,713 DEBUG protocol 11284 18868 > PONG '' [0 bytes]
2023-06-25 21:12:11,713 DEBUG protocol 11284 18868 < PING '' [0 bytes]
2023-06-25 21:12:11,713 DEBUG protocol 11284 18868 > PONG '' [0 bytes]
2023-06-25 21:12:16,713 DEBUG protocol 11284 18868 < PING '' [0 bytes]
2023-06-25 21:12:16,713 DEBUG protocol 11284 18868 > PONG '' [0 bytes]
2023-06-25 21:12:21,712 DEBUG protocol 11284 18868 < PING '' [0 bytes]
2023-06-25 21:12:21,712 DEBUG protocol 11284 18868 > PONG '' [0 bytes]
2023-06-25 21:12:21,712 DEBUG protocol 11284 18868 % sending keepalive ping
2023-06-25 21:12:21,712 DEBUG protocol 11284 18868 > PING 3e 85 7c e8 [binary, 4 bytes]
2023-06-25 21:12:21,915 DEBUG protocol 11284 18868 < PONG 3e 85 7c e8 [binary, 4 bytes]
2023-06-25 21:12:21,916 DEBUG protocol 11284 18868 % received keepalive pong
2023-06-25 21:12:25,744 INFO autoreload 11284 5224 C:\Users\Evert\Desktop\Django\monreal\trading\data_feed.py changed, reloading.
2023-06-25 21:12:26,712 DEBUG protocol 11284 18868 < PING '' [0 bytes]
2023-06-25 21:12:26,712 DEBUG protocol 11284 18868 > PONG '' [0 bytes]
2023-06-25 21:13:11,716 INFO autoreload 22216 19312 Watching for file changes with StatReloader
2023-06-25 21:13:11,952 DEBUG proactor_events 22216 12732 Using proactor: IocpProactor
2023-06-25 21:13:11,954 DEBUG __init__ 22216 12732 connect: wss://socket.polygon.io/crypto
2023-06-25 21:13:12,117 DEBUG protocol 22216 12732 = connection is CONNECTING
2023-06-25 21:13:12,220 DEBUG client 22216 12732 > GET /crypto HTTP/1.1
2023-06-25 21:13:12,220 DEBUG client 22216 12732 > Host: socket.polygon.io
2023-06-25 21:13:12,220 DEBUG client 22216 12732 > Upgrade: websocket
2023-06-25 21:13:12,220 DEBUG client 22216 12732 > Connection: Upgrade
2023-06-25 21:13:12,220 DEBUG client 22216 12732 > Sec-WebSocket-Key: 5F6o4TODCedHvPIIiyfLNw==
2023-06-25 21:13:12,220 DEBUG client 22216 12732 > Sec-WebSocket-Version: 13
2023-06-25 21:13:12,220 DEBUG client 22216 12732 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:13:12,220 DEBUG client 22216 12732 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:13:12,415 DEBUG client 22216 12732 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:13:12,416 DEBUG client 22216 12732 < Server: nginx/1.19.2
2023-06-25 21:13:12,416 DEBUG client 22216 12732 < Date: Sun, 25 Jun 2023 18:13:12 GMT
2023-06-25 21:13:12,416 DEBUG client 22216 12732 < Connection: upgrade
2023-06-25 21:13:12,416 DEBUG client 22216 12732 < Upgrade: websocket
2023-06-25 21:13:12,416 DEBUG client 22216 12732 < Sec-WebSocket-Accept: F0aGt0UmgVfPeqHAvSJ/r9T6810=
2023-06-25 21:13:12,416 DEBUG client 22216 12732 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:13:12,416 DEBUG protocol 22216 12732 = connection is OPEN
2023-06-25 21:13:12,416 DEBUG protocol 22216 12732 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:13:12,417 DEBUG __init__ 22216 12732 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:13:12,417 DEBUG __init__ 22216 12732 authing...
2023-06-25 21:13:12,417 DEBUG protocol 22216 12732 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:13:12,518 DEBUG protocol 22216 12732 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:13:12,518 DEBUG __init__ 22216 12732 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:13:12,518 DEBUG __init__ 22216 12732 reconciling: set() {'XT.BTC-USD'}
2023-06-25 21:13:12,519 DEBUG __init__ 22216 12732 subbing: XT.BTC-USD
2023-06-25 21:13:12,519 DEBUG protocol 22216 12732 > TEXT '{"action": "subscribe", "params": "XT.BTC-USD"}' [47 bytes]
2023-06-25 21:13:12,617 DEBUG protocol 22216 12732 < TEXT '[{"ev":"status","status":"success","message":"s...ribed to: XT.BTC-USD"}]' [74 bytes]
2023-06-25 21:13:12,617 DEBUG __init__ 22216 12732 status: subscribed to: XT.BTC-USD
2023-06-25 21:13:12,792 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30364.2,"t":16...":1,"r":1687716793117}]' [123 bytes]
2023-06-25 21:13:12,824 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30366,"t":1687...":6,"r":1687716793150}]' [121 bytes]
2023-06-25 21:13:12,829 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30364.19,"t":1...":1,"r":1687716793155}]' [121 bytes]
2023-06-25 21:13:12,834 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30367,"t":1687...":6,"r":1687716793159}]' [121 bytes]
2023-06-25 21:13:13,046 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30363.39,"t":1...":1,"r":1687716793372}]' [124 bytes]
2023-06-25 21:13:13,112 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30363.39,"t":1...":1,"r":1687716793438}]' [120 bytes]
2023-06-25 21:13:13,148 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30362.24,"t":1...":1,"r":1687716793475}]' [124 bytes]
2023-06-25 21:13:13,213 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30363.39,"t":1...":1,"r":1687716793539}]' [120 bytes]
2023-06-25 21:13:13,456 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30364.19,"t":1...":1,"r":1687716793782}]' [118 bytes]
2023-06-25 21:13:13,491 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30366.02,"t":1...":1,"r":1687716793816}]' [119 bytes]
2023-06-25 21:13:13,777 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30369.13,"t":1...":1,"r":1687716794103}]' [118 bytes]
2023-06-25 21:13:13,777 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30369.12,"t":1...":1,"r":1687716794103}]' [118 bytes]
2023-06-25 21:13:14,166 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30366.89,"t":1...":1,"r":1687716794492}]' [124 bytes]
2023-06-25 21:13:14,272 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30368.66,"t":1...":1,"r":1687716794597}]' [123 bytes]
2023-06-25 21:13:16,134 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30365.45,"t":1...":1,"r":1687716796460}]' [123 bytes]
2023-06-25 21:13:16,407 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30366.22,"t":1...":1,"r":1687716796732}]' [124 bytes]
2023-06-25 21:13:16,485 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30365.45,"t":1...":1,"r":1687716796812}]' [124 bytes]
2023-06-25 21:13:16,559 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30365.35,"t":1...":1,"r":1687716796885}]' [121 bytes]
2023-06-25 21:13:16,714 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30365.36,"t":1...":1,"r":1687716797040}]' [124 bytes]
2023-06-25 21:13:16,742 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30365.36,"t":1...":1,"r":1687716797068}]' [124 bytes]
2023-06-25 21:13:17,213 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390,"t":1687...":2,"r":1687716797539}]' [117 bytes]
2023-06-25 21:13:17,261 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390,"t":1687...":2,"r":1687716797588}]' [117 bytes]
2023-06-25 21:13:17,415 DEBUG protocol 22216 12732 < PING '' [0 bytes]
2023-06-25 21:13:17,415 DEBUG protocol 22216 12732 > PONG '' [0 bytes]
2023-06-25 21:13:18,438 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30365.36,"t":1...":1,"r":1687716798763}]' [124 bytes]
2023-06-25 21:13:19,032 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30365.35,"t":1...":1,"r":1687716799358}]' [122 bytes]
2023-06-25 21:13:19,032 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30365.35,"t":1...":1,"r":1687716799358}]' [124 bytes]
2023-06-25 21:13:19,126 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30365.05,"t":1...":1,"r":1687716799452}]' [124 bytes]
2023-06-25 21:13:19,603 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30352,"t":1687...:23,"r":1687716799929}]' [143 bytes]
2023-06-25 21:13:19,869 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30391,"t":1687...":2,"r":1687716800196}]' [116 bytes]
2023-06-25 21:13:19,948 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30391,"t":1687...":2,"r":1687716800275}]' [116 bytes]
2023-06-25 21:13:19,965 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30364.95,"t":1...":1,"r":1687716800290}]' [124 bytes]
2023-06-25 21:13:19,976 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30364.95,"t":1...":1,"r":1687716800302}]' [242 bytes]
2023-06-25 21:13:20,554 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30362.62,"t":1...":1,"r":1687716800879}]' [123 bytes]
2023-06-25 21:13:20,588 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30362.62,"t":1...":1,"r":1687716800914}]' [124 bytes]
2023-06-25 21:13:20,940 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30352.1,"t":16...:23,"r":1687716801266}]' [151 bytes]
2023-06-25 21:13:21,319 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30363.83,"t":1...":1,"r":1687716801645}]' [118 bytes]
2023-06-25 21:13:21,320 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30363.83,"t":1...":1,"r":1687716801645}]' [368 bytes]
2023-06-25 21:13:21,405 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30364.54,"t":1...":1,"r":1687716801732}]' [121 bytes]
2023-06-25 21:13:21,417 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30365.19,"t":1...":1,"r":1687716801744}]' [124 bytes]
2023-06-25 21:13:22,104 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30367.21,"t":1...":1,"r":1687716802430}]' [124 bytes]
2023-06-25 21:13:22,206 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30367.22,"t":1...":1,"r":1687716802531}]' [124 bytes]
2023-06-25 21:13:22,206 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30367.23,"t":1...":1,"r":1687716802531}]' [362 bytes]
2023-06-25 21:13:22,415 DEBUG protocol 22216 12732 < PING '' [0 bytes]
2023-06-25 21:13:22,415 DEBUG protocol 22216 12732 > PONG '' [0 bytes]
2023-06-25 21:13:22,578 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30365.58,"t":1...":1,"r":1687716802904}]' [124 bytes]
2023-06-25 21:13:22,661 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30367.31,"t":1...":1,"r":1687716802984}]' [123 bytes]
2023-06-25 21:13:24,095 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30370.73,"t":1...":1,"r":1687716804422}]' [121 bytes]
2023-06-25 21:13:24,416 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30367.54,"t":1...":1,"r":1687716804742}]' [124 bytes]
2023-06-25 21:13:24,713 DEBUG protocol 22216 12732 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390,"t":1687...":2,"r":1687716805039}]' [120 bytes]
2023-06-25 21:14:40,388 INFO autoreload 19360 16408 Watching for file changes with StatReloader
2023-06-25 21:14:40,616 DEBUG proactor_events 19360 9324 Using proactor: IocpProactor
2023-06-25 21:14:40,619 DEBUG __init__ 19360 9324 connect: wss://socket.polygon.io/crypto
2023-06-25 21:14:40,787 DEBUG protocol 19360 9324 = connection is CONNECTING
2023-06-25 21:14:40,894 DEBUG client 19360 9324 > GET /crypto HTTP/1.1
2023-06-25 21:14:40,894 DEBUG client 19360 9324 > Host: socket.polygon.io
2023-06-25 21:14:40,894 DEBUG client 19360 9324 > Upgrade: websocket
2023-06-25 21:14:40,894 DEBUG client 19360 9324 > Connection: Upgrade
2023-06-25 21:14:40,894 DEBUG client 19360 9324 > Sec-WebSocket-Key: VFNGPTZn0ZvK1Ad/svBFSg==
2023-06-25 21:14:40,894 DEBUG client 19360 9324 > Sec-WebSocket-Version: 13
2023-06-25 21:14:40,894 DEBUG client 19360 9324 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:14:40,894 DEBUG client 19360 9324 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:14:41,097 DEBUG client 19360 9324 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:14:41,097 DEBUG client 19360 9324 < Server: nginx/1.19.2
2023-06-25 21:14:41,097 DEBUG client 19360 9324 < Date: Sun, 25 Jun 2023 18:14:41 GMT
2023-06-25 21:14:41,097 DEBUG client 19360 9324 < Connection: upgrade
2023-06-25 21:14:41,097 DEBUG client 19360 9324 < Upgrade: websocket
2023-06-25 21:14:41,097 DEBUG client 19360 9324 < Sec-WebSocket-Accept: lGL8qHGBWxcqjuWZSzOFpn7XWOg=
2023-06-25 21:14:41,097 DEBUG client 19360 9324 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:14:41,097 DEBUG protocol 19360 9324 = connection is OPEN
2023-06-25 21:14:41,098 DEBUG protocol 19360 9324 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:14:41,098 DEBUG __init__ 19360 9324 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:14:41,098 DEBUG __init__ 19360 9324 authing...
2023-06-25 21:14:41,099 DEBUG protocol 19360 9324 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:14:41,203 DEBUG protocol 19360 9324 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:14:41,203 DEBUG __init__ 19360 9324 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:14:41,204 DEBUG __init__ 19360 9324 reconciling: set() {'XT.BTC-USD'}
2023-06-25 21:14:41,204 DEBUG __init__ 19360 9324 subbing: XT.BTC-USD
2023-06-25 21:14:41,204 DEBUG protocol 19360 9324 > TEXT '{"action": "subscribe", "params": "XT.BTC-USD"}' [47 bytes]
2023-06-25 21:14:41,307 DEBUG protocol 19360 9324 < TEXT '[{"ev":"status","status":"success","message":"s...ribed to: XT.BTC-USD"}]' [74 bytes]
2023-06-25 21:14:41,307 DEBUG __init__ 19360 9324 status: subscribed to: XT.BTC-USD
2023-06-25 21:14:41,357 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413,"t":1687...":2,"r":1687716881685}]' [117 bytes]
2023-06-25 21:14:41,358 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415,"t":1687...":2,"r":1687716881685}]' [117 bytes]
2023-06-25 21:14:41,383 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.19,"t":1...":1,"r":1687716881711}]' [122 bytes]
2023-06-25 21:14:41,385 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.65,"t":1...":1,"r":1687716881712}]' [362 bytes]
2023-06-25 21:14:41,410 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415,"t":1687...":2,"r":1687716881738}]' [117 bytes]
2023-06-25 21:14:41,411 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413,"t":1687...":2,"r":1687716881738}]' [117 bytes]
2023-06-25 21:14:41,413 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.72,"t":1...":1,"r":1687716881741}]' [124 bytes]
2023-06-25 21:14:42,066 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30368.2,"t":16...:23,"r":1687716882394}]' [298 bytes]
2023-06-25 21:14:42,251 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.59,"t":1...":1,"r":1687716882579}]' [124 bytes]
2023-06-25 21:14:42,294 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.59,"t":1...":1,"r":1687716882622}]' [124 bytes]
2023-06-25 21:14:42,295 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.63,"t":1...":1,"r":1687716882622}]' [124 bytes]
2023-06-25 21:14:42,382 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30368.2,"t":16...:23,"r":1687716882710}]' [151 bytes]
2023-06-25 21:14:42,382 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30368.6,"t":16...:23,"r":1687716882710}]' [148 bytes]
2023-06-25 21:14:42,813 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30380,"t":1687...:23,"r":1687716883141}]' [149 bytes]
2023-06-25 21:14:42,961 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30379.9,"t":16...:23,"r":1687716883289}]' [151 bytes]
2023-06-25 21:14:43,041 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.53,"t":1...":1,"r":1687716883369}]' [124 bytes]
2023-06-25 21:14:43,206 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.47,"t":1...":1,"r":1687716883534}]' [124 bytes]
2023-06-25 21:14:43,304 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30379.9,"t":16...:23,"r":1687716883633}]' [150 bytes]
2023-06-25 21:14:43,531 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.11,"t":1...":1,"r":1687716883859}]' [123 bytes]
2023-06-25 21:14:43,625 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30379.9,"t":16...:23,"r":1687716883952}]' [151 bytes]
2023-06-25 21:14:43,921 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30379.9,"t":16...:23,"r":1687716884249}]' [151 bytes]
2023-06-25 21:14:43,922 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30379.9,"t":16...:23,"r":1687716884249}]' [301 bytes]
2023-06-25 21:14:44,222 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30379.9,"t":16...:23,"r":1687716884550}]' [151 bytes]
2023-06-25 21:14:44,951 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30379.9,"t":16...:23,"r":1687716885280}]' [151 bytes]
2023-06-25 21:14:46,097 DEBUG protocol 19360 9324 < PING '' [0 bytes]
2023-06-25 21:14:46,097 DEBUG protocol 19360 9324 > PONG '' [0 bytes]
2023-06-25 21:14:46,130 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.23,"t":1...":1,"r":1687716886459}]' [122 bytes]
2023-06-25 21:14:46,130 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.24,"t":1...":1,"r":1687716886459}]' [124 bytes]
2023-06-25 21:14:46,375 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.47,"t":1...":1,"r":1687716886703}]' [122 bytes]
2023-06-25 21:14:46,376 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.59,"t":1...":1,"r":1687716886703}]' [124 bytes]
2023-06-25 21:14:46,397 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.59,"t":1...":1,"r":1687716886726}]' [124 bytes]
2023-06-25 21:14:46,427 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400,"t":1687...":6,"r":1687716886756}]' [121 bytes]
2023-06-25 21:14:46,430 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.59,"t":1...":1,"r":1687716886759}]' [121 bytes]
2023-06-25 21:14:47,141 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404,"t":1687...":6,"r":1687716887470}]' [121 bytes]
2023-06-25 21:14:47,397 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.85,"t":1...":1,"r":1687716887725}]' [124 bytes]
2023-06-25 21:14:47,397 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.19,"t":1...":1,"r":1687716887725}]' [124 bytes]
2023-06-25 21:14:47,494 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.19,"t":1...":1,"r":1687716887822}]' [124 bytes]
2023-06-25 21:14:47,500 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30380,"t":1687...:23,"r":1687716887829}]' [147 bytes]
2023-06-25 21:14:47,524 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30419,"t":1687...":2,"r":1687716887853}]' [116 bytes]
2023-06-25 21:14:47,581 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30419,"t":1687...":2,"r":1687716887910}]' [116 bytes]
2023-06-25 21:14:47,831 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.18,"t":1...":1,"r":1687716888159}]' [118 bytes]
2023-06-25 21:14:47,831 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.18,"t":1...":1,"r":1687716888159}]' [241 bytes]
2023-06-25 21:14:47,972 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.18,"t":1...":1,"r":1687716888300}]' [244 bytes]
2023-06-25 21:14:48,097 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418,"t":1687...":2,"r":1687716888425}]' [117 bytes]
2023-06-25 21:14:48,151 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418,"t":1687...":2,"r":1687716888470}]' [117 bytes]
2023-06-25 21:14:48,885 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.14,"t":1...":1,"r":1687716889212}]' [123 bytes]
2023-06-25 21:14:49,525 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30380.4,"t":16...:23,"r":1687716889854}]' [149 bytes]
2023-06-25 21:14:49,590 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30380.8,"t":16...:23,"r":1687716889919}]' [149 bytes]
2023-06-25 21:14:51,098 DEBUG protocol 19360 9324 < PING '' [0 bytes]
2023-06-25 21:14:51,098 DEBUG protocol 19360 9324 > PONG '' [0 bytes]
2023-06-25 21:14:51,203 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.34,"t":1...":1,"r":1687716891531}]' [118 bytes]
2023-06-25 21:14:51,204 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.33,"t":1...":1,"r":1687716891531}]' [247 bytes]
2023-06-25 21:14:51,275 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.46,"t":1...":1,"r":1687716891603}]' [124 bytes]
2023-06-25 21:14:52,178 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.04,"t":1...":1,"r":1687716892507}]' [124 bytes]
2023-06-25 21:14:52,315 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.2,"t":16...:23,"r":1687716892644}]' [297 bytes]
2023-06-25 21:14:52,671 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421,"t":1687...":2,"r":1687716893001}]' [117 bytes]
2023-06-25 21:14:52,744 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421,"t":1687...":2,"r":1687716893073}]' [117 bytes]
2023-06-25 21:14:53,768 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.07,"t":1...":1,"r":1687716894097}]' [122 bytes]
2023-06-25 21:14:54,400 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.08,"t":1...":1,"r":1687716894728}]' [121 bytes]
2023-06-25 21:14:54,400 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.08,"t":1...":1,"r":1687716894729}]' [122 bytes]
2023-06-25 21:14:54,401 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.07,"t":1...":1,"r":1687716894729}]' [124 bytes]
2023-06-25 21:14:54,436 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.42,"t":1...":1,"r":1687716894764}]' [124 bytes]
2023-06-25 21:14:54,437 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.41,"t":1...":1,"r":1687716894764}]' [246 bytes]
2023-06-25 21:14:54,602 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.43,"t":1...":1,"r":1687716894931}]' [124 bytes]
2023-06-25 21:14:55,944 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.86,"t":1...":1,"r":1687716896273}]' [124 bytes]
2023-06-25 21:14:55,948 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.86,"t":1...":1,"r":1687716896277}]' [124 bytes]
2023-06-25 21:14:56,096 DEBUG protocol 19360 9324 < PING '' [0 bytes]
2023-06-25 21:14:56,096 DEBUG protocol 19360 9324 > PONG '' [0 bytes]
2023-06-25 21:14:56,269 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.42,"t":1...":1,"r":1687716896598}]' [123 bytes]
2023-06-25 21:14:57,235 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.49,"t":1...":1,"r":1687716897563}]' [123 bytes]
2023-06-25 21:14:57,248 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.73,"t":1...":1,"r":1687716897576}]' [123 bytes]
2023-06-25 21:14:57,807 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.79,"t":1...":1,"r":1687716898135}]' [124 bytes]
2023-06-25 21:14:57,807 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.78,"t":1...":1,"r":1687716898135}]' [484 bytes]
2023-06-25 21:14:59,170 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.41,"t":1...":1,"r":1687716899498}]' [124 bytes]
2023-06-25 21:14:59,408 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.87,"t":1...":1,"r":1687716899737}]' [118 bytes]
2023-06-25 21:14:59,409 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.13,"t":1...":1,"r":1687716899737}]' [724 bytes]
2023-06-25 21:14:59,445 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.97,"t":1...":1,"r":1687716899774}]' [123 bytes]
2023-06-25 21:15:00,521 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30422,"t":1687...":2,"r":1687716900850}]' [243 bytes]
2023-06-25 21:15:00,530 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30420,"t":1687...":2,"r":1687716900860}]' [122 bytes]
2023-06-25 21:15:00,549 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.8,"t":16...:23,"r":1687716900878}]' [148 bytes]
2023-06-25 21:15:00,579 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30420,"t":1687...":2,"r":1687716900908}]' [122 bytes]
2023-06-25 21:15:00,591 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30422,"t":1687...":2,"r":1687716900921}]' [122 bytes]
2023-06-25 21:15:00,592 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30422,"t":1687...":2,"r":1687716900921}]' [122 bytes]
2023-06-25 21:15:00,641 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.53,"t":1...":1,"r":1687716900970}]' [124 bytes]
2023-06-25 21:15:00,735 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.55,"t":1...":1,"r":1687716901062}]' [122 bytes]
2023-06-25 21:15:00,735 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.55,"t":1...":1,"r":1687716901062}]' [124 bytes]
2023-06-25 21:15:00,844 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.03,"t":1...":1,"r":1687716901173}]' [120 bytes]
2023-06-25 21:15:01,096 DEBUG protocol 19360 9324 < PING '' [0 bytes]
2023-06-25 21:15:01,096 DEBUG protocol 19360 9324 > PONG '' [0 bytes]
2023-06-25 21:15:01,096 DEBUG protocol 19360 9324 % sending keepalive ping
2023-06-25 21:15:01,097 DEBUG protocol 19360 9324 > PING 'y\x8fp' [text, 4 bytes]
2023-06-25 21:15:01,302 DEBUG protocol 19360 9324 < PONG 'y\x8fp' [text, 4 bytes]
2023-06-25 21:15:01,303 DEBUG protocol 19360 9324 % received keepalive pong
2023-06-25 21:15:01,805 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.9,"t":16...":1,"r":1687716902134}]' [122 bytes]
2023-06-25 21:15:02,081 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.8,"t":16...:23,"r":1687716902409}]' [150 bytes]
2023-06-25 21:15:02,081 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.9,"t":16...:23,"r":1687716902409}]' [151 bytes]
2023-06-25 21:15:02,671 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.93,"t":1...":1,"r":1687716903000}]' [123 bytes]
2023-06-25 21:15:02,691 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.92,"t":1...":1,"r":1687716903020}]' [124 bytes]
2023-06-25 21:15:02,801 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.91,"t":1...":1,"r":1687716903129}]' [118 bytes]
2023-06-25 21:15:02,801 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.92,"t":1...":1,"r":1687716903129}]' [362 bytes]
2023-06-25 21:15:02,821 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.3,"t":16...:23,"r":1687716903150}]' [151 bytes]
2023-06-25 21:15:03,082 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.5,"t":16...":1,"r":1687716903411}]' [123 bytes]
2023-06-25 21:15:04,327 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.07,"t":1...":1,"r":1687716904655}]' [124 bytes]
2023-06-25 21:15:05,123 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.27,"t":1...":1,"r":1687716905452}]' [124 bytes]
2023-06-25 21:15:05,133 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408,"t":1687...":6,"r":1687716905462}]' [116 bytes]
2023-06-25 21:15:05,150 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408,"t":1687...":6,"r":1687716905479}]' [121 bytes]
2023-06-25 21:15:05,153 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408,"t":1687...":6,"r":1687716905482}]' [121 bytes]
2023-06-25 21:15:05,722 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.78,"t":1...":1,"r":1687716906050}]' [123 bytes]
2023-06-25 21:15:05,745 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.78,"t":1...":1,"r":1687716906074}]' [122 bytes]
2023-06-25 21:15:05,805 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.34,"t":1...":1,"r":1687716906133}]' [118 bytes]
2023-06-25 21:15:05,805 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.33,"t":1...":1,"r":1687716906133}]' [124 bytes]
2023-06-25 21:15:05,889 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.3,"t":16...:23,"r":1687716906218}]' [151 bytes]
2023-06-25 21:15:06,096 DEBUG protocol 19360 9324 < PING '' [0 bytes]
2023-06-25 21:15:06,096 DEBUG protocol 19360 9324 > PONG '' [0 bytes]
2023-06-25 21:15:06,306 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.4,"t":16...":1,"r":1687716906635}]' [119 bytes]
2023-06-25 21:15:06,313 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.4,"t":16...":1,"r":1687716906641}]' [121 bytes]
2023-06-25 21:15:06,928 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.42,"t":1...":1,"r":1687716907257}]' [124 bytes]
2023-06-25 21:15:07,366 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.52,"t":1...":1,"r":1687716907693}]' [121 bytes]
2023-06-25 21:15:07,410 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.52,"t":1...":1,"r":1687716907738}]' [122 bytes]
2023-06-25 21:15:08,031 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.37,"t":1...":1,"r":1687716908360}]' [124 bytes]
2023-06-25 21:15:08,276 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.03,"t":1...":1,"r":1687716908604}]' [124 bytes]
2023-06-25 21:15:08,602 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.55,"t":1...":1,"r":1687716908931}]' [124 bytes]
2023-06-25 21:15:08,602 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.55,"t":1...":1,"r":1687716908931}]' [363 bytes]
2023-06-25 21:15:08,604 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.83,"t":1...":1,"r":1687716908931}]' [241 bytes]
2023-06-25 21:15:10,042 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414,"t":1687...":2,"r":1687716910371}]' [117 bytes]
2023-06-25 21:15:10,101 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414,"t":1687...":2,"r":1687716910431}]' [117 bytes]
2023-06-25 21:15:10,394 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.59,"t":1...":1,"r":1687716910721}]' [124 bytes]
2023-06-25 21:15:10,550 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.8,"t":16...":1,"r":1687716910878}]' [123 bytes]
2023-06-25 21:15:10,650 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.71,"t":1...":1,"r":1687716910978}]' [124 bytes]
2023-06-25 21:15:11,097 DEBUG protocol 19360 9324 < PING '' [0 bytes]
2023-06-25 21:15:11,097 DEBUG protocol 19360 9324 > PONG '' [0 bytes]
2023-06-25 21:15:11,718 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.56,"t":1...":1,"r":1687716912047}]' [123 bytes]
2023-06-25 21:15:11,741 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.44,"t":1...":1,"r":1687716912071}]' [119 bytes]
2023-06-25 21:15:11,742 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.44,"t":1...":1,"r":1687716912071}]' [366 bytes]
2023-06-25 21:15:12,019 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.54,"t":1...":1,"r":1687716912345}]' [124 bytes]
2023-06-25 21:15:12,231 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.53,"t":1...":1,"r":1687716912558}]' [123 bytes]
2023-06-25 21:15:12,420 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.54,"t":1...":1,"r":1687716912749}]' [124 bytes]
2023-06-25 21:15:12,566 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30397,"t":1687...":6,"r":1687716912895}]' [120 bytes]
2023-06-25 21:15:12,738 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.46,"t":1...":1,"r":1687716913067}]' [124 bytes]
2023-06-25 21:15:12,950 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.43,"t":1...":1,"r":1687716913278}]' [124 bytes]
2023-06-25 21:15:13,258 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413,"t":1687...":2,"r":1687716913489}]' [117 bytes]
2023-06-25 21:15:13,259 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413,"t":1687...":2,"r":1687716913489}]' [117 bytes]
2023-06-25 21:15:13,262 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413,"t":1687...":2,"r":1687716913560}]' [233 bytes]
2023-06-25 21:15:13,439 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30384.9,"t":16...:23,"r":1687716913767}]' [147 bytes]
2023-06-25 21:15:13,494 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30397.34,"t":1...":1,"r":1687716913822}]' [118 bytes]
2023-06-25 21:15:13,494 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30397.35,"t":1...":1,"r":1687716913823}]' [847 bytes]
2023-06-25 21:15:13,495 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.24,"t":1...":1,"r":1687716913824}]' [241 bytes]
2023-06-25 21:15:13,496 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.38,"t":1...":1,"r":1687716913824}]' [601 bytes]
2023-06-25 21:15:13,496 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.01,"t":1...":1,"r":1687716913825}]' [124 bytes]
2023-06-25 21:15:13,496 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.06,"t":1...":1,"r":1687716913825}]' [118 bytes]
2023-06-25 21:15:13,496 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.09,"t":1...":1,"r":1687716913825}]' [124 bytes]
2023-06-25 21:15:14,276 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.79,"t":1...":1,"r":1687716914605}]' [124 bytes]
2023-06-25 21:15:14,277 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.86,"t":1...":1,"r":1687716914605}]' [360 bytes]
2023-06-25 21:15:14,280 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.68,"t":1...":1,"r":1687716914609}]' [122 bytes]
2023-06-25 21:15:14,306 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.16,"t":1...":1,"r":1687716914634}]' [124 bytes]
2023-06-25 21:15:14,332 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.89,"t":1...":1,"r":1687716914661}]' [124 bytes]
2023-06-25 21:15:14,333 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.94,"t":1...":1,"r":1687716914661}]' [123 bytes]
2023-06-25 21:15:14,836 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.8,"t":16...":1,"r":1687716915165}]' [122 bytes]
2023-06-25 21:15:15,008 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.88,"t":1...":1,"r":1687716915335}]' [123 bytes]
2023-06-25 21:15:16,096 DEBUG protocol 19360 9324 < PING '' [0 bytes]
2023-06-25 21:15:16,096 DEBUG protocol 19360 9324 > PONG '' [0 bytes]
2023-06-25 21:15:16,663 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.12,"t":1...":1,"r":1687716916992}]' [123 bytes]
2023-06-25 21:15:16,703 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.12,"t":1...":1,"r":1687716917030}]' [124 bytes]
2023-06-25 21:15:17,228 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.93,"t":1...":1,"r":1687716917558}]' [123 bytes]
2023-06-25 21:15:17,357 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.93,"t":1...":1,"r":1687716917686}]' [121 bytes]
2023-06-25 21:15:17,492 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.93,"t":1...":1,"r":1687716917821}]' [122 bytes]
2023-06-25 21:15:17,493 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.7,"t":16...":1,"r":1687716917821}]' [121 bytes]
2023-06-25 21:15:17,677 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30384.9,"t":16...:23,"r":1687716918006}]' [151 bytes]
2023-06-25 21:15:17,960 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.04,"t":1...":1,"r":1687716918288}]' [122 bytes]
2023-06-25 21:15:17,966 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.03,"t":1...":1,"r":1687716918288}]' [840 bytes]
2023-06-25 21:15:17,966 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.95,"t":1...":1,"r":1687716918292}]' [122 bytes]
2023-06-25 21:15:17,966 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.92,"t":1...":1,"r":1687716918292}]' [245 bytes]
2023-06-25 21:15:18,082 DEBUG proactor_events 10492 10800 Using proactor: IocpProactor
2023-06-25 21:15:18,085 DEBUG __init__ 10492 10800 connect: wss://socket.polygon.io/crypto
2023-06-25 21:15:18,103 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.53,"t":1...":1,"r":1687716918432}]' [124 bytes]
2023-06-25 21:15:18,107 DEBUG functional 10492 16468 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-25 21:15:18,108 DEBUG functional 10492 16468 
def backend_cleanup():
    return 1

2023-06-25 21:15:18,108 DEBUG functional 10492 16468 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-25 21:15:18,109 DEBUG functional 10492 16468 
def xmap(task, it):
    return 1

2023-06-25 21:15:18,109 DEBUG functional 10492 16468 
def chain(*args, **kwargs):
    return 1

2023-06-25 21:15:18,109 DEBUG functional 10492 16468 
def debug_task(self):
    return 1

2023-06-25 21:15:18,110 DEBUG functional 10492 16468 
def xstarmap(task, it):
    return 1

2023-06-25 21:15:18,110 DEBUG functional 10492 16468 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-25 21:15:18,110 DEBUG functional 10492 16468 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-25 21:15:18,111 DEBUG functional 10492 16468 
def chunks(task, it, n):
    return 1

2023-06-25 21:15:18,111 DEBUG functional 10492 16468 
def get_current_buy_price(symbol):
    return 1

2023-06-25 21:15:18,134 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.53,"t":1...":1,"r":1687716918463}]' [124 bytes]
2023-06-25 21:15:18,135 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.4,"t":16...":1,"r":1687716918463}]' [243 bytes]
2023-06-25 21:15:18,869 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.46,"t":1...":1,"r":1687716919197}]' [124 bytes]
2023-06-25 21:15:19,793 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.49,"t":1...":1,"r":1687716920121}]' [122 bytes]
2023-06-25 21:15:20,034 DEBUG proactor_events 6328 13280 Using proactor: IocpProactor
2023-06-25 21:15:20,036 DEBUG proactor_events 22164 14224 Using proactor: IocpProactor
2023-06-25 21:15:20,037 DEBUG __init__ 6328 13280 connect: wss://socket.polygon.io/crypto
2023-06-25 21:15:20,039 DEBUG __init__ 22164 14224 connect: wss://socket.polygon.io/crypto
2023-06-25 21:15:20,098 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.91,"t":1...":1,"r":1687716920427}]' [124 bytes]
2023-06-25 21:15:20,547 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.45,"t":1...":1,"r":1687716920875}]' [124 bytes]
2023-06-25 21:15:21,096 DEBUG protocol 19360 9324 < PING '' [0 bytes]
2023-06-25 21:15:21,097 DEBUG protocol 19360 9324 > PONG '' [0 bytes]
2023-06-25 21:15:21,244 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.45,"t":1...":1,"r":1687716921572}]' [124 bytes]
2023-06-25 21:15:21,308 DEBUG protocol 19360 9324 % sending keepalive ping
2023-06-25 21:15:21,308 DEBUG protocol 19360 9324 > PING c0 b9 e3 9b [binary, 4 bytes]
2023-06-25 21:15:21,410 DEBUG protocol 19360 9324 < PONG c0 b9 e3 9b [binary, 4 bytes]
2023-06-25 21:15:21,410 DEBUG protocol 19360 9324 % received keepalive pong
2023-06-25 21:15:21,782 DEBUG proactor_events 3276 16068 Using proactor: IocpProactor
2023-06-25 21:15:21,785 DEBUG __init__ 3276 16068 connect: wss://socket.polygon.io/crypto
2023-06-25 21:15:22,175 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30384.8,"t":16...:23,"r":1687716922504}]' [149 bytes]
2023-06-25 21:15:22,467 DEBUG protocol 19360 9324 < TEXT '[{"ev":"status","status":"max_connections","mes...onnections exceeded."}]' [96 bytes]
2023-06-25 21:15:22,467 DEBUG protocol 19360 9324 < CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:15:22,468 DEBUG protocol 19360 9324 = connection is CLOSING
2023-06-25 21:15:22,468 DEBUG protocol 19360 9324 > CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:15:22,468 DEBUG protocol 19360 9324 = connection is CLOSED
2023-06-25 21:15:22,468 DEBUG __init__ 19360 9324 status: Maximum number of connections exceeded.
2023-06-25 21:15:22,469 DEBUG protocol 19360 9324 x closing TCP connection
2023-06-25 21:15:22,469 DEBUG __init__ 19360 9324 connection closed (ERR): received 1008 (policy violation); then sent 1008 (policy violation)
2023-06-25 21:15:22,574 DEBUG protocol 19360 9324 = connection is CONNECTING
2023-06-25 21:15:22,681 DEBUG client 19360 9324 > GET /crypto HTTP/1.1
2023-06-25 21:15:22,681 DEBUG client 19360 9324 > Host: socket.polygon.io
2023-06-25 21:15:22,681 DEBUG client 19360 9324 > Upgrade: websocket
2023-06-25 21:15:22,681 DEBUG client 19360 9324 > Connection: Upgrade
2023-06-25 21:15:22,681 DEBUG client 19360 9324 > Sec-WebSocket-Key: 3xxUUdXStqGb3KNvXfU6Ww==
2023-06-25 21:15:22,681 DEBUG client 19360 9324 > Sec-WebSocket-Version: 13
2023-06-25 21:15:22,681 DEBUG client 19360 9324 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:15:22,681 DEBUG client 19360 9324 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:15:22,886 DEBUG client 19360 9324 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:15:22,886 DEBUG client 19360 9324 < Server: nginx/1.19.2
2023-06-25 21:15:22,886 DEBUG client 19360 9324 < Date: Sun, 25 Jun 2023 18:15:23 GMT
2023-06-25 21:15:22,886 DEBUG client 19360 9324 < Connection: upgrade
2023-06-25 21:15:22,886 DEBUG client 19360 9324 < Upgrade: websocket
2023-06-25 21:15:22,886 DEBUG client 19360 9324 < Sec-WebSocket-Accept: btdNHu6IKDcw+HoqSUe2UJ332VI=
2023-06-25 21:15:22,886 DEBUG client 19360 9324 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:15:22,886 DEBUG protocol 19360 9324 = connection is OPEN
2023-06-25 21:15:22,887 DEBUG protocol 19360 9324 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:15:22,887 DEBUG __init__ 19360 9324 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:15:22,887 DEBUG __init__ 19360 9324 authing...
2023-06-25 21:15:22,888 DEBUG protocol 19360 9324 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:15:22,990 DEBUG protocol 19360 9324 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:15:22,990 DEBUG __init__ 19360 9324 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:15:22,990 DEBUG __init__ 19360 9324 reconciling: set() {'XT.BTC-USD'}
2023-06-25 21:15:22,990 DEBUG __init__ 19360 9324 subbing: XT.BTC-USD
2023-06-25 21:15:22,991 DEBUG protocol 19360 9324 > TEXT '{"action": "subscribe", "params": "XT.BTC-USD"}' [47 bytes]
2023-06-25 21:15:23,094 DEBUG protocol 19360 9324 < TEXT '[{"ev":"status","status":"success","message":"s...ribed to: XT.BTC-USD"}]' [74 bytes]
2023-06-25 21:15:23,094 DEBUG __init__ 19360 9324 status: subscribed to: XT.BTC-USD
2023-06-25 21:15:23,245 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.1,"t":16...:23,"r":1687716923575}]' [146 bytes]
2023-06-25 21:15:23,416 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.54,"t":1...":1,"r":1687716923745}]' [124 bytes]
2023-06-25 21:15:23,430 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.53,"t":1...":1,"r":1687716923759}]' [122 bytes]
2023-06-25 21:15:24,808 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.45,"t":1...":1,"r":1687716925137}]' [118 bytes]
2023-06-25 21:15:24,809 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.45,"t":1...":1,"r":1687716925137}]' [119 bytes]
2023-06-25 21:15:24,853 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.74,"t":1...":1,"r":1687716925182}]' [124 bytes]
2023-06-25 21:15:24,853 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.73,"t":1...":1,"r":1687716925183}]' [124 bytes]
2023-06-25 21:15:24,870 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.73,"t":1...":1,"r":1687716925200}]' [124 bytes]
2023-06-25 21:15:25,133 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.08,"t":1...":1,"r":1687716925462}]' [124 bytes]
2023-06-25 21:15:27,497 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.94,"t":1...":1,"r":1687716927826}]' [124 bytes]
2023-06-25 21:15:27,872 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.11,"t":1...":1,"r":1687716928201}]' [122 bytes]
2023-06-25 21:15:27,872 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.06,"t":1...":1,"r":1687716928201}]' [486 bytes]
2023-06-25 21:15:27,873 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.12,"t":1...":1,"r":1687716928201}]' [364 bytes]
2023-06-25 21:15:27,873 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.9,"t":16...":1,"r":1687716928201}]' [123 bytes]
2023-06-25 21:15:27,873 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.87,"t":1...":1,"r":1687716928201}]' [118 bytes]
2023-06-25 21:15:27,873 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.52,"t":1...":1,"r":1687716928201}]' [124 bytes]
2023-06-25 21:15:27,873 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.49,"t":1...":1,"r":1687716928201}]' [982 bytes]
2023-06-25 21:15:27,873 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.12,"t":1...":1,"r":1687716928202}]' [120 bytes]
2023-06-25 21:15:27,875 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.12,"t":1...":1,"r":1687716928204}]' [121 bytes]
2023-06-25 21:15:27,876 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.12,"t":1...":1,"r":1687716928204}]' [243 bytes]
2023-06-25 21:15:27,886 DEBUG protocol 19360 9324 < PING '' [0 bytes]
2023-06-25 21:15:27,886 DEBUG protocol 19360 9324 > PONG '' [0 bytes]
2023-06-25 21:15:28,030 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.96,"t":1...":1,"r":1687716928359}]' [118 bytes]
2023-06-25 21:15:28,516 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.83,"t":1...":1,"r":1687716928845}]' [121 bytes]
2023-06-25 21:15:29,476 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410,"t":1687...":6,"r":1687716929805}]' [121 bytes]
2023-06-25 21:15:29,487 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.3,"t":16...":1,"r":1687716929817}]' [122 bytes]
2023-06-25 21:15:29,646 DEBUG protocol 19360 9324 < TEXT '[{"ev":"status","status":"max_connections","mes...onnections exceeded."}]' [96 bytes]
2023-06-25 21:15:29,646 DEBUG protocol 19360 9324 < CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:15:29,646 DEBUG protocol 19360 9324 = connection is CLOSING
2023-06-25 21:15:29,646 DEBUG protocol 19360 9324 > CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:15:29,646 DEBUG protocol 19360 9324 = connection is CLOSED
2023-06-25 21:15:29,647 DEBUG __init__ 19360 9324 status: Maximum number of connections exceeded.
2023-06-25 21:15:29,647 DEBUG protocol 19360 9324 x closing TCP connection
2023-06-25 21:15:29,647 DEBUG __init__ 19360 9324 connection closed (ERR): received 1008 (policy violation); then sent 1008 (policy violation)
2023-06-25 21:15:29,748 DEBUG protocol 19360 9324 = connection is CONNECTING
2023-06-25 21:15:29,849 DEBUG client 19360 9324 > GET /crypto HTTP/1.1
2023-06-25 21:15:29,850 DEBUG client 19360 9324 > Host: socket.polygon.io
2023-06-25 21:15:29,850 DEBUG client 19360 9324 > Upgrade: websocket
2023-06-25 21:15:29,850 DEBUG client 19360 9324 > Connection: Upgrade
2023-06-25 21:15:29,850 DEBUG client 19360 9324 > Sec-WebSocket-Key: CSkiP9rR6cW2/IogHfSupA==
2023-06-25 21:15:29,850 DEBUG client 19360 9324 > Sec-WebSocket-Version: 13
2023-06-25 21:15:29,850 DEBUG client 19360 9324 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:15:29,850 DEBUG client 19360 9324 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:15:30,050 DEBUG client 19360 9324 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:15:30,050 DEBUG client 19360 9324 < Server: nginx/1.19.2
2023-06-25 21:15:30,050 DEBUG client 19360 9324 < Date: Sun, 25 Jun 2023 18:15:30 GMT
2023-06-25 21:15:30,050 DEBUG client 19360 9324 < Connection: upgrade
2023-06-25 21:15:30,050 DEBUG client 19360 9324 < Upgrade: websocket
2023-06-25 21:15:30,050 DEBUG client 19360 9324 < Sec-WebSocket-Accept: wkmFKEfpl8bQyjFpQ3tWQwQXxN8=
2023-06-25 21:15:30,050 DEBUG client 19360 9324 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:15:30,051 DEBUG protocol 19360 9324 = connection is OPEN
2023-06-25 21:15:30,051 DEBUG protocol 19360 9324 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:15:30,051 DEBUG __init__ 19360 9324 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:15:30,051 DEBUG __init__ 19360 9324 authing...
2023-06-25 21:15:30,052 DEBUG protocol 19360 9324 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:15:30,150 DEBUG protocol 19360 9324 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:15:30,150 DEBUG __init__ 19360 9324 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:15:30,150 DEBUG __init__ 19360 9324 reconciling: set() {'XT.BTC-USD'}
2023-06-25 21:15:30,150 DEBUG __init__ 19360 9324 subbing: XT.BTC-USD
2023-06-25 21:15:30,151 DEBUG protocol 19360 9324 > TEXT '{"action": "subscribe", "params": "XT.BTC-USD"}' [47 bytes]
2023-06-25 21:15:30,249 DEBUG protocol 19360 9324 < TEXT '[{"ev":"status","status":"success","message":"s...ribed to: XT.BTC-USD"}]' [74 bytes]
2023-06-25 21:15:30,250 DEBUG __init__ 19360 9324 status: subscribed to: XT.BTC-USD
2023-06-25 21:15:30,495 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.62,"t":1...":1,"r":1687716930826}]' [124 bytes]
2023-06-25 21:15:30,564 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.14,"t":1...":1,"r":1687716930894}]' [124 bytes]
2023-06-25 21:15:30,890 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.36,"t":1...":1,"r":1687716931219}]' [123 bytes]
2023-06-25 21:15:31,216 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411,"t":1687...":6,"r":1687716931545}]' [121 bytes]
2023-06-25 21:15:31,229 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412,"t":1687...":6,"r":1687716931559}]' [120 bytes]
2023-06-25 21:15:31,231 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413,"t":1687...":6,"r":1687716931561}]' [121 bytes]
2023-06-25 21:15:31,284 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.18,"t":1...":1,"r":1687716931613}]' [121 bytes]
2023-06-25 21:15:31,344 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.23,"t":1...":1,"r":1687716931673}]' [121 bytes]
2023-06-25 21:15:31,494 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.37,"t":1...":1,"r":1687716931823}]' [121 bytes]
2023-06-25 21:15:31,743 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.13,"t":1...":1,"r":1687716932072}]' [124 bytes]
2023-06-25 21:15:31,751 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.13,"t":1...":1,"r":1687716932081}]' [124 bytes]
2023-06-25 21:15:31,766 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.13,"t":1...":1,"r":1687716932095}]' [124 bytes]
2023-06-25 21:15:32,095 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.94,"t":1...":1,"r":1687716932424}]' [124 bytes]
2023-06-25 21:15:32,177 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.22,"t":1...":1,"r":1687716932507}]' [124 bytes]
2023-06-25 21:15:32,194 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.79,"t":1...":1,"r":1687716932523}]' [124 bytes]
2023-06-25 21:15:32,200 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.79,"t":1...":1,"r":1687716932530}]' [124 bytes]
2023-06-25 21:15:32,222 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.79,"t":1...":1,"r":1687716932551}]' [124 bytes]
2023-06-25 21:15:32,232 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.79,"t":1...":1,"r":1687716932562}]' [124 bytes]
2023-06-25 21:15:32,244 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.22,"t":1...":1,"r":1687716932574}]' [124 bytes]
2023-06-25 21:15:32,253 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.22,"t":1...":1,"r":1687716932583}]' [124 bytes]
2023-06-25 21:15:32,254 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.22,"t":1...":1,"r":1687716932583}]' [124 bytes]
2023-06-25 21:15:32,271 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.22,"t":1...":1,"r":1687716932601}]' [124 bytes]
2023-06-25 21:15:32,310 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.2,"t":16...":1,"r":1687716932640}]' [123 bytes]
2023-06-25 21:15:32,316 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412,"t":1687...":6,"r":1687716932646}]' [121 bytes]
2023-06-25 21:15:32,326 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413,"t":1687...":6,"r":1687716932655}]' [121 bytes]
2023-06-25 21:15:32,360 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.2,"t":16...":1,"r":1687716932689}]' [123 bytes]
2023-06-25 21:15:32,360 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.22,"t":1...":1,"r":1687716932689}]' [724 bytes]
2023-06-25 21:15:32,377 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.34,"t":1...":1,"r":1687716932708}]' [124 bytes]
2023-06-25 21:15:32,388 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.35,"t":1...":1,"r":1687716932717}]' [124 bytes]
2023-06-25 21:15:32,398 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.42,"t":1...":1,"r":1687716932728}]' [124 bytes]
2023-06-25 21:15:32,410 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.43,"t":1...":1,"r":1687716932740}]' [124 bytes]
2023-06-25 21:15:32,411 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.42,"t":1...":1,"r":1687716932741}]' [124 bytes]
2023-06-25 21:15:32,422 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.42,"t":1...":1,"r":1687716932752}]' [121 bytes]
2023-06-25 21:15:32,890 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.09,"t":1...":1,"r":1687716933219}]' [123 bytes]
2023-06-25 21:15:33,644 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.2,"t":16...:23,"r":1687716933974}]' [149 bytes]
2023-06-25 21:15:34,530 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414.72,"t":1...":1,"r":1687716934859}]' [243 bytes]
2023-06-25 21:15:34,969 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30416.41,"t":1...":1,"r":1687716935298}]' [121 bytes]
2023-06-25 21:15:35,050 DEBUG protocol 19360 9324 < PING '' [0 bytes]
2023-06-25 21:15:35,050 DEBUG protocol 19360 9324 > PONG '' [0 bytes]
2023-06-25 21:15:35,609 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30416.42,"t":1...":1,"r":1687716935938}]' [124 bytes]
2023-06-25 21:15:35,626 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417.28,"t":1...":1,"r":1687716935952}]' [121 bytes]
2023-06-25 21:15:35,627 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417.28,"t":1...":1,"r":1687716935952}]' [490 bytes]
2023-06-25 21:15:35,696 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417.96,"t":1...":1,"r":1687716936026}]' [118 bytes]
2023-06-25 21:15:35,960 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421.36,"t":1...":1,"r":1687716936166}]' [122 bytes]
2023-06-25 21:15:35,961 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421.37,"t":1...":1,"r":1687716936166}]' [122 bytes]
2023-06-25 21:15:35,961 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30422.2,"t":16...":1,"r":1687716936166}]' [123 bytes]
2023-06-25 21:15:35,961 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30423.1,"t":16...":1,"r":1687716936166}]' [123 bytes]
2023-06-25 21:15:35,963 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.2,"t":16...:23,"r":1687716936185}]' [151 bytes]
2023-06-25 21:15:35,965 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30420.81,"t":1...":1,"r":1687716936202}]' [123 bytes]
2023-06-25 21:15:36,295 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30420.78,"t":1...":1,"r":1687716936624}]' [124 bytes]
2023-06-25 21:15:36,764 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30420.76,"t":1...":1,"r":1687716937094}]' [124 bytes]
2023-06-25 21:15:36,974 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417.89,"t":1...":1,"r":1687716937304}]' [124 bytes]
2023-06-25 21:15:37,344 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415.18,"t":1...":1,"r":1687716937673}]' [124 bytes]
2023-06-25 21:15:37,344 DEBUG protocol 19360 9324 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415.17,"t":1...":1,"r":1687716937673}]' [124 bytes]
2023-06-25 21:18:29,209 INFO autoreload 22444 5536 Watching for file changes with StatReloader
2023-06-25 21:18:29,433 DEBUG proactor_events 22444 22384 Using proactor: IocpProactor
2023-06-25 21:18:29,436 DEBUG __init__ 22444 22384 connect: wss://socket.polygon.io/crypto
2023-06-25 21:18:29,601 DEBUG protocol 22444 22384 = connection is CONNECTING
2023-06-25 21:18:29,706 DEBUG client 22444 22384 > GET /crypto HTTP/1.1
2023-06-25 21:18:29,706 DEBUG client 22444 22384 > Host: socket.polygon.io
2023-06-25 21:18:29,706 DEBUG client 22444 22384 > Upgrade: websocket
2023-06-25 21:18:29,707 DEBUG client 22444 22384 > Connection: Upgrade
2023-06-25 21:18:29,707 DEBUG client 22444 22384 > Sec-WebSocket-Key: yRureSC3aXFyZd0hicrVAQ==
2023-06-25 21:18:29,707 DEBUG client 22444 22384 > Sec-WebSocket-Version: 13
2023-06-25 21:18:29,707 DEBUG client 22444 22384 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:18:29,707 DEBUG client 22444 22384 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:18:29,909 DEBUG client 22444 22384 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:18:29,910 DEBUG client 22444 22384 < Server: nginx/1.19.2
2023-06-25 21:18:29,910 DEBUG client 22444 22384 < Date: Sun, 25 Jun 2023 18:18:30 GMT
2023-06-25 21:18:29,910 DEBUG client 22444 22384 < Connection: upgrade
2023-06-25 21:18:29,910 DEBUG client 22444 22384 < Upgrade: websocket
2023-06-25 21:18:29,910 DEBUG client 22444 22384 < Sec-WebSocket-Accept: ZadCrgbHBnYYNxFwPqM8VqLw0HA=
2023-06-25 21:18:29,910 DEBUG client 22444 22384 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:18:29,910 DEBUG protocol 22444 22384 = connection is OPEN
2023-06-25 21:18:29,910 DEBUG protocol 22444 22384 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:18:29,911 DEBUG __init__ 22444 22384 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:18:29,911 DEBUG __init__ 22444 22384 authing...
2023-06-25 21:18:29,911 DEBUG protocol 22444 22384 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:18:30,016 DEBUG protocol 22444 22384 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:18:30,016 DEBUG __init__ 22444 22384 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:18:30,016 DEBUG __init__ 22444 22384 reconciling: set() {'XT.BTC-USD'}
2023-06-25 21:18:30,017 DEBUG __init__ 22444 22384 subbing: XT.BTC-USD
2023-06-25 21:18:30,017 DEBUG protocol 22444 22384 > TEXT '{"action": "subscribe", "params": "XT.BTC-USD"}' [47 bytes]
2023-06-25 21:18:30,119 DEBUG protocol 22444 22384 < TEXT '[{"ev":"status","status":"success","message":"s...ribed to: XT.BTC-USD"}]' [74 bytes]
2023-06-25 21:18:30,119 DEBUG __init__ 22444 22384 status: subscribed to: XT.BTC-USD
2023-06-25 21:18:31,128 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30446.89,"t":1...":1,"r":1687717111461}]' [124 bytes]
2023-06-25 21:18:32,092 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30448.07,"t":1...":1,"r":1687717112425}]' [123 bytes]
2023-06-25 21:18:32,219 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30447.08,"t":1...":1,"r":1687717112553}]' [122 bytes]
2023-06-25 21:18:32,396 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30448.92,"t":1...":1,"r":1687717112730}]' [121 bytes]
2023-06-25 21:18:32,577 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30449.56,"t":1...":1,"r":1687717112910}]' [124 bytes]
2023-06-25 21:18:33,168 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30446.78,"t":1...":1,"r":1687717113501}]' [123 bytes]
2023-06-25 21:18:33,577 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30446.79,"t":1...":1,"r":1687717113911}]' [124 bytes]
2023-06-25 21:18:33,861 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30448.24,"t":1...":1,"r":1687717114195}]' [118 bytes]
2023-06-25 21:18:33,862 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30448.25,"t":1...":1,"r":1687717114195}]' [488 bytes]
2023-06-25 21:18:34,910 DEBUG protocol 22444 22384 < PING '' [0 bytes]
2023-06-25 21:18:34,910 DEBUG protocol 22444 22384 > PONG '' [0 bytes]
2023-06-25 21:18:34,951 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30447.97,"t":1...":1,"r":1687717115284}]' [123 bytes]
2023-06-25 21:18:35,376 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30425.6,"t":16...:23,"r":1687717115709}]' [151 bytes]
2023-06-25 21:18:35,777 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30444.5,"t":16...":1,"r":1687717116111}]' [237 bytes]
2023-06-25 21:18:35,801 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30444.04,"t":1...":1,"r":1687717116135}]' [124 bytes]
2023-06-25 21:18:35,803 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30443.99,"t":1...":1,"r":1687717116135}]' [124 bytes]
2023-06-25 21:18:35,807 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30443.99,"t":1...":1,"r":1687717116140}]' [124 bytes]
2023-06-25 21:18:37,957 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30443.24,"t":1...":1,"r":1687717118290}]' [121 bytes]
2023-06-25 21:18:38,185 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30441.53,"t":1...":1,"r":1687717118519}]' [124 bytes]
2023-06-25 21:18:38,240 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30440.24,"t":1...":1,"r":1687717118574}]' [122 bytes]
2023-06-25 21:18:39,911 DEBUG protocol 22444 22384 < PING '' [0 bytes]
2023-06-25 21:18:39,911 DEBUG protocol 22444 22384 > PONG '' [0 bytes]
2023-06-25 21:18:40,278 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30442.08,"t":1...":1,"r":1687717120612}]' [124 bytes]
2023-06-25 21:18:40,768 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30442.07,"t":1...":1,"r":1687717121103}]' [124 bytes]
2023-06-25 21:18:41,103 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30441.08,"t":1...":1,"r":1687717121437}]' [122 bytes]
2023-06-25 21:18:42,055 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30438.74,"t":1...":1,"r":1687717122389}]' [124 bytes]
2023-06-25 21:18:42,380 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30438.97,"t":1...":1,"r":1687717122715}]' [123 bytes]
2023-06-25 21:18:43,506 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30440.22,"t":1...":1,"r":1687717123840}]' [124 bytes]
2023-06-25 21:18:43,825 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30441.73,"t":1...":1,"r":1687717124159}]' [124 bytes]
2023-06-25 21:18:44,624 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30445.24,"t":1...":1,"r":1687717124959}]' [124 bytes]
2023-06-25 21:18:44,910 DEBUG protocol 22444 22384 < PING '' [0 bytes]
2023-06-25 21:18:44,910 DEBUG protocol 22444 22384 > PONG '' [0 bytes]
2023-06-25 21:18:45,229 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30446.3,"t":16...":1,"r":1687717125563}]' [123 bytes]
2023-06-25 21:18:45,296 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30444.58,"t":1...":1,"r":1687717125630}]' [124 bytes]
2023-06-25 21:18:45,297 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30444.57,"t":1...":1,"r":1687717125630}]' [120 bytes]
2023-06-25 21:18:45,364 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30444.59,"t":1...":1,"r":1687717125698}]' [123 bytes]
2023-06-25 21:18:45,882 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30442.1,"t":16...":1,"r":1687717126216}]' [122 bytes]
2023-06-25 21:18:46,393 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30459,"t":1687...":2,"r":1687717126728}]' [122 bytes]
2023-06-25 21:18:46,486 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30459,"t":1687...":2,"r":1687717126821}]' [122 bytes]
2023-06-25 21:18:48,010 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30446.78,"t":1...":1,"r":1687717128344}]' [122 bytes]
2023-06-25 21:18:48,011 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30447.46,"t":1...":1,"r":1687717128344}]' [368 bytes]
2023-06-25 21:18:48,070 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30447.47,"t":1...":1,"r":1687717128404}]' [124 bytes]
2023-06-25 21:18:48,333 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30448.26,"t":1...":1,"r":1687717128667}]' [124 bytes]
2023-06-25 21:18:48,764 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30448.24,"t":1...":1,"r":1687717129099}]' [122 bytes]
2023-06-25 21:18:48,765 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30448.25,"t":1...":1,"r":1687717129099}]' [361 bytes]
2023-06-25 21:18:49,771 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30448.42,"t":1...":1,"r":1687717130105}]' [124 bytes]
2023-06-25 21:18:49,910 DEBUG protocol 22444 22384 < PING '' [0 bytes]
2023-06-25 21:18:49,910 DEBUG protocol 22444 22384 > PONG '' [0 bytes]
2023-06-25 21:18:49,910 DEBUG protocol 22444 22384 % sending keepalive ping
2023-06-25 21:18:49,910 DEBUG protocol 22444 22384 > PING 5b b2 64 b7 [binary, 4 bytes]
2023-06-25 21:18:50,112 DEBUG protocol 22444 22384 < PONG 5b b2 64 b7 [binary, 4 bytes]
2023-06-25 21:18:50,113 DEBUG protocol 22444 22384 % received keepalive pong
2023-06-25 21:18:50,267 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30446.39,"t":1...":1,"r":1687717130601}]' [124 bytes]
2023-06-25 21:18:50,277 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30446.4,"t":16...":1,"r":1687717130611}]' [123 bytes]
2023-06-25 21:18:51,053 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30446.63,"t":1...":1,"r":1687717131387}]' [124 bytes]
2023-06-25 21:18:51,163 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30446.63,"t":1...":1,"r":1687717131497}]' [124 bytes]
2023-06-25 21:18:51,580 DEBUG proactor_events 11312 11000 Using proactor: IocpProactor
2023-06-25 21:18:51,583 DEBUG __init__ 11312 11000 connect: wss://socket.polygon.io/crypto
2023-06-25 21:18:51,607 DEBUG functional 11312 2600 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-25 21:18:51,608 DEBUG functional 11312 2600 
def backend_cleanup():
    return 1

2023-06-25 21:18:51,609 DEBUG functional 11312 2600 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-25 21:18:51,609 DEBUG functional 11312 2600 
def xmap(task, it):
    return 1

2023-06-25 21:18:51,610 DEBUG functional 11312 2600 
def chain(*args, **kwargs):
    return 1

2023-06-25 21:18:51,610 DEBUG functional 11312 2600 
def debug_task(self):
    return 1

2023-06-25 21:18:51,611 DEBUG functional 11312 2600 
def xstarmap(task, it):
    return 1

2023-06-25 21:18:51,611 DEBUG functional 11312 2600 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-25 21:18:51,611 DEBUG functional 11312 2600 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-25 21:18:51,612 DEBUG functional 11312 2600 
def chunks(task, it, n):
    return 1

2023-06-25 21:18:51,612 DEBUG functional 11312 2600 
def get_current_buy_price(symbol):
    return 1

2023-06-25 21:18:52,315 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30445.4,"t":16...":1,"r":1687717132649}]' [123 bytes]
2023-06-25 21:18:53,416 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30447.78,"t":1...":1,"r":1687717133751}]' [122 bytes]
2023-06-25 21:18:53,417 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30447.78,"t":1...":1,"r":1687717133751}]' [726 bytes]
2023-06-25 21:18:53,417 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30446.44,"t":1...":1,"r":1687717133751}]' [843 bytes]
2023-06-25 21:18:53,631 DEBUG proactor_events 13384 14840 Using proactor: IocpProactor
2023-06-25 21:18:53,634 DEBUG __init__ 13384 14840 connect: wss://socket.polygon.io/crypto
2023-06-25 21:18:53,642 DEBUG proactor_events 20056 18992 Using proactor: IocpProactor
2023-06-25 21:18:53,645 DEBUG __init__ 20056 18992 connect: wss://socket.polygon.io/crypto
2023-06-25 21:18:54,568 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30449.31,"t":1...":1,"r":1687717134902}]' [124 bytes]
2023-06-25 21:18:54,910 DEBUG protocol 22444 22384 < PING '' [0 bytes]
2023-06-25 21:18:54,910 DEBUG protocol 22444 22384 > PONG '' [0 bytes]
2023-06-25 21:18:55,100 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30449.28,"t":1...":1,"r":1687717135434}]' [124 bytes]
2023-06-25 21:18:55,291 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30449.44,"t":1...":1,"r":1687717135624}]' [124 bytes]
2023-06-25 21:18:55,364 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30449.44,"t":1...":1,"r":1687717135698}]' [124 bytes]
2023-06-25 21:18:55,374 DEBUG protocol 22444 22384 < TEXT '[{"ev":"status","status":"max_connections","mes...onnections exceeded."}]' [96 bytes]
2023-06-25 21:18:55,374 DEBUG protocol 22444 22384 < CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:18:55,374 DEBUG protocol 22444 22384 = connection is CLOSING
2023-06-25 21:18:55,374 DEBUG protocol 22444 22384 > CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:18:55,375 DEBUG protocol 22444 22384 = connection is CLOSED
2023-06-25 21:18:55,375 DEBUG __init__ 22444 22384 status: Maximum number of connections exceeded.
2023-06-25 21:18:55,375 DEBUG protocol 22444 22384 x closing TCP connection
2023-06-25 21:18:55,375 DEBUG __init__ 22444 22384 connection closed (ERR): received 1008 (policy violation); then sent 1008 (policy violation)
2023-06-25 21:18:55,476 DEBUG protocol 22444 22384 = connection is CONNECTING
2023-06-25 21:18:55,506 DEBUG proactor_events 10708 20272 Using proactor: IocpProactor
2023-06-25 21:18:55,509 DEBUG __init__ 10708 20272 connect: wss://socket.polygon.io/crypto
2023-06-25 21:18:55,578 DEBUG client 22444 22384 > GET /crypto HTTP/1.1
2023-06-25 21:18:55,578 DEBUG client 22444 22384 > Host: socket.polygon.io
2023-06-25 21:18:55,578 DEBUG client 22444 22384 > Upgrade: websocket
2023-06-25 21:18:55,578 DEBUG client 22444 22384 > Connection: Upgrade
2023-06-25 21:18:55,578 DEBUG client 22444 22384 > Sec-WebSocket-Key: vBytga//aXW3nVzPv5pWrg==
2023-06-25 21:18:55,579 DEBUG client 22444 22384 > Sec-WebSocket-Version: 13
2023-06-25 21:18:55,579 DEBUG client 22444 22384 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:18:55,579 DEBUG client 22444 22384 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:18:55,777 DEBUG client 22444 22384 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:18:55,777 DEBUG client 22444 22384 < Server: nginx/1.19.2
2023-06-25 21:18:55,777 DEBUG client 22444 22384 < Date: Sun, 25 Jun 2023 18:18:56 GMT
2023-06-25 21:18:55,777 DEBUG client 22444 22384 < Connection: upgrade
2023-06-25 21:18:55,777 DEBUG client 22444 22384 < Upgrade: websocket
2023-06-25 21:18:55,777 DEBUG client 22444 22384 < Sec-WebSocket-Accept: O2sWX9FoNq+YHAp+KOcc2m2qHSk=
2023-06-25 21:18:55,777 DEBUG client 22444 22384 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:18:55,777 DEBUG protocol 22444 22384 = connection is OPEN
2023-06-25 21:18:55,778 DEBUG protocol 22444 22384 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:18:55,778 DEBUG __init__ 22444 22384 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:18:55,778 DEBUG __init__ 22444 22384 authing...
2023-06-25 21:18:55,778 DEBUG protocol 22444 22384 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:18:55,877 DEBUG protocol 22444 22384 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:18:55,877 DEBUG __init__ 22444 22384 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:18:55,877 DEBUG __init__ 22444 22384 reconciling: set() {'XT.BTC-USD'}
2023-06-25 21:18:55,878 DEBUG __init__ 22444 22384 subbing: XT.BTC-USD
2023-06-25 21:18:55,878 DEBUG protocol 22444 22384 > TEXT '{"action": "subscribe", "params": "XT.BTC-USD"}' [47 bytes]
2023-06-25 21:18:55,977 DEBUG protocol 22444 22384 < TEXT '[{"ev":"status","status":"success","message":"s...ribed to: XT.BTC-USD"}]' [74 bytes]
2023-06-25 21:18:55,977 DEBUG __init__ 22444 22384 status: subscribed to: XT.BTC-USD
2023-06-25 21:18:56,574 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30446.83,"t":1...":1,"r":1687717136903}]' [124 bytes]
2023-06-25 21:18:56,715 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30446.08,"t":1...":1,"r":1687717137048}]' [124 bytes]
2023-06-25 21:18:56,715 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30446.07,"t":1...":1,"r":1687717137048}]' [124 bytes]
2023-06-25 21:18:56,725 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30446.07,"t":1...":1,"r":1687717137060}]' [124 bytes]
2023-06-25 21:18:57,321 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30445.89,"t":1...":1,"r":1687717137655}]' [124 bytes]
2023-06-25 21:18:57,881 DEBUG proactor_events 20548 648 Using proactor: IocpProactor
2023-06-25 21:18:57,884 DEBUG __init__ 20548 648 connect: wss://socket.polygon.io/crypto
2023-06-25 21:18:58,317 DEBUG protocol 22444 22384 < TEXT '[{"ev":"status","status":"max_connections","mes...onnections exceeded."}]' [96 bytes]
2023-06-25 21:18:58,317 DEBUG protocol 22444 22384 < CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:18:58,317 DEBUG protocol 22444 22384 = connection is CLOSING
2023-06-25 21:18:58,317 DEBUG protocol 22444 22384 > CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:18:58,318 DEBUG protocol 22444 22384 = connection is CLOSED
2023-06-25 21:18:58,318 DEBUG __init__ 22444 22384 status: Maximum number of connections exceeded.
2023-06-25 21:18:58,319 DEBUG protocol 22444 22384 x closing TCP connection
2023-06-25 21:18:58,319 DEBUG __init__ 22444 22384 connection closed (ERR): received 1008 (policy violation); then sent 1008 (policy violation)
2023-06-25 21:18:58,422 DEBUG protocol 22444 22384 = connection is CONNECTING
2023-06-25 21:18:58,528 DEBUG client 22444 22384 > GET /crypto HTTP/1.1
2023-06-25 21:18:58,528 DEBUG client 22444 22384 > Host: socket.polygon.io
2023-06-25 21:18:58,528 DEBUG client 22444 22384 > Upgrade: websocket
2023-06-25 21:18:58,528 DEBUG client 22444 22384 > Connection: Upgrade
2023-06-25 21:18:58,528 DEBUG client 22444 22384 > Sec-WebSocket-Key: FIV9Zo53FNEr9RBxk5jekA==
2023-06-25 21:18:58,528 DEBUG client 22444 22384 > Sec-WebSocket-Version: 13
2023-06-25 21:18:58,528 DEBUG client 22444 22384 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:18:58,528 DEBUG client 22444 22384 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:18:58,734 DEBUG client 22444 22384 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:18:58,734 DEBUG client 22444 22384 < Server: nginx/1.19.2
2023-06-25 21:18:58,734 DEBUG client 22444 22384 < Date: Sun, 25 Jun 2023 18:18:59 GMT
2023-06-25 21:18:58,734 DEBUG client 22444 22384 < Connection: upgrade
2023-06-25 21:18:58,734 DEBUG client 22444 22384 < Upgrade: websocket
2023-06-25 21:18:58,734 DEBUG client 22444 22384 < Sec-WebSocket-Accept: okv5nkg9Op4wYjN57g1wqLIu5XI=
2023-06-25 21:18:58,734 DEBUG client 22444 22384 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:18:58,734 DEBUG protocol 22444 22384 = connection is OPEN
2023-06-25 21:18:58,735 DEBUG protocol 22444 22384 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:18:58,735 DEBUG __init__ 22444 22384 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:18:58,735 DEBUG __init__ 22444 22384 authing...
2023-06-25 21:18:58,735 DEBUG protocol 22444 22384 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:18:58,837 DEBUG protocol 22444 22384 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:18:58,837 DEBUG __init__ 22444 22384 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:18:58,838 DEBUG __init__ 22444 22384 reconciling: set() {'XT.BTC-USD'}
2023-06-25 21:18:58,838 DEBUG __init__ 22444 22384 subbing: XT.BTC-USD
2023-06-25 21:18:58,838 DEBUG protocol 22444 22384 > TEXT '{"action": "subscribe", "params": "XT.BTC-USD"}' [47 bytes]
2023-06-25 21:18:58,940 DEBUG protocol 22444 22384 < TEXT '[{"ev":"status","status":"success","message":"s...ribed to: XT.BTC-USD"}]' [74 bytes]
2023-06-25 21:18:58,940 DEBUG __init__ 22444 22384 status: subscribed to: XT.BTC-USD
2023-06-25 21:18:59,836 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30438,"t":1687...":6,"r":1687717140171}]' [121 bytes]
2023-06-25 21:19:00,362 DEBUG protocol 22444 22384 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30445,"t":1687...":6,"r":1687717140697}]' [121 bytes]
2023-06-25 21:21:40,292 INFO autoreload 14776 13304 Watching for file changes with StatReloader
2023-06-25 21:21:40,524 DEBUG proactor_events 14776 21916 Using proactor: IocpProactor
2023-06-25 21:21:40,527 DEBUG __init__ 14776 21916 connect: wss://socket.polygon.io/crypto
2023-06-25 21:21:40,693 DEBUG protocol 14776 21916 = connection is CONNECTING
2023-06-25 21:21:40,800 DEBUG client 14776 21916 > GET /crypto HTTP/1.1
2023-06-25 21:21:40,800 DEBUG client 14776 21916 > Host: socket.polygon.io
2023-06-25 21:21:40,800 DEBUG client 14776 21916 > Upgrade: websocket
2023-06-25 21:21:40,801 DEBUG client 14776 21916 > Connection: Upgrade
2023-06-25 21:21:40,801 DEBUG client 14776 21916 > Sec-WebSocket-Key: b/8NoH611Wlhu8wy+faeFA==
2023-06-25 21:21:40,801 DEBUG client 14776 21916 > Sec-WebSocket-Version: 13
2023-06-25 21:21:40,801 DEBUG client 14776 21916 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:21:40,801 DEBUG client 14776 21916 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:21:41,019 DEBUG client 14776 21916 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:21:41,019 DEBUG client 14776 21916 < Server: nginx/1.19.2
2023-06-25 21:21:41,019 DEBUG client 14776 21916 < Date: Sun, 25 Jun 2023 18:21:41 GMT
2023-06-25 21:21:41,019 DEBUG client 14776 21916 < Connection: upgrade
2023-06-25 21:21:41,019 DEBUG client 14776 21916 < Upgrade: websocket
2023-06-25 21:21:41,019 DEBUG client 14776 21916 < Sec-WebSocket-Accept: iThHHdXMB0wVx0MRUy7RV6uOLNY=
2023-06-25 21:21:41,020 DEBUG client 14776 21916 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:21:41,020 DEBUG protocol 14776 21916 = connection is OPEN
2023-06-25 21:21:41,020 DEBUG protocol 14776 21916 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:21:41,020 DEBUG __init__ 14776 21916 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:21:41,021 DEBUG __init__ 14776 21916 authing...
2023-06-25 21:21:41,021 DEBUG protocol 14776 21916 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:21:41,126 DEBUG protocol 14776 21916 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:21:41,126 DEBUG __init__ 14776 21916 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:21:41,127 DEBUG __init__ 14776 21916 reconciling: set() {'XT.BTC-USD'}
2023-06-25 21:21:41,127 DEBUG __init__ 14776 21916 subbing: XT.BTC-USD
2023-06-25 21:21:41,127 DEBUG protocol 14776 21916 > TEXT '{"action": "subscribe", "params": "XT.BTC-USD"}' [47 bytes]
2023-06-25 21:21:41,228 DEBUG protocol 14776 21916 < TEXT '[{"ev":"status","status":"success","message":"s...ribed to: XT.BTC-USD"}]' [74 bytes]
2023-06-25 21:21:41,229 DEBUG __init__ 14776 21916 status: subscribed to: XT.BTC-USD
2023-06-25 21:21:41,819 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.78,"t":1...":1,"r":1687717302157}]' [124 bytes]
2023-06-25 21:21:42,014 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.3,"t":16...:23,"r":1687717302352}]' [151 bytes]
2023-06-25 21:21:42,246 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.9,"t":16...":1,"r":1687717302583}]' [118 bytes]
2023-06-25 21:21:42,329 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.9,"t":16...":1,"r":1687717302659}]' [123 bytes]
2023-06-25 21:21:42,730 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.9,"t":16...":1,"r":1687717303069}]' [123 bytes]
2023-06-25 21:21:43,173 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30391.78,"t":1...":1,"r":1687717303511}]' [123 bytes]
2023-06-25 21:21:43,263 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30391.86,"t":1...":1,"r":1687717303602}]' [121 bytes]
2023-06-25 21:21:43,409 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.65,"t":1...":1,"r":1687717303748}]' [119 bytes]
2023-06-25 21:21:44,303 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.63,"t":1...":1,"r":1687717304641}]' [124 bytes]
2023-06-25 21:21:44,901 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.84,"t":1...":1,"r":1687717305238}]' [124 bytes]
2023-06-25 21:21:45,794 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.65,"t":1...":1,"r":1687717306132}]' [124 bytes]
2023-06-25 21:21:45,803 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.16,"t":1...":1,"r":1687717306141}]' [121 bytes]
2023-06-25 21:21:45,809 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.16,"t":1...":1,"r":1687717306147}]' [120 bytes]
2023-06-25 21:21:45,809 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.16,"t":1...":1,"r":1687717306147}]' [120 bytes]
2023-06-25 21:21:45,841 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.19,"t":1...":1,"r":1687717306177}]' [122 bytes]
2023-06-25 21:21:45,843 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.19,"t":1...":1,"r":1687717306177}]' [122 bytes]
2023-06-25 21:21:45,936 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.51,"t":1...":1,"r":1687717306274}]' [124 bytes]
2023-06-25 21:21:45,951 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.51,"t":1...":1,"r":1687717306290}]' [124 bytes]
2023-06-25 21:21:45,961 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.51,"t":1...":1,"r":1687717306300}]' [124 bytes]
2023-06-25 21:21:45,971 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.51,"t":1...":1,"r":1687717306310}]' [124 bytes]
2023-06-25 21:21:45,990 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.51,"t":1...":1,"r":1687717306329}]' [124 bytes]
2023-06-25 21:21:45,990 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.51,"t":1...":1,"r":1687717306329}]' [121 bytes]
2023-06-25 21:21:46,013 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:21:46,013 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:21:46,140 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.1,"t":16...":1,"r":1687717306478}]' [123 bytes]
2023-06-25 21:21:46,292 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.1,"t":16...":1,"r":1687717306630}]' [123 bytes]
2023-06-25 21:21:46,292 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.15,"t":1...":1,"r":1687717306630}]' [124 bytes]
2023-06-25 21:21:46,396 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.72,"t":1...":1,"r":1687717306734}]' [124 bytes]
2023-06-25 21:21:46,814 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.81,"t":1...":1,"r":1687717307153}]' [123 bytes]
2023-06-25 21:21:46,894 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.61,"t":1...":1,"r":1687717307233}]' [124 bytes]
2023-06-25 21:21:46,951 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30380.8,"t":16...:23,"r":1687717307289}]' [297 bytes]
2023-06-25 21:21:47,205 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.11,"t":1...":1,"r":1687717307543}]' [124 bytes]
2023-06-25 21:21:47,352 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417,"t":1687...":2,"r":1687717307690}]' [119 bytes]
2023-06-25 21:21:47,390 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417,"t":1687...":2,"r":1687717307729}]' [119 bytes]
2023-06-25 21:21:47,412 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.81,"t":1...":1,"r":1687717307750}]' [120 bytes]
2023-06-25 21:21:47,499 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.57,"t":1...":1,"r":1687717307837}]' [124 bytes]
2023-06-25 21:21:47,500 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.77,"t":1...":1,"r":1687717307837}]' [124 bytes]
2023-06-25 21:21:47,934 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393,"t":1687...":6,"r":1687717308272}]' [121 bytes]
2023-06-25 21:21:47,936 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414,"t":1687...":2,"r":1687717308275}]' [119 bytes]
2023-06-25 21:21:48,017 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414,"t":1687...":2,"r":1687717308357}]' [119 bytes]
2023-06-25 21:21:48,594 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411,"t":1687...":2,"r":1687717308932}]' [237 bytes]
2023-06-25 21:21:48,661 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411,"t":1687...":2,"r":1687717309000}]' [119 bytes]
2023-06-25 21:21:48,672 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411,"t":1687...":2,"r":1687717309012}]' [119 bytes]
2023-06-25 21:21:49,285 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30384.85,"t":1...":1,"r":1687717309623}]' [118 bytes]
2023-06-25 21:21:49,285 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30384.85,"t":1...":1,"r":1687717309624}]' [124 bytes]
2023-06-25 21:21:49,733 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390,"t":1687...":6,"r":1687717310070}]' [121 bytes]
2023-06-25 21:21:49,842 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411,"t":1687...":2,"r":1687717310180}]' [118 bytes]
2023-06-25 21:21:49,874 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411,"t":1687...":2,"r":1687717310213}]' [118 bytes]
2023-06-25 21:21:50,028 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382.05,"t":1...":1,"r":1687717310368}]' [123 bytes]
2023-06-25 21:21:50,040 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410,"t":1687...":2,"r":1687717310379}]' [119 bytes]
2023-06-25 21:21:50,074 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410,"t":1687...":2,"r":1687717310413}]' [119 bytes]
2023-06-25 21:21:50,144 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388,"t":1687...":6,"r":1687717310483}]' [116 bytes]
2023-06-25 21:21:50,178 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388,"t":1687...":6,"r":1687717310517}]' [115 bytes]
2023-06-25 21:21:50,854 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30375.1,"t":16...:23,"r":1687717311193}]' [149 bytes]
2023-06-25 21:21:50,976 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30375,"t":1687...:23,"r":1687717311315}]' [149 bytes]
2023-06-25 21:21:51,012 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:21:51,013 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:21:51,059 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30375.1,"t":16...:23,"r":1687717311382}]' [151 bytes]
2023-06-25 21:21:51,208 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30384.28,"t":1...":1,"r":1687717311545}]' [124 bytes]
2023-06-25 21:21:51,211 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388,"t":1687...":6,"r":1687717311549}]' [120 bytes]
2023-06-25 21:21:51,237 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30384.34,"t":1...":1,"r":1687717311575}]' [124 bytes]
2023-06-25 21:21:51,340 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.34,"t":1...":1,"r":1687717311679}]' [124 bytes]
2023-06-25 21:21:52,289 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406,"t":1687...":2,"r":1687717312629}]' [117 bytes]
2023-06-25 21:21:52,356 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406,"t":1687...":2,"r":1687717312695}]' [117 bytes]
2023-06-25 21:21:52,574 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30384.77,"t":1...":1,"r":1687717312913}]' [123 bytes]
2023-06-25 21:21:52,694 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30383.58,"t":1...":1,"r":1687717313033}]' [124 bytes]
2023-06-25 21:21:53,082 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.42,"t":1...":1,"r":1687717313421}]' [124 bytes]
2023-06-25 21:21:53,204 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386,"t":1687...":6,"r":1687717313528}]' [121 bytes]
2023-06-25 21:21:53,654 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30375.1,"t":16...:23,"r":1687717313992}]' [150 bytes]
2023-06-25 21:21:55,120 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.69,"t":1...":1,"r":1687717315458}]' [124 bytes]
2023-06-25 21:21:55,344 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.65,"t":1...":1,"r":1687717315669}]' [124 bytes]
2023-06-25 21:21:55,886 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.28,"t":1...":1,"r":1687717316224}]' [124 bytes]
2023-06-25 21:21:55,887 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.28,"t":1...":1,"r":1687717316224}]' [609 bytes]
2023-06-25 21:21:55,902 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.23,"t":1...":1,"r":1687717316241}]' [124 bytes]
2023-06-25 21:21:55,902 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.22,"t":1...":1,"r":1687717316241}]' [124 bytes]
2023-06-25 21:21:55,910 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.22,"t":1...":1,"r":1687717316249}]' [124 bytes]
2023-06-25 21:21:55,923 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.35,"t":1...":1,"r":1687717316262}]' [124 bytes]
2023-06-25 21:21:55,924 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.22,"t":1...":1,"r":1687717316263}]' [124 bytes]
2023-06-25 21:21:55,926 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.22,"t":1...":1,"r":1687717316265}]' [124 bytes]
2023-06-25 21:21:55,931 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.22,"t":1...":1,"r":1687717316270}]' [124 bytes]
2023-06-25 21:21:55,944 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.23,"t":1...":1,"r":1687717316283}]' [124 bytes]
2023-06-25 21:21:55,988 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.22,"t":1...":1,"r":1687717316283}]' [124 bytes]
2023-06-25 21:21:55,988 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.22,"t":1...":1,"r":1687717316284}]' [124 bytes]
2023-06-25 21:21:56,014 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:21:56,014 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:21:56,364 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30391,"t":1687...":1,"r":1687717316703}]' [119 bytes]
2023-06-25 21:21:56,365 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.99,"t":1...":1,"r":1687717316703}]' [122 bytes]
2023-06-25 21:21:56,386 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30391,"t":1687...":1,"r":1687717316714}]' [119 bytes]
2023-06-25 21:21:56,386 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30391,"t":1687...":1,"r":1687717316714}]' [119 bytes]
2023-06-25 21:21:57,036 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30391.8,"t":16...":1,"r":1687717317375}]' [123 bytes]
2023-06-25 21:21:57,086 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30391.8,"t":16...":1,"r":1687717317424}]' [117 bytes]
2023-06-25 21:21:57,535 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.26,"t":1...":1,"r":1687717317873}]' [123 bytes]
2023-06-25 21:21:57,744 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30384.49,"t":1...":1,"r":1687717318082}]' [118 bytes]
2023-06-25 21:21:58,378 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30383.57,"t":1...":1,"r":1687717318717}]' [124 bytes]
2023-06-25 21:21:58,392 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30383.57,"t":1...":1,"r":1687717318730}]' [124 bytes]
2023-06-25 21:21:58,396 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30383.57,"t":1...":1,"r":1687717318736}]' [124 bytes]
2023-06-25 21:21:58,404 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382.98,"t":1...":1,"r":1687717318743}]' [120 bytes]
2023-06-25 21:21:58,413 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382.99,"t":1...":1,"r":1687717318751}]' [124 bytes]
2023-06-25 21:21:58,418 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382.99,"t":1...":1,"r":1687717318757}]' [120 bytes]
2023-06-25 21:21:58,564 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30380.78,"t":1...":1,"r":1687717318895}]' [117 bytes]
2023-06-25 21:21:58,581 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30380.05,"t":1...":1,"r":1687717318912}]' [120 bytes]
2023-06-25 21:21:58,581 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30380.05,"t":1...":1,"r":1687717318913}]' [124 bytes]
2023-06-25 21:21:58,587 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30379.86,"t":1...":1,"r":1687717318926}]' [120 bytes]
2023-06-25 21:21:58,587 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30379.86,"t":1...":1,"r":1687717318926}]' [119 bytes]
2023-06-25 21:21:58,588 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30379.44,"t":1...":1,"r":1687717318926}]' [121 bytes]
2023-06-25 21:21:58,609 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30379.93,"t":1...":1,"r":1687717318948}]' [120 bytes]
2023-06-25 21:21:58,616 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30379.93,"t":1...":1,"r":1687717318955}]' [119 bytes]
2023-06-25 21:21:58,616 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30379.44,"t":1...":1,"r":1687717318955}]' [240 bytes]
2023-06-25 21:21:58,628 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30379,"t":1687...":1,"r":1687717318967}]' [119 bytes]
2023-06-25 21:21:58,629 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30378.47,"t":1...":1,"r":1687717318967}]' [122 bytes]
2023-06-25 21:21:58,749 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30378.48,"t":1...":1,"r":1687717319088}]' [121 bytes]
2023-06-25 21:21:58,750 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30378.48,"t":1...":1,"r":1687717319088}]' [245 bytes]
2023-06-25 21:21:58,767 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30377.41,"t":1...":1,"r":1687717319102}]' [120 bytes]
2023-06-25 21:21:58,784 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30377.41,"t":1...":1,"r":1687717319122}]' [120 bytes]
2023-06-25 21:21:58,802 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30377,"t":1687...":1,"r":1687717319141}]' [117 bytes]
2023-06-25 21:21:58,878 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30377,"t":1687...":1,"r":1687717319217}]' [119 bytes]
2023-06-25 21:21:58,880 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30375.79,"t":1...":1,"r":1687717319217}]' [604 bytes]
2023-06-25 21:21:58,888 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30377,"t":1687...":1,"r":1687717319226}]' [117 bytes]
2023-06-25 21:21:58,909 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30384,"t":1687...":6,"r":1687717319249}]' [114 bytes]
2023-06-25 21:21:58,995 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406,"t":1687...":2,"r":1687717319334}]' [119 bytes]
2023-06-25 21:21:59,047 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30384,"t":1687...":6,"r":1687717319386}]' [121 bytes]
2023-06-25 21:21:59,048 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406,"t":1687...":2,"r":1687717319388}]' [119 bytes]
2023-06-25 21:21:59,117 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30375.4,"t":16...":1,"r":1687717319455}]' [120 bytes]
2023-06-25 21:21:59,118 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30375.39,"t":1...":1,"r":1687717319455}]' [362 bytes]
2023-06-25 21:21:59,314 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30375,"t":1687...:23,"r":1687717319652}]' [149 bytes]
2023-06-25 21:21:59,315 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30375,"t":1687...:23,"r":1687717319652}]' [296 bytes]
2023-06-25 21:21:59,342 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30375,"t":1687...:23,"r":1687717319681}]' [149 bytes]
2023-06-25 21:21:59,416 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30375.38,"t":1...":1,"r":1687717319755}]' [124 bytes]
2023-06-25 21:21:59,431 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30375,"t":1687...:23,"r":1687717319770}]' [297 bytes]
2023-06-25 21:21:59,432 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30360,"t":1687...:23,"r":1687717319770}]' [149 bytes]
2023-06-25 21:21:59,465 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30360,"t":1687...:23,"r":1687717319804}]' [149 bytes]
2023-06-25 21:21:59,492 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30375.4,"t":16...":1,"r":1687717319830}]' [123 bytes]
2023-06-25 21:21:59,493 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30375.41,"t":1...":1,"r":1687717319830}]' [122 bytes]
2023-06-25 21:21:59,510 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30375.4,"t":16...":1,"r":1687717319849}]' [123 bytes]
2023-06-25 21:21:59,601 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30359.8,"t":16...:23,"r":1687717319940}]' [148 bytes]
2023-06-25 21:21:59,700 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30373.87,"t":1...":1,"r":1687717320038}]' [124 bytes]
2023-06-25 21:21:59,715 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30373.87,"t":1...":1,"r":1687717320053}]' [124 bytes]
2023-06-25 21:21:59,725 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30373.87,"t":1...":1,"r":1687717320064}]' [124 bytes]
2023-06-25 21:21:59,737 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30373.87,"t":1...":1,"r":1687717320075}]' [118 bytes]
2023-06-25 21:21:59,802 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30359.9,"t":16...:23,"r":1687717320141}]' [151 bytes]
2023-06-25 21:21:59,848 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30376.14,"t":1...":1,"r":1687717320186}]' [124 bytes]
2023-06-25 21:21:59,848 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30376.15,"t":1...":1,"r":1687717320187}]' [1201 bytes]
2023-06-25 21:21:59,997 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30359.9,"t":16...:23,"r":1687717320337}]' [151 bytes]
2023-06-25 21:22:00,002 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382,"t":1687...":6,"r":1687717320341}]' [121 bytes]
2023-06-25 21:22:00,013 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381,"t":1687...":6,"r":1687717320351}]' [121 bytes]
2023-06-25 21:22:00,027 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30376.15,"t":1...":1,"r":1687717320365}]' [124 bytes]
2023-06-25 21:22:00,117 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381,"t":1687...":6,"r":1687717320430}]' [121 bytes]
2023-06-25 21:22:00,119 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30379,"t":1687...":6,"r":1687717320446}]' [241 bytes]
2023-06-25 21:22:01,012 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:22:01,013 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:22:01,013 DEBUG protocol 14776 21916 % sending keepalive ping
2023-06-25 21:22:01,013 DEBUG protocol 14776 21916 > PING '\x0b8h#' [text, 4 bytes]
2023-06-25 21:22:01,100 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30376.15,"t":1...":1,"r":1687717321439}]' [124 bytes]
2023-06-25 21:22:01,111 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30378.29,"t":1...":1,"r":1687717321450}]' [121 bytes]
2023-06-25 21:22:01,127 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30378.76,"t":1...":1,"r":1687717321466}]' [124 bytes]
2023-06-25 21:22:01,202 DEBUG protocol 14776 21916 < PONG '\x0b8h#' [text, 4 bytes]
2023-06-25 21:22:01,202 DEBUG protocol 14776 21916 % received keepalive pong
2023-06-25 21:22:01,579 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30378.48,"t":1...":1,"r":1687717321918}]' [124 bytes]
2023-06-25 21:22:02,056 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30378.49,"t":1...":1,"r":1687717322394}]' [124 bytes]
2023-06-25 21:22:02,114 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30378.49,"t":1...":1,"r":1687717322453}]' [117 bytes]
2023-06-25 21:22:02,374 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30378.46,"t":1...":1,"r":1687717322711}]' [124 bytes]
2023-06-25 21:22:02,606 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30378.49,"t":1...":1,"r":1687717322946}]' [124 bytes]
2023-06-25 21:22:02,959 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382.31,"t":1...":1,"r":1687717323299}]' [124 bytes]
2023-06-25 21:22:03,833 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30380.74,"t":1...":1,"r":1687717324172}]' [124 bytes]
2023-06-25 21:22:04,405 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30380.74,"t":1...":1,"r":1687717324744}]' [124 bytes]
2023-06-25 21:22:04,616 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30379.36,"t":1...":1,"r":1687717324955}]' [124 bytes]
2023-06-25 21:22:04,957 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406,"t":1687...":2,"r":1687717325297}]' [122 bytes]
2023-06-25 21:22:04,983 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406,"t":1687...":2,"r":1687717325323}]' [122 bytes]
2023-06-25 21:22:05,187 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30359.8,"t":16...:23,"r":1687717325525}]' [149 bytes]
2023-06-25 21:22:05,188 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30359.8,"t":16...:23,"r":1687717325525}]' [301 bytes]
2023-06-25 21:22:05,347 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30378.72,"t":1...":1,"r":1687717325686}]' [124 bytes]
2023-06-25 21:22:05,867 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30379.6,"t":16...":1,"r":1687717326206}]' [123 bytes]
2023-06-25 21:22:05,867 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30380.62,"t":1...":1,"r":1687717326206}]' [245 bytes]
2023-06-25 21:22:06,013 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:22:06,013 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:22:06,623 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30359.5,"t":16...:23,"r":1687717326963}]' [151 bytes]
2023-06-25 21:22:06,943 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30379.35,"t":1...":1,"r":1687717327282}]' [124 bytes]
2023-06-25 21:22:07,150 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30379.35,"t":1...":1,"r":1687717327489}]' [124 bytes]
2023-06-25 21:22:07,492 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30380.87,"t":1...":1,"r":1687717327831}]' [123 bytes]
2023-06-25 21:22:07,568 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30359.5,"t":16...:23,"r":1687717327906}]' [301 bytes]
2023-06-25 21:22:08,688 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.24,"t":1...":1,"r":1687717329027}]' [118 bytes]
2023-06-25 21:22:08,692 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.24,"t":1...":1,"r":1687717329031}]' [122 bytes]
2023-06-25 21:22:08,693 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.25,"t":1...":1,"r":1687717329031}]' [244 bytes]
2023-06-25 21:22:08,694 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.44,"t":1...":1,"r":1687717329031}]' [124 bytes]
2023-06-25 21:22:09,084 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382.11,"t":1...":1,"r":1687717329423}]' [124 bytes]
2023-06-25 21:22:09,089 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.04,"t":1...":1,"r":1687717329429}]' [124 bytes]
2023-06-25 21:22:11,012 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:22:11,013 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:22:11,043 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30360.2,"t":16...:23,"r":1687717331382}]' [149 bytes]
2023-06-25 21:22:11,044 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30367.9,"t":16...:23,"r":1687717331382}]' [151 bytes]
2023-06-25 21:22:11,140 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393,"t":1687...":6,"r":1687717331479}]' [121 bytes]
2023-06-25 21:22:11,407 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30360.2,"t":16...:23,"r":1687717331746}]' [147 bytes]
2023-06-25 21:22:11,976 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.57,"t":1...":1,"r":1687717332316}]' [124 bytes]
2023-06-25 21:22:12,315 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.82,"t":1...":1,"r":1687717332654}]' [123 bytes]
2023-06-25 21:22:12,325 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.63,"t":1...":1,"r":1687717332664}]' [124 bytes]
2023-06-25 21:22:12,442 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393,"t":1687...":6,"r":1687717332782}]' [118 bytes]
2023-06-25 21:22:12,528 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.71,"t":1...":1,"r":1687717332867}]' [122 bytes]
2023-06-25 21:22:13,708 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30391.18,"t":1...":1,"r":1687717334047}]' [118 bytes]
2023-06-25 21:22:13,711 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30391.18,"t":1...":1,"r":1687717334050}]' [124 bytes]
2023-06-25 21:22:13,799 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.63,"t":1...":1,"r":1687717334139}]' [122 bytes]
2023-06-25 21:22:13,800 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.63,"t":1...":1,"r":1687717334139}]' [122 bytes]
2023-06-25 21:22:14,434 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30360.2,"t":16...:23,"r":1687717334774}]' [151 bytes]
2023-06-25 21:22:15,434 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.64,"t":1...":1,"r":1687717335774}]' [124 bytes]
2023-06-25 21:22:15,438 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.64,"t":1...":1,"r":1687717335777}]' [124 bytes]
2023-06-25 21:22:16,012 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:22:16,012 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:22:16,093 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30360.2,"t":16...:23,"r":1687717336432}]' [151 bytes]
2023-06-25 21:22:16,385 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.63,"t":1...":1,"r":1687717336724}]' [122 bytes]
2023-06-25 21:22:16,385 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.64,"t":1...":1,"r":1687717336724}]' [489 bytes]
2023-06-25 21:22:16,404 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30360.2,"t":16...:23,"r":1687717336744}]' [299 bytes]
2023-06-25 21:22:16,830 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.09,"t":1...":1,"r":1687717337168}]' [123 bytes]
2023-06-25 21:22:17,193 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.08,"t":1...":1,"r":1687717337532}]' [123 bytes]
2023-06-25 21:22:17,335 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.08,"t":1...":1,"r":1687717337674}]' [124 bytes]
2023-06-25 21:22:17,386 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394,"t":1687...":6,"r":1687717337725}]' [121 bytes]
2023-06-25 21:22:17,553 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.08,"t":1...":1,"r":1687717337892}]' [124 bytes]
2023-06-25 21:22:17,554 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.13,"t":1...":1,"r":1687717337892}]' [124 bytes]
2023-06-25 21:22:19,339 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.3,"t":16...":1,"r":1687717339678}]' [122 bytes]
2023-06-25 21:22:19,866 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.99,"t":1...":1,"r":1687717340206}]' [124 bytes]
2023-06-25 21:22:20,733 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409,"t":1687...":2,"r":1687717341073}]' [117 bytes]
2023-06-25 21:22:20,761 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409,"t":1687...":2,"r":1687717341101}]' [117 bytes]
2023-06-25 21:22:21,012 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:22:21,012 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:22:21,208 DEBUG protocol 14776 21916 % sending keepalive ping
2023-06-25 21:22:21,208 DEBUG protocol 14776 21916 > PING a3 29 a2 cf [binary, 4 bytes]
2023-06-25 21:22:21,310 DEBUG protocol 14776 21916 < PONG a3 29 a2 cf [binary, 4 bytes]
2023-06-25 21:22:21,310 DEBUG protocol 14776 21916 % received keepalive pong
2023-06-25 21:22:21,556 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30397.75,"t":1...":1,"r":1687717341895}]' [118 bytes]
2023-06-25 21:22:21,556 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395.57,"t":1...":1,"r":1687717341895}]' [362 bytes]
2023-06-25 21:22:21,911 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.48,"t":1...":1,"r":1687717342250}]' [124 bytes]
2023-06-25 21:22:22,259 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.43,"t":1...":1,"r":1687717342587}]' [124 bytes]
2023-06-25 21:22:22,280 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413,"t":1687...":2,"r":1687717342620}]' [117 bytes]
2023-06-25 21:22:22,326 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413,"t":1687...":2,"r":1687717342666}]' [117 bytes]
2023-06-25 21:22:23,186 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.78,"t":1...":1,"r":1687717343525}]' [122 bytes]
2023-06-25 21:22:23,187 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.78,"t":1...":1,"r":1687717343525}]' [485 bytes]
2023-06-25 21:22:23,228 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30361,"t":1687...:23,"r":1687717343568}]' [147 bytes]
2023-06-25 21:22:23,393 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.62,"t":1...":1,"r":1687717343732}]' [124 bytes]
2023-06-25 21:22:23,757 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30391,"t":1687...":1,"r":1687717344095}]' [121 bytes]
2023-06-25 21:22:23,758 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30391,"t":1687...":1,"r":1687717344096}]' [482 bytes]
2023-06-25 21:22:23,776 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.63,"t":1...":1,"r":1687717344115}]' [124 bytes]
2023-06-25 21:22:23,776 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.49,"t":1...":1,"r":1687717344116}]' [124 bytes]
2023-06-25 21:22:23,829 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.47,"t":1...":1,"r":1687717344167}]' [124 bytes]
2023-06-25 21:22:23,830 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30384.1,"t":16...:23,"r":1687717344170}]' [151 bytes]
2023-06-25 21:22:23,860 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.47,"t":1...":1,"r":1687717344200}]' [124 bytes]
2023-06-25 21:22:23,982 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.02,"t":1...":1,"r":1687717344321}]' [124 bytes]
2023-06-25 21:22:23,982 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.38,"t":1...":1,"r":1687717344322}]' [124 bytes]
2023-06-25 21:22:24,259 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.98,"t":1...":1,"r":1687717344599}]' [121 bytes]
2023-06-25 21:22:24,260 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.99,"t":1...":1,"r":1687717344599}]' [365 bytes]
2023-06-25 21:22:25,582 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.26,"t":1...":1,"r":1687717345921}]' [124 bytes]
2023-06-25 21:22:26,012 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:22:26,012 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:22:26,414 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.43,"t":1...":1,"r":1687717346753}]' [124 bytes]
2023-06-25 21:22:28,027 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.72,"t":1...":1,"r":1687717348366}]' [124 bytes]
2023-06-25 21:22:28,065 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.71,"t":1...":1,"r":1687717348404}]' [123 bytes]
2023-06-25 21:22:28,081 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.71,"t":1...":1,"r":1687717348421}]' [123 bytes]
2023-06-25 21:22:28,082 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.72,"t":1...":1,"r":1687717348421}]' [364 bytes]
2023-06-25 21:22:28,107 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30361.4,"t":16...:23,"r":1687717348446}]' [149 bytes]
2023-06-25 21:22:28,662 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.17,"t":1...":1,"r":1687717349002}]' [124 bytes]
2023-06-25 21:22:29,390 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30391.13,"t":1...":1,"r":1687717349729}]' [123 bytes]
2023-06-25 21:22:29,439 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30391.13,"t":1...":1,"r":1687717349778}]' [124 bytes]
2023-06-25 21:22:30,187 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.43,"t":1...":1,"r":1687717350527}]' [124 bytes]
2023-06-25 21:22:30,187 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.43,"t":1...":1,"r":1687717350527}]' [728 bytes]
2023-06-25 21:22:30,188 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.19,"t":1...":1,"r":1687717350528}]' [245 bytes]
2023-06-25 21:22:30,188 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.14,"t":1...":1,"r":1687717350528}]' [246 bytes]
2023-06-25 21:22:30,900 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30383.59,"t":1...":1,"r":1687717351239}]' [124 bytes]
2023-06-25 21:22:31,012 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:22:31,012 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:22:31,217 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.26,"t":1...":1,"r":1687717351553}]' [124 bytes]
2023-06-25 21:22:31,492 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30384.43,"t":1...":1,"r":1687717351832}]' [121 bytes]
2023-06-25 21:22:31,988 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30361.7,"t":16...:23,"r":1687717352327}]' [151 bytes]
2023-06-25 21:22:31,988 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30361.7,"t":16...:23,"r":1687717352327}]' [151 bytes]
2023-06-25 21:22:33,517 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.21,"t":1...":1,"r":1687717353856}]' [245 bytes]
2023-06-25 21:22:34,130 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.23,"t":1...":1,"r":1687717354469}]' [124 bytes]
2023-06-25 21:22:34,754 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30361.7,"t":16...:23,"r":1687717355094}]' [151 bytes]
2023-06-25 21:22:34,754 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30361.7,"t":16...:23,"r":1687717355094}]' [592 bytes]
2023-06-25 21:22:35,053 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.56,"t":1...":1,"r":1687717355393}]' [124 bytes]
2023-06-25 21:22:36,011 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:22:36,011 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:22:36,101 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.26,"t":1...":1,"r":1687717356421}]' [124 bytes]
2023-06-25 21:22:36,200 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.87,"t":1...":1,"r":1687717356540}]' [122 bytes]
2023-06-25 21:22:36,201 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.78,"t":1...":1,"r":1687717356540}]' [969 bytes]
2023-06-25 21:22:36,970 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.59,"t":1...":1,"r":1687717357310}]' [124 bytes]
2023-06-25 21:22:37,515 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.04,"t":1...":1,"r":1687717357854}]' [124 bytes]
2023-06-25 21:22:37,590 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.65,"t":1...":1,"r":1687717357930}]' [122 bytes]
2023-06-25 21:22:37,693 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.02,"t":1...":1,"r":1687717358033}]' [118 bytes]
2023-06-25 21:22:37,694 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.8,"t":16...":1,"r":1687717358033}]' [243 bytes]
2023-06-25 21:22:37,720 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30361.8,"t":16...:23,"r":1687717358059}]' [149 bytes]
2023-06-25 21:22:37,720 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30365.1,"t":16...:23,"r":1687717358059}]' [150 bytes]
2023-06-25 21:22:37,830 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.65,"t":1...":1,"r":1687717358169}]' [124 bytes]
2023-06-25 21:22:38,633 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.96,"t":1...":1,"r":1687717358973}]' [124 bytes]
2023-06-25 21:22:38,869 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.42,"t":1...":1,"r":1687717359208}]' [124 bytes]
2023-06-25 21:22:38,979 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.48,"t":1...":1,"r":1687717359319}]' [122 bytes]
2023-06-25 21:22:38,979 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.48,"t":1...":1,"r":1687717359319}]' [124 bytes]
2023-06-25 21:22:39,070 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.43,"t":1...":1,"r":1687717359409}]' [124 bytes]
2023-06-25 21:22:39,260 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394,"t":1687...":6,"r":1687717359600}]' [121 bytes]
2023-06-25 21:22:39,378 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.43,"t":1...":1,"r":1687717359717}]' [122 bytes]
2023-06-25 21:22:39,425 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.42,"t":1...":1,"r":1687717359765}]' [124 bytes]
2023-06-25 21:22:39,767 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395,"t":1687...":6,"r":1687717360107}]' [121 bytes]
2023-06-25 21:22:39,967 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.43,"t":1...":1,"r":1687717360307}]' [124 bytes]
2023-06-25 21:22:39,979 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395,"t":1687...":6,"r":1687717360319}]' [121 bytes]
2023-06-25 21:22:39,992 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396,"t":1687...":6,"r":1687717360332}]' [121 bytes]
2023-06-25 21:22:40,484 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.42,"t":1...":1,"r":1687717360823}]' [124 bytes]
2023-06-25 21:22:40,576 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30397,"t":1687...":6,"r":1687717360915}]' [121 bytes]
2023-06-25 21:22:40,587 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30397,"t":1687...":6,"r":1687717360926}]' [121 bytes]
2023-06-25 21:22:40,590 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30397,"t":1687...":6,"r":1687717360929}]' [121 bytes]
2023-06-25 21:22:40,962 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.43,"t":1...":1,"r":1687717361301}]' [124 bytes]
2023-06-25 21:22:40,962 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.43,"t":1...":1,"r":1687717361301}]' [247 bytes]
2023-06-25 21:22:40,964 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.68,"t":1...":1,"r":1687717361304}]' [121 bytes]
2023-06-25 21:22:40,965 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.68,"t":1...":1,"r":1687717361304}]' [120 bytes]
2023-06-25 21:22:40,967 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.68,"t":1...":1,"r":1687717361307}]' [121 bytes]
2023-06-25 21:22:40,973 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.68,"t":1...":1,"r":1687717361313}]' [124 bytes]
2023-06-25 21:22:41,012 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:22:41,012 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:22:41,161 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406,"t":1687...":2,"r":1687717361501}]' [117 bytes]
2023-06-25 21:22:41,178 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.8,"t":16...":1,"r":1687717361518}]' [123 bytes]
2023-06-25 21:22:41,201 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406,"t":1687...":2,"r":1687717361542}]' [117 bytes]
2023-06-25 21:22:41,325 DEBUG protocol 14776 21916 % sending keepalive ping
2023-06-25 21:22:41,325 DEBUG protocol 14776 21916 > PING a4 17 3a f8 [binary, 4 bytes]
2023-06-25 21:22:41,429 DEBUG protocol 14776 21916 < PONG a4 17 3a f8 [binary, 4 bytes]
2023-06-25 21:22:41,430 DEBUG protocol 14776 21916 % received keepalive pong
2023-06-25 21:22:41,967 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30397.17,"t":1...":1,"r":1687717362307}]' [124 bytes]
2023-06-25 21:22:42,843 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400,"t":1687...":6,"r":1687717363183}]' [120 bytes]
2023-06-25 21:22:42,852 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.98,"t":1...":1,"r":1687717363192}]' [245 bytes]
2023-06-25 21:22:43,293 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.04,"t":1...":1,"r":1687717363633}]' [124 bytes]
2023-06-25 21:22:43,455 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395.52,"t":1...":1,"r":1687717363795}]' [119 bytes]
2023-06-25 21:22:43,542 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395.82,"t":1...":1,"r":1687717363882}]' [124 bytes]
2023-06-25 21:22:44,038 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395.51,"t":1...":1,"r":1687717364378}]' [122 bytes]
2023-06-25 21:22:44,038 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395.52,"t":1...":1,"r":1687717364378}]' [124 bytes]
2023-06-25 21:22:44,693 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.93,"t":1...":1,"r":1687717365033}]' [124 bytes]
2023-06-25 21:22:44,693 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.06,"t":1...":1,"r":1687717365033}]' [366 bytes]
2023-06-25 21:22:44,735 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30362.2,"t":16...:23,"r":1687717365075}]' [149 bytes]
2023-06-25 21:22:44,908 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398,"t":1687...":6,"r":1687717365248}]' [121 bytes]
2023-06-25 21:22:45,050 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30362.6,"t":16...:23,"r":1687717365389}]' [149 bytes]
2023-06-25 21:22:45,050 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30372.5,"t":16...:23,"r":1687717365389}]' [747 bytes]
2023-06-25 21:22:45,352 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.72,"t":1...":1,"r":1687717365692}]' [124 bytes]
2023-06-25 21:22:46,011 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:22:46,011 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:22:46,188 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.09,"t":1...":1,"r":1687717366528}]' [124 bytes]
2023-06-25 21:22:47,273 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.73,"t":1...":1,"r":1687717367612}]' [124 bytes]
2023-06-25 21:22:47,748 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409,"t":1687...":2,"r":1687717368089}]' [117 bytes]
2023-06-25 21:22:47,811 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409,"t":1687...":2,"r":1687717368151}]' [117 bytes]
2023-06-25 21:22:48,390 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.33,"t":1...":1,"r":1687717368729}]' [124 bytes]
2023-06-25 21:22:48,967 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.72,"t":1...":1,"r":1687717369307}]' [123 bytes]
2023-06-25 21:22:49,215 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.57,"t":1...":1,"r":1687717369527}]' [123 bytes]
2023-06-25 21:22:49,697 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30416,"t":1687...":2,"r":1687717370037}]' [122 bytes]
2023-06-25 21:22:49,739 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30416,"t":1687...":2,"r":1687717370080}]' [122 bytes]
2023-06-25 21:22:51,011 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:22:51,011 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:22:51,207 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.32,"t":1...":1,"r":1687717371547}]' [121 bytes]
2023-06-25 21:22:51,504 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.97,"t":1...":1,"r":1687717371844}]' [124 bytes]
2023-06-25 21:22:51,504 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.96,"t":1...":1,"r":1687717371844}]' [846 bytes]
2023-06-25 21:22:51,609 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30363.6,"t":16...:23,"r":1687717371949}]' [297 bytes]
2023-06-25 21:22:53,336 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30419,"t":1687...":2,"r":1687717373677}]' [116 bytes]
2023-06-25 21:22:53,383 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30419,"t":1687...":2,"r":1687717373724}]' [116 bytes]
2023-06-25 21:22:53,412 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.57,"t":1...":1,"r":1687717373753}]' [123 bytes]
2023-06-25 21:22:54,454 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.83,"t":1...":1,"r":1687717374794}]' [123 bytes]
2023-06-25 21:22:54,614 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.57,"t":1...":1,"r":1687717374954}]' [124 bytes]
2023-06-25 21:22:54,958 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.68,"t":1...":1,"r":1687717375297}]' [124 bytes]
2023-06-25 21:22:54,988 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30364,"t":1687...:23,"r":1687717375329}]' [147 bytes]
2023-06-25 21:22:55,038 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30380.8,"t":16...:23,"r":1687717375378}]' [151 bytes]
2023-06-25 21:22:55,526 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.65,"t":1...":1,"r":1687717375866}]' [120 bytes]
2023-06-25 21:22:56,011 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:22:56,011 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:22:56,393 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.44,"t":1...":1,"r":1687717376733}]' [124 bytes]
2023-06-25 21:22:56,938 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.75,"t":1...":1,"r":1687717377279}]' [124 bytes]
2023-06-25 21:22:56,959 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.97,"t":1...":1,"r":1687717377299}]' [123 bytes]
2023-06-25 21:22:57,222 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.85,"t":1...":1,"r":1687717377561}]' [121 bytes]
2023-06-25 21:22:57,609 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.69,"t":1...":1,"r":1687717377949}]' [124 bytes]
2023-06-25 21:22:57,789 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.9,"t":16...":1,"r":1687717378129}]' [120 bytes]
2023-06-25 21:22:57,789 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.68,"t":1...":1,"r":1687717378129}]' [122 bytes]
2023-06-25 21:22:57,813 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30380.8,"t":16...:23,"r":1687717378154}]' [149 bytes]
2023-06-25 21:22:57,949 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.91,"t":1...":1,"r":1687717378289}]' [122 bytes]
2023-06-25 21:22:58,809 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.3,"t":16...":1,"r":1687717379150}]' [122 bytes]
2023-06-25 21:22:58,822 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.3,"t":16...":1,"r":1687717379162}]' [123 bytes]
2023-06-25 21:22:58,950 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.3,"t":16...":1,"r":1687717379291}]' [123 bytes]
2023-06-25 21:22:59,823 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.37,"t":1...":1,"r":1687717380163}]' [124 bytes]
2023-06-25 21:22:59,876 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.88,"t":1...":1,"r":1687717380216}]' [124 bytes]
2023-06-25 21:22:59,877 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.88,"t":1...":1,"r":1687717380216}]' [124 bytes]
2023-06-25 21:23:01,011 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:23:01,011 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:23:01,397 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.88,"t":1...":1,"r":1687717381737}]' [124 bytes]
2023-06-25 21:23:01,433 DEBUG protocol 14776 21916 % sending keepalive ping
2023-06-25 21:23:01,433 DEBUG protocol 14776 21916 > PING 97 0d 9f df [binary, 4 bytes]
2023-06-25 21:23:01,535 DEBUG protocol 14776 21916 < PONG 97 0d 9f df [binary, 4 bytes]
2023-06-25 21:23:01,535 DEBUG protocol 14776 21916 % received keepalive pong
2023-06-25 21:23:02,176 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.45,"t":1...":1,"r":1687717382516}]' [124 bytes]
2023-06-25 21:23:02,198 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.42,"t":1...":1,"r":1687717382539}]' [124 bytes]
2023-06-25 21:23:03,188 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.28,"t":1...":1,"r":1687717383529}]' [124 bytes]
2023-06-25 21:23:03,195 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.28,"t":1...":1,"r":1687717383536}]' [124 bytes]
2023-06-25 21:23:03,393 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.84,"t":1...":1,"r":1687717383733}]' [124 bytes]
2023-06-25 21:23:03,758 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.67,"t":1...":1,"r":1687717384099}]' [122 bytes]
2023-06-25 21:23:03,759 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.67,"t":1...":1,"r":1687717384099}]' [241 bytes]
2023-06-25 21:23:04,086 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.91,"t":1...":1,"r":1687717384426}]' [124 bytes]
2023-06-25 21:23:04,086 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.2,"t":16...":1,"r":1687717384426}]' [123 bytes]
2023-06-25 21:23:04,126 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.2,"t":16...:23,"r":1687717384466}]' [299 bytes]
2023-06-25 21:23:04,437 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409,"t":1687...":6,"r":1687717384777}]' [121 bytes]
2023-06-25 21:23:04,454 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.6,"t":16...:23,"r":1687717384794}]' [299 bytes]
2023-06-25 21:23:04,728 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.32,"t":1...":1,"r":1687717385068}]' [124 bytes]
2023-06-25 21:23:04,938 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.47,"t":1...":1,"r":1687717385278}]' [124 bytes]
2023-06-25 21:23:05,042 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30422,"t":1687...":2,"r":1687717385383}]' [235 bytes]
2023-06-25 21:23:05,104 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30422,"t":1687...":2,"r":1687717385444}]' [117 bytes]
2023-06-25 21:23:05,159 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30422,"t":1687...":2,"r":1687717385499}]' [119 bytes]
2023-06-25 21:23:05,230 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382,"t":1687...:23,"r":1687717385570}]' [297 bytes]
2023-06-25 21:23:05,230 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.8,"t":16...:23,"r":1687717385570}]' [151 bytes]
2023-06-25 21:23:05,413 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.69,"t":1...":1,"r":1687717385746}]' [124 bytes]
2023-06-25 21:23:05,462 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.32,"t":1...":1,"r":1687717385802}]' [118 bytes]
2023-06-25 21:23:05,871 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.62,"t":1...":1,"r":1687717386212}]' [118 bytes]
2023-06-25 21:23:05,872 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.63,"t":1...":1,"r":1687717386212}]' [845 bytes]
2023-06-25 21:23:05,875 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.73,"t":1...":1,"r":1687717386216}]' [122 bytes]
2023-06-25 21:23:05,875 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.91,"t":1...":1,"r":1687717386216}]' [484 bytes]
2023-06-25 21:23:05,897 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382.4,"t":16...:23,"r":1687717386238}]' [292 bytes]
2023-06-25 21:23:05,898 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.8,"t":16...:23,"r":1687717386238}]' [151 bytes]
2023-06-25 21:23:06,011 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:23:06,011 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:23:06,101 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.5,"t":16...":1,"r":1687717386441}]' [121 bytes]
2023-06-25 21:23:06,101 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.5,"t":16...":1,"r":1687717386442}]' [243 bytes]
2023-06-25 21:23:07,272 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421,"t":1687...":2,"r":1687717387613}]' [122 bytes]
2023-06-25 21:23:07,347 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421,"t":1687...":2,"r":1687717387687}]' [122 bytes]
2023-06-25 21:23:07,553 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.42,"t":1...":1,"r":1687717387894}]' [124 bytes]
2023-06-25 21:23:07,906 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.25,"t":1...":1,"r":1687717388246}]' [122 bytes]
2023-06-25 21:23:07,907 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.29,"t":1...":1,"r":1687717388246}]' [124 bytes]
2023-06-25 21:23:08,385 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.92,"t":1...":1,"r":1687717388727}]' [124 bytes]
2023-06-25 21:23:09,697 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415,"t":1687...":6,"r":1687717390038}]' [121 bytes]
2023-06-25 21:23:10,122 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.58,"t":1...":1,"r":1687717390463}]' [123 bytes]
2023-06-25 21:23:10,237 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.15,"t":1...":1,"r":1687717390577}]' [118 bytes]
2023-06-25 21:23:10,262 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.63,"t":1...":1,"r":1687717390602}]' [124 bytes]
2023-06-25 21:23:10,293 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.05,"t":1...":1,"r":1687717390633}]' [123 bytes]
2023-06-25 21:23:10,764 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.62,"t":1...":1,"r":1687717391105}]' [123 bytes]
2023-06-25 21:23:10,830 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.61,"t":1...":1,"r":1687717391171}]' [122 bytes]
2023-06-25 21:23:10,831 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.61,"t":1...":1,"r":1687717391171}]' [245 bytes]
2023-06-25 21:23:10,832 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.62,"t":1...":1,"r":1687717391173}]' [124 bytes]
2023-06-25 21:23:10,893 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.3,"t":16...:23,"r":1687717391233}]' [301 bytes]
2023-06-25 21:23:11,011 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:23:11,011 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:23:11,040 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.61,"t":1...":1,"r":1687717391380}]' [124 bytes]
2023-06-25 21:23:11,370 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.86,"t":1...":1,"r":1687717391710}]' [124 bytes]
2023-06-25 21:23:11,371 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.62,"t":1...":1,"r":1687717391710}]' [121 bytes]
2023-06-25 21:23:11,371 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.15,"t":1...":1,"r":1687717391710}]' [247 bytes]
2023-06-25 21:23:11,785 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.7,"t":16...":1,"r":1687717392021}]' [123 bytes]
2023-06-25 21:23:11,889 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.38,"t":1...":1,"r":1687717392220}]' [124 bytes]
2023-06-25 21:23:11,890 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.38,"t":1...":1,"r":1687717392220}]' [124 bytes]
2023-06-25 21:23:12,149 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.3,"t":16...":1,"r":1687717392490}]' [123 bytes]
2023-06-25 21:23:12,346 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.4,"t":16...:23,"r":1687717392686}]' [151 bytes]
2023-06-25 21:23:12,346 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382.5,"t":16...:23,"r":1687717392686}]' [294 bytes]
2023-06-25 21:23:14,223 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405,"t":1687...":6,"r":1687717394564}]' [121 bytes]
2023-06-25 21:23:14,233 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405,"t":1687...":6,"r":1687717394573}]' [121 bytes]
2023-06-25 21:23:14,264 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405,"t":1687...":6,"r":1687717394604}]' [121 bytes]
2023-06-25 21:23:14,446 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.48,"t":1...":1,"r":1687717394787}]' [124 bytes]
2023-06-25 21:23:14,871 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382.8,"t":16...:23,"r":1687717395211}]' [298 bytes]
2023-06-25 21:23:16,011 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:23:16,011 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:23:17,022 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.23,"t":1...":1,"r":1687717397363}]' [124 bytes]
2023-06-25 21:23:17,022 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.02,"t":1...":1,"r":1687717397363}]' [366 bytes]
2023-06-25 21:23:17,058 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.18,"t":1...":1,"r":1687717397395}]' [124 bytes]
2023-06-25 21:23:17,126 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406,"t":1687...":6,"r":1687717397467}]' [121 bytes]
2023-06-25 21:23:17,268 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.67,"t":1...":1,"r":1687717397610}]' [123 bytes]
2023-06-25 21:23:18,757 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382.8,"t":16...:23,"r":1687717399098}]' [150 bytes]
2023-06-25 21:23:18,971 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.5,"t":16...":1,"r":1687717399311}]' [117 bytes]
2023-06-25 21:23:20,294 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.43,"t":1...":1,"r":1687717400626}]' [119 bytes]
2023-06-25 21:23:20,294 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.43,"t":1...":1,"r":1687717400630}]' [118 bytes]
2023-06-25 21:23:20,298 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.75,"t":1...":1,"r":1687717400636}]' [122 bytes]
2023-06-25 21:23:20,298 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.53,"t":1...":1,"r":1687717400637}]' [245 bytes]
2023-06-25 21:23:20,319 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.34,"t":1...":1,"r":1687717400659}]' [123 bytes]
2023-06-25 21:23:20,397 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.34,"t":1...":1,"r":1687717400737}]' [123 bytes]
2023-06-25 21:23:20,397 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.34,"t":1...":1,"r":1687717400737}]' [122 bytes]
2023-06-25 21:23:20,419 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.34,"t":1...":1,"r":1687717400760}]' [119 bytes]
2023-06-25 21:23:20,585 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.25,"t":1...":1,"r":1687717400926}]' [124 bytes]
2023-06-25 21:23:20,794 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.6,"t":16...":1,"r":1687717401134}]' [122 bytes]
2023-06-25 21:23:21,011 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:23:21,011 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:23:21,075 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.24,"t":1...":1,"r":1687717401416}]' [124 bytes]
2023-06-25 21:23:21,075 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.01,"t":1...":1,"r":1687717401416}]' [124 bytes]
2023-06-25 21:23:21,547 DEBUG protocol 14776 21916 % sending keepalive ping
2023-06-25 21:23:21,547 DEBUG protocol 14776 21916 > PING b5 70 8e 51 [binary, 4 bytes]
2023-06-25 21:23:21,648 DEBUG protocol 14776 21916 < PONG b5 70 8e 51 [binary, 4 bytes]
2023-06-25 21:23:21,648 DEBUG protocol 14776 21916 % received keepalive pong
2023-06-25 21:23:22,237 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.03,"t":1...":1,"r":1687717402578}]' [124 bytes]
2023-06-25 21:23:22,447 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.03,"t":1...":1,"r":1687717402787}]' [363 bytes]
2023-06-25 21:23:22,448 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.59,"t":1...":1,"r":1687717402787}]' [124 bytes]
2023-06-25 21:23:22,493 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407,"t":1687...":6,"r":1687717402833}]' [118 bytes]
2023-06-25 21:23:22,741 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.29,"t":1...":1,"r":1687717403081}]' [124 bytes]
2023-06-25 21:23:22,886 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.29,"t":1...":1,"r":1687717403228}]' [124 bytes]
2023-06-25 21:23:22,907 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.22,"t":1...":1,"r":1687717403248}]' [122 bytes]
2023-06-25 21:23:23,710 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.74,"t":1...":1,"r":1687717404051}]' [124 bytes]
2023-06-25 21:23:23,711 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.74,"t":1...":1,"r":1687717404051}]' [124 bytes]
2023-06-25 21:23:23,998 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.9,"t":16...":1,"r":1687717404338}]' [123 bytes]
2023-06-25 21:23:23,998 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.91,"t":1...":1,"r":1687717404339}]' [245 bytes]
2023-06-25 21:23:24,046 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.46,"t":1...":1,"r":1687717404387}]' [122 bytes]
2023-06-25 21:23:24,303 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403,"t":1687...":6,"r":1687717404643}]' [121 bytes]
2023-06-25 21:23:24,312 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404,"t":1687...":6,"r":1687717404652}]' [121 bytes]
2023-06-25 21:23:24,357 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.6,"t":16...":1,"r":1687717404697}]' [121 bytes]
2023-06-25 21:23:24,358 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.66,"t":1...":1,"r":1687717404697}]' [245 bytes]
2023-06-25 21:23:24,657 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.32,"t":1...":1,"r":1687717404998}]' [124 bytes]
2023-06-25 21:23:25,501 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411,"t":1687...":6,"r":1687717405842}]' [118 bytes]
2023-06-25 21:23:25,764 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.47,"t":1...":1,"r":1687717406104}]' [123 bytes]
2023-06-25 21:23:26,017 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:23:26,017 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:23:26,200 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406,"t":1687...":1,"r":1687717406541}]' [121 bytes]
2023-06-25 21:23:26,851 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415,"t":1687...":6,"r":1687717407192}]' [121 bytes]
2023-06-25 21:23:27,274 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.2,"t":16...":1,"r":1687717407615}]' [123 bytes]
2023-06-25 21:23:27,515 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415,"t":1687...":6,"r":1687717407856}]' [121 bytes]
2023-06-25 21:23:27,787 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.18,"t":1...":1,"r":1687717408128}]' [124 bytes]
2023-06-25 21:23:28,694 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.19,"t":1...":1,"r":1687717409031}]' [123 bytes]
2023-06-25 21:23:29,047 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407,"t":1687...":6,"r":1687717409388}]' [121 bytes]
2023-06-25 21:23:29,556 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.51,"t":1...":1,"r":1687717409896}]' [124 bytes]
2023-06-25 21:23:30,691 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.47,"t":1...":1,"r":1687717411033}]' [124 bytes]
2023-06-25 21:23:30,919 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.47,"t":1...":1,"r":1687717411259}]' [245 bytes]
2023-06-25 21:23:30,920 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.03,"t":1...":1,"r":1687717411259}]' [600 bytes]
2023-06-25 21:23:31,010 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:23:31,011 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:23:31,416 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.56,"t":1...":1,"r":1687717411749}]' [122 bytes]
2023-06-25 21:23:31,416 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.55,"t":1...":1,"r":1687717411749}]' [119 bytes]
2023-06-25 21:23:31,469 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.55,"t":1...":1,"r":1687717411809}]' [124 bytes]
2023-06-25 21:23:31,621 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.36,"t":1...":1,"r":1687717411962}]' [123 bytes]
2023-06-25 21:23:31,623 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.36,"t":1...":1,"r":1687717411964}]' [123 bytes]
2023-06-25 21:23:31,874 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.54,"t":1...":1,"r":1687717412216}]' [124 bytes]
2023-06-25 21:23:32,037 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415,"t":1687...":2,"r":1687717412375}]' [117 bytes]
2023-06-25 21:23:32,037 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412,"t":1687...":2,"r":1687717412375}]' [117 bytes]
2023-06-25 21:23:32,100 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415,"t":1687...":2,"r":1687717412440}]' [233 bytes]
2023-06-25 21:23:32,447 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.65,"t":1...":1,"r":1687717412788}]' [124 bytes]
2023-06-25 21:23:32,790 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.63,"t":1...":1,"r":1687717413131}]' [124 bytes]
2023-06-25 21:23:32,826 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.63,"t":1...":1,"r":1687717413167}]' [124 bytes]
2023-06-25 21:23:32,959 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399,"t":1687...":6,"r":1687717413300}]' [121 bytes]
2023-06-25 21:23:33,018 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.57,"t":1...":1,"r":1687717413358}]' [122 bytes]
2023-06-25 21:23:33,019 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.39,"t":1...":1,"r":1687717413358}]' [122 bytes]
2023-06-25 21:23:33,199 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.01,"t":1...":1,"r":1687717413540}]' [124 bytes]
2023-06-25 21:23:33,209 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.01,"t":1...":1,"r":1687717413550}]' [124 bytes]
2023-06-25 21:23:33,338 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390,"t":1687...":1,"r":1687717413675}]' [121 bytes]
2023-06-25 21:23:33,345 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390,"t":1687...":1,"r":1687717413685}]' [121 bytes]
2023-06-25 21:23:33,404 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.45,"t":1...":1,"r":1687717413744}]' [122 bytes]
2023-06-25 21:23:33,405 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.06,"t":1...":1,"r":1687717413744}]' [122 bytes]
2023-06-25 21:23:33,490 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.26,"t":1...":1,"r":1687717413830}]' [124 bytes]
2023-06-25 21:23:34,641 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.06,"t":1...":1,"r":1687717414982}]' [124 bytes]
2023-06-25 21:23:34,642 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.06,"t":1...":1,"r":1687717414982}]' [488 bytes]
2023-06-25 21:23:36,010 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:23:36,010 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:23:36,194 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.16,"t":1...":1,"r":1687717416536}]' [124 bytes]
2023-06-25 21:23:36,633 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.1,"t":16...":1,"r":1687717416974}]' [120 bytes]
2023-06-25 21:23:37,204 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.84,"t":1...":1,"r":1687717417545}]' [124 bytes]
2023-06-25 21:23:37,241 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382.5,"t":16...:23,"r":1687717417582}]' [147 bytes]
2023-06-25 21:23:37,279 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.77,"t":1...":1,"r":1687717417620}]' [123 bytes]
2023-06-25 21:23:37,787 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.74,"t":1...":1,"r":1687717418128}]' [124 bytes]
2023-06-25 21:23:37,923 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406,"t":1687...":2,"r":1687717418265}]' [117 bytes]
2023-06-25 21:23:37,992 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406,"t":1687...":2,"r":1687717418334}]' [117 bytes]
2023-06-25 21:23:38,087 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30383.65,"t":1...":1,"r":1687717418428}]' [121 bytes]
2023-06-25 21:23:38,088 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30383.64,"t":1...":1,"r":1687717418429}]' [364 bytes]
2023-06-25 21:23:38,342 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30383.6,"t":16...":1,"r":1687717418683}]' [122 bytes]
2023-06-25 21:23:38,486 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30383.04,"t":1...":1,"r":1687717418828}]' [124 bytes]
2023-06-25 21:23:38,488 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30383.04,"t":1...":1,"r":1687717418830}]' [124 bytes]
2023-06-25 21:23:39,218 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.27,"t":1...":1,"r":1687717419558}]' [124 bytes]
2023-06-25 21:23:39,449 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30384.87,"t":1...":1,"r":1687717419789}]' [123 bytes]
2023-06-25 21:23:39,473 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.27,"t":1...":1,"r":1687717419814}]' [124 bytes]
2023-06-25 21:23:39,473 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30384.11,"t":1...":1,"r":1687717419814}]' [124 bytes]
2023-06-25 21:23:39,993 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.23,"t":1...":1,"r":1687717420334}]' [124 bytes]
2023-06-25 21:23:40,108 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387,"t":1687...":6,"r":1687717420450}]' [118 bytes]
2023-06-25 21:23:40,668 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382.4,"t":16...:23,"r":1687717421009}]' [295 bytes]
2023-06-25 21:23:40,668 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382,"t":1687...:23,"r":1687717421009}]' [297 bytes]
2023-06-25 21:23:40,690 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30380.5,"t":16...:23,"r":1687717421031}]' [151 bytes]
2023-06-25 21:23:40,691 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30370.6,"t":16...:23,"r":1687717421031}]' [594 bytes]
2023-06-25 21:23:41,005 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.83,"t":1...":1,"r":1687717421346}]' [121 bytes]
2023-06-25 21:23:41,005 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.79,"t":1...":1,"r":1687717421347}]' [242 bytes]
2023-06-25 21:23:41,006 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30380.94,"t":1...":1,"r":1687717421347}]' [973 bytes]
2023-06-25 21:23:41,010 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:23:41,010 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:23:41,653 DEBUG protocol 14776 21916 % sending keepalive ping
2023-06-25 21:23:41,653 DEBUG protocol 14776 21916 > PING bc 15 96 7a [binary, 4 bytes]
2023-06-25 21:23:41,755 DEBUG protocol 14776 21916 < PONG bc 15 96 7a [binary, 4 bytes]
2023-06-25 21:23:41,755 DEBUG protocol 14776 21916 % received keepalive pong
2023-06-25 21:23:41,942 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30383.44,"t":1...":1,"r":1687717422284}]' [124 bytes]
2023-06-25 21:23:42,209 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30383.44,"t":1...":1,"r":1687717422551}]' [124 bytes]
2023-06-25 21:23:42,904 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386,"t":1687...":6,"r":1687717423245}]' [118 bytes]
2023-06-25 21:23:43,800 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.85,"t":1...":1,"r":1687717424140}]' [124 bytes]
2023-06-25 21:23:43,940 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.29,"t":1...":1,"r":1687717424281}]' [124 bytes]
2023-06-25 21:23:44,379 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30384.39,"t":1...":1,"r":1687717424719}]' [124 bytes]
2023-06-25 21:23:44,386 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30375.4,"t":16...:23,"r":1687717424728}]' [151 bytes]
2023-06-25 21:23:44,386 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30366.4,"t":16...:23,"r":1687717424728}]' [151 bytes]
2023-06-25 21:23:44,444 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.7,"t":16...:23,"r":1687717424786}]' [151 bytes]
2023-06-25 21:23:45,085 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.61,"t":1...":1,"r":1687717425426}]' [124 bytes]
2023-06-25 21:23:45,729 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30375.5,"t":16...:23,"r":1687717426070}]' [151 bytes]
2023-06-25 21:23:45,741 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.02,"t":1...":1,"r":1687717426083}]' [123 bytes]
2023-06-25 21:23:46,010 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:23:46,011 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:23:46,068 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382.77,"t":1...":1,"r":1687717426409}]' [122 bytes]
2023-06-25 21:23:46,069 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382.77,"t":1...":1,"r":1687717426409}]' [124 bytes]
2023-06-25 21:23:46,442 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30383.59,"t":1...":1,"r":1687717426783}]' [124 bytes]
2023-06-25 21:23:46,768 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.43,"t":1...":1,"r":1687717427109}]' [119 bytes]
2023-06-25 21:23:46,856 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30380,"t":1687...":1,"r":1687717427197}]' [121 bytes]
2023-06-25 21:23:47,148 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382.96,"t":1...":1,"r":1687717427487}]' [124 bytes]
2023-06-25 21:23:47,220 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382.96,"t":1...":1,"r":1687717427562}]' [124 bytes]
2023-06-25 21:23:48,812 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382.89,"t":1...":1,"r":1687717429153}]' [124 bytes]
2023-06-25 21:23:48,950 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.08,"t":1...":1,"r":1687717429292}]' [121 bytes]
2023-06-25 21:23:48,970 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.09,"t":1...":1,"r":1687717429311}]' [124 bytes]
2023-06-25 21:23:49,171 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.03,"t":1...":1,"r":1687717429513}]' [124 bytes]
2023-06-25 21:23:49,172 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.02,"t":1...":1,"r":1687717429513}]' [364 bytes]
2023-06-25 21:23:49,172 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386,"t":1687...":1,"r":1687717429513}]' [242 bytes]
2023-06-25 21:23:50,356 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.83,"t":1...":1,"r":1687717430697}]' [121 bytes]
2023-06-25 21:23:50,366 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.83,"t":1...":1,"r":1687717430708}]' [123 bytes]
2023-06-25 21:23:50,392 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.83,"t":1...":1,"r":1687717430733}]' [121 bytes]
2023-06-25 21:23:50,534 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.6,"t":16...":1,"r":1687717430869}]' [123 bytes]
2023-06-25 21:23:51,011 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:23:51,011 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:23:51,144 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.47,"t":1...":1,"r":1687717431485}]' [124 bytes]
2023-06-25 21:23:52,013 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.8,"t":16...":1,"r":1687717432355}]' [123 bytes]
2023-06-25 21:23:52,385 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.86,"t":1...":1,"r":1687717432726}]' [124 bytes]
2023-06-25 21:23:52,402 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.87,"t":1...":1,"r":1687717432743}]' [122 bytes]
2023-06-25 21:23:52,402 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.85,"t":1...":1,"r":1687717432743}]' [124 bytes]
2023-06-25 21:23:52,415 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.88,"t":1...":1,"r":1687717432757}]' [124 bytes]
2023-06-25 21:23:52,426 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.88,"t":1...":1,"r":1687717432768}]' [124 bytes]
2023-06-25 21:23:52,427 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.85,"t":1...":1,"r":1687717432768}]' [124 bytes]
2023-06-25 21:23:53,010 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.54,"t":1...":1,"r":1687717433352}]' [121 bytes]
2023-06-25 21:23:53,961 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.23,"t":1...":1,"r":1687717434302}]' [119 bytes]
2023-06-25 21:23:53,962 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.22,"t":1...":1,"r":1687717434302}]' [124 bytes]
2023-06-25 21:23:54,479 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.81,"t":1...":1,"r":1687717434821}]' [124 bytes]
2023-06-25 21:23:54,785 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.41,"t":1...":1,"r":1687717435126}]' [123 bytes]
2023-06-25 21:23:54,857 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.39,"t":1...":1,"r":1687717435199}]' [124 bytes]
2023-06-25 21:23:54,873 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.4,"t":16...":1,"r":1687717435215}]' [123 bytes]
2023-06-25 21:23:54,874 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.39,"t":1...":1,"r":1687717435215}]' [124 bytes]
2023-06-25 21:23:54,882 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.39,"t":1...":1,"r":1687717435224}]' [124 bytes]
2023-06-25 21:23:54,894 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.39,"t":1...":1,"r":1687717435236}]' [124 bytes]
2023-06-25 21:23:54,982 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.84,"t":1...":1,"r":1687717435324}]' [124 bytes]
2023-06-25 21:23:54,983 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.39,"t":1...":1,"r":1687717435324}]' [124 bytes]
2023-06-25 21:23:55,121 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389,"t":1687...":6,"r":1687717435462}]' [121 bytes]
2023-06-25 21:23:55,163 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389,"t":1687...":6,"r":1687717435505}]' [121 bytes]
2023-06-25 21:23:55,299 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.4,"t":16...":1,"r":1687717435640}]' [121 bytes]
2023-06-25 21:23:55,300 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.39,"t":1...":1,"r":1687717435640}]' [368 bytes]
2023-06-25 21:23:55,306 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.41,"t":1...":1,"r":1687717435647}]' [122 bytes]
2023-06-25 21:23:55,598 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.33,"t":1...":1,"r":1687717435938}]' [122 bytes]
2023-06-25 21:23:55,598 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.32,"t":1...":1,"r":1687717435938}]' [243 bytes]
2023-06-25 21:23:56,010 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:23:56,010 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:23:56,529 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.41,"t":1...":1,"r":1687717436871}]' [123 bytes]
2023-06-25 21:23:56,530 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.88,"t":1...":1,"r":1687717436871}]' [123 bytes]
2023-06-25 21:23:57,167 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.44,"t":1...":1,"r":1687717437509}]' [123 bytes]
2023-06-25 21:23:58,971 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.46,"t":1...":1,"r":1687717439314}]' [123 bytes]
2023-06-25 21:24:00,184 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.64,"t":1...":1,"r":1687717440525}]' [124 bytes]
2023-06-25 21:24:00,299 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.33,"t":1...":1,"r":1687717440641}]' [124 bytes]
2023-06-25 21:24:00,395 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.64,"t":1...":1,"r":1687717440736}]' [124 bytes]
2023-06-25 21:24:00,422 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.64,"t":1...":1,"r":1687717440763}]' [124 bytes]
2023-06-25 21:24:00,857 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.61,"t":1...":1,"r":1687717441199}]' [124 bytes]
2023-06-25 21:24:01,010 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:24:01,010 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:24:01,168 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.7,"t":16...:23,"r":1687717441510}]' [147 bytes]
2023-06-25 21:24:01,766 DEBUG protocol 14776 21916 % sending keepalive ping
2023-06-25 21:24:01,766 DEBUG protocol 14776 21916 > PING 26 6c 98 ae [binary, 4 bytes]
2023-06-25 21:24:01,810 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.7,"t":16...:23,"r":1687717442152}]' [151 bytes]
2023-06-25 21:24:01,867 DEBUG protocol 14776 21916 < PONG 26 6c 98 ae [binary, 4 bytes]
2023-06-25 21:24:01,867 DEBUG protocol 14776 21916 % received keepalive pong
2023-06-25 21:24:01,930 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.62,"t":1...":1,"r":1687717442271}]' [124 bytes]
2023-06-25 21:24:02,809 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.65,"t":1...":1,"r":1687717443151}]' [120 bytes]
2023-06-25 21:24:02,824 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.65,"t":1...":1,"r":1687717443166}]' [123 bytes]
2023-06-25 21:24:02,970 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30391.69,"t":1...":1,"r":1687717443311}]' [117 bytes]
2023-06-25 21:24:02,970 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30391.98,"t":1...":1,"r":1687717443312}]' [118 bytes]
2023-06-25 21:24:03,898 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.81,"t":1...":1,"r":1687717444239}]' [118 bytes]
2023-06-25 21:24:05,021 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.46,"t":1...":1,"r":1687717445362}]' [124 bytes]
2023-06-25 21:24:05,029 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.82,"t":1...":1,"r":1687717445371}]' [124 bytes]
2023-06-25 21:24:05,524 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.74,"t":1...":1,"r":1687717445865}]' [124 bytes]
2023-06-25 21:24:05,771 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.58,"t":1...":1,"r":1687717446113}]' [124 bytes]
2023-06-25 21:24:05,866 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.74,"t":1...":1,"r":1687717446208}]' [124 bytes]
2023-06-25 21:24:05,867 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.74,"t":1...":1,"r":1687717446208}]' [1092 bytes]
2023-06-25 21:24:06,009 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:24:06,009 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:24:06,384 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.19,"t":1...":1,"r":1687717446726}]' [124 bytes]
2023-06-25 21:24:06,564 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.16,"t":1...":1,"r":1687717446905}]' [122 bytes]
2023-06-25 21:24:06,617 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.15,"t":1...":1,"r":1687717446959}]' [124 bytes]
2023-06-25 21:24:06,618 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.16,"t":1...":1,"r":1687717446959}]' [485 bytes]
2023-06-25 21:24:06,652 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.18,"t":1...":1,"r":1687717446994}]' [124 bytes]
2023-06-25 21:24:07,229 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.72,"t":1...":1,"r":1687717447569}]' [124 bytes]
2023-06-25 21:24:07,233 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30397.1,"t":16...":1,"r":1687717447576}]' [123 bytes]
2023-06-25 21:24:07,438 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.79,"t":1...":1,"r":1687717447779}]' [124 bytes]
2023-06-25 21:24:08,109 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30397.09,"t":1...":1,"r":1687717448452}]' [123 bytes]
2023-06-25 21:24:10,107 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.78,"t":1...":1,"r":1687717450449}]' [123 bytes]
2023-06-25 21:24:10,569 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.79,"t":1...":1,"r":1687717450911}]' [124 bytes]
2023-06-25 21:24:10,604 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30397.89,"t":1...":1,"r":1687717450946}]' [122 bytes]
2023-06-25 21:24:10,605 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30397.89,"t":1...":1,"r":1687717450946}]' [604 bytes]
2023-06-25 21:24:11,010 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:24:11,010 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:24:11,358 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401,"t":1687...":6,"r":1687717451700}]' [118 bytes]
2023-06-25 21:24:11,837 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.5,"t":16...":1,"r":1687717452180}]' [122 bytes]
2023-06-25 21:24:12,321 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.52,"t":1...":1,"r":1687717452662}]' [124 bytes]
2023-06-25 21:24:12,335 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.91,"t":1...":1,"r":1687717452676}]' [124 bytes]
2023-06-25 21:24:12,335 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.91,"t":1...":1,"r":1687717452676}]' [246 bytes]
2023-06-25 21:24:12,343 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.9,"t":16...":1,"r":1687717452685}]' [123 bytes]
2023-06-25 21:24:12,497 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30397.93,"t":1...":1,"r":1687717452838}]' [124 bytes]
2023-06-25 21:24:12,969 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.63,"t":1...":1,"r":1687717453312}]' [124 bytes]
2023-06-25 21:24:13,191 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.7,"t":16...:23,"r":1687717453534}]' [151 bytes]
2023-06-25 21:24:14,016 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395.51,"t":1...":1,"r":1687717454358}]' [124 bytes]
2023-06-25 21:24:15,547 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395.49,"t":1...":1,"r":1687717455889}]' [123 bytes]
2023-06-25 21:24:15,846 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395.49,"t":1...":1,"r":1687717456187}]' [118 bytes]
2023-06-25 21:24:15,846 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395.5,"t":16...":1,"r":1687717456187}]' [123 bytes]
2023-06-25 21:24:16,009 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:24:16,010 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:24:17,015 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395.5,"t":16...":1,"r":1687717457357}]' [123 bytes]
2023-06-25 21:24:17,048 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395.49,"t":1...":1,"r":1687717457390}]' [124 bytes]
2023-06-25 21:24:17,440 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.28,"t":1...":1,"r":1687717457781}]' [124 bytes]
2023-06-25 21:24:17,627 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401,"t":1687...":6,"r":1687717457970}]' [118 bytes]
2023-06-25 21:24:17,945 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30397.94,"t":1...":1,"r":1687717458287}]' [124 bytes]
2023-06-25 21:24:18,054 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30397.95,"t":1...":1,"r":1687717458391}]' [124 bytes]
2023-06-25 21:24:18,354 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30397.54,"t":1...":1,"r":1687717458696}]' [124 bytes]
2023-06-25 21:24:18,640 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.25,"t":1...":1,"r":1687717458982}]' [122 bytes]
2023-06-25 21:24:18,640 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.01,"t":1...":1,"r":1687717458982}]' [245 bytes]
2023-06-25 21:24:19,236 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.9,"t":16...":1,"r":1687717459578}]' [123 bytes]
2023-06-25 21:24:19,291 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395.93,"t":1...":1,"r":1687717459633}]' [118 bytes]
2023-06-25 21:24:19,574 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.14,"t":1...":1,"r":1687717459909}]' [124 bytes]
2023-06-25 21:24:19,730 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.54,"t":1...":1,"r":1687717460072}]' [123 bytes]
2023-06-25 21:24:19,775 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.54,"t":1...":1,"r":1687717460116}]' [124 bytes]
2023-06-25 21:24:19,775 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.54,"t":1...":1,"r":1687717460116}]' [123 bytes]
2023-06-25 21:24:19,994 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.15,"t":1...":1,"r":1687717460336}]' [122 bytes]
2023-06-25 21:24:19,994 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.14,"t":1...":1,"r":1687717460336}]' [122 bytes]
2023-06-25 21:24:20,116 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.69,"t":1...":1,"r":1687717460459}]' [124 bytes]
2023-06-25 21:24:21,009 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:24:21,009 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:24:21,362 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.93,"t":1...":1,"r":1687717461704}]' [123 bytes]
2023-06-25 21:24:21,888 DEBUG protocol 14776 21916 % sending keepalive ping
2023-06-25 21:24:21,888 DEBUG protocol 14776 21916 > PING af 31 a3 a8 [binary, 4 bytes]
2023-06-25 21:24:21,982 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.93,"t":1...":1,"r":1687717462324}]' [123 bytes]
2023-06-25 21:24:21,990 DEBUG protocol 14776 21916 < PONG af 31 a3 a8 [binary, 4 bytes]
2023-06-25 21:24:21,990 DEBUG protocol 14776 21916 % received keepalive pong
2023-06-25 21:24:22,175 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.93,"t":1...":1,"r":1687717462517}]' [124 bytes]
2023-06-25 21:24:22,495 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.93,"t":1...":1,"r":1687717462838}]' [124 bytes]
2023-06-25 21:24:22,541 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.93,"t":1...":1,"r":1687717462882}]' [124 bytes]
2023-06-25 21:24:22,541 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.15,"t":1...":1,"r":1687717462882}]' [245 bytes]
2023-06-25 21:24:22,877 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.65,"t":1...":1,"r":1687717463220}]' [123 bytes]
2023-06-25 21:24:22,919 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.65,"t":1...":1,"r":1687717463261}]' [124 bytes]
2023-06-25 21:24:23,719 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.92,"t":1...":1,"r":1687717464052}]' [122 bytes]
2023-06-25 21:24:23,719 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.03,"t":1...":1,"r":1687717464052}]' [124 bytes]
2023-06-25 21:24:23,911 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.55,"t":1...":1,"r":1687717464253}]' [124 bytes]
2023-06-25 21:24:23,939 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30391.28,"t":1...":1,"r":1687717464281}]' [123 bytes]
2023-06-25 21:24:23,939 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30391.27,"t":1...":1,"r":1687717464281}]' [124 bytes]
2023-06-25 21:24:25,052 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.5,"t":16...:23,"r":1687717465394}]' [301 bytes]
2023-06-25 21:24:25,053 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.5,"t":16...:23,"r":1687717465394}]' [1319 bytes]
2023-06-25 21:24:25,053 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.5,"t":16...:23,"r":1687717465394}]' [151 bytes]
2023-06-25 21:24:25,053 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.5,"t":16...:23,"r":1687717465394}]' [151 bytes]
2023-06-25 21:24:25,053 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.5,"t":16...:23,"r":1687717465394}]' [295 bytes]
2023-06-25 21:24:25,053 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.5,"t":16...:23,"r":1687717465394}]' [144 bytes]
2023-06-25 21:24:25,054 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.5,"t":16...:23,"r":1687717465394}]' [150 bytes]
2023-06-25 21:24:25,054 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.5,"t":16...:23,"r":1687717465394}]' [151 bytes]
2023-06-25 21:24:25,054 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.5,"t":16...:23,"r":1687717465394}]' [151 bytes]
2023-06-25 21:24:25,054 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.5,"t":16...:23,"r":1687717465394}]' [146 bytes]
2023-06-25 21:24:25,054 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.6,"t":16...:23,"r":1687717465394}]' [151 bytes]
2023-06-25 21:24:25,054 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.7,"t":16...:23,"r":1687717465394}]' [150 bytes]
2023-06-25 21:24:25,054 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.7,"t":16...:23,"r":1687717465394}]' [145 bytes]
2023-06-25 21:24:25,155 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.7,"t":16...:23,"r":1687717465394}]' [146 bytes]
2023-06-25 21:24:25,155 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.7,"t":16...:23,"r":1687717465394}]' [293 bytes]
2023-06-25 21:24:25,155 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382.5,"t":16...:23,"r":1687717465394}]' [447 bytes]
2023-06-25 21:24:25,155 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382.8,"t":16...:23,"r":1687717465394}]' [146 bytes]
2023-06-25 21:24:25,155 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30382.8,"t":16...:23,"r":1687717465394}]' [145 bytes]
2023-06-25 21:24:25,155 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30383.2,"t":16...:23,"r":1687717465394}]' [149 bytes]
2023-06-25 21:24:25,155 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30383.8,"t":16...:23,"r":1687717465394}]' [147 bytes]
2023-06-25 21:24:25,156 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30384.5,"t":16...:23,"r":1687717465394}]' [151 bytes]
2023-06-25 21:24:25,156 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30384.9,"t":16...:23,"r":1687717465394}]' [151 bytes]
2023-06-25 21:24:25,156 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.1,"t":16...:23,"r":1687717465394}]' [151 bytes]
2023-06-25 21:24:25,156 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.4,"t":16...:23,"r":1687717465394}]' [151 bytes]
2023-06-25 21:24:25,156 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.4,"t":16...:23,"r":1687717465394}]' [301 bytes]
2023-06-25 21:24:25,156 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.8,"t":16...:23,"r":1687717465394}]' [151 bytes]
2023-06-25 21:24:25,156 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.9,"t":16...:23,"r":1687717465394}]' [146 bytes]
2023-06-25 21:24:25,156 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.4,"t":16...:23,"r":1687717465394}]' [151 bytes]
2023-06-25 21:24:25,156 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30386.5,"t":16...:23,"r":1687717465394}]' [151 bytes]
2023-06-25 21:24:25,156 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.2,"t":16...:23,"r":1687717465394}]' [151 bytes]
2023-06-25 21:24:25,156 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.2,"t":16...:23,"r":1687717465394}]' [151 bytes]
2023-06-25 21:24:25,156 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.2,"t":16...:23,"r":1687717465394}]' [151 bytes]
2023-06-25 21:24:25,157 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.4,"t":16...:23,"r":1687717465394}]' [151 bytes]
2023-06-25 21:24:25,157 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388,"t":1687...:23,"r":1687717465394}]' [149 bytes]
2023-06-25 21:24:25,157 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389,"t":1687...:23,"r":1687717465394}]' [145 bytes]
2023-06-25 21:24:25,157 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.9,"t":16...:23,"r":1687717465394}]' [296 bytes]
2023-06-25 21:24:25,157 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.1,"t":16...:23,"r":1687717465394}]' [151 bytes]
2023-06-25 21:24:26,009 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:24:26,009 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:24:26,311 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.73,"t":1...":1,"r":1687717466652}]' [124 bytes]
2023-06-25 21:24:27,381 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30392.44,"t":1...":1,"r":1687717467723}]' [123 bytes]
2023-06-25 21:24:28,640 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.75,"t":1...":1,"r":1687717468983}]' [117 bytes]
2023-06-25 21:24:28,641 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.75,"t":1...":1,"r":1687717468983}]' [237 bytes]
2023-06-25 21:24:28,650 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.75,"t":1...":1,"r":1687717468993}]' [122 bytes]
2023-06-25 21:24:29,477 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.4,"t":16...:23,"r":1687717469819}]' [148 bytes]
2023-06-25 21:24:29,594 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.84,"t":1...":1,"r":1687717469937}]' [123 bytes]
2023-06-25 21:24:29,803 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.84,"t":1...":1,"r":1687717470145}]' [123 bytes]
2023-06-25 21:24:29,870 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.84,"t":1...":1,"r":1687717470211}]' [124 bytes]
2023-06-25 21:24:30,279 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.84,"t":1...":1,"r":1687717470621}]' [124 bytes]
2023-06-25 21:24:30,310 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.84,"t":1...":1,"r":1687717470653}]' [122 bytes]
2023-06-25 21:24:31,009 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:24:31,009 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:24:31,479 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.83,"t":1...":1,"r":1687717471822}]' [124 bytes]
2023-06-25 21:24:32,116 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.84,"t":1...":1,"r":1687717472458}]' [120 bytes]
2023-06-25 21:24:33,869 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.49,"t":1...":1,"r":1687717474204}]' [124 bytes]
2023-06-25 21:24:33,869 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.48,"t":1...":1,"r":1687717474204}]' [123 bytes]
2023-06-25 21:24:33,972 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.43,"t":1...":1,"r":1687717474315}]' [123 bytes]
2023-06-25 21:24:35,560 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.42,"t":1...":1,"r":1687717475891}]' [118 bytes]
2023-06-25 21:24:35,560 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.9,"t":16...":1,"r":1687717475891}]' [362 bytes]
2023-06-25 21:24:35,828 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.95,"t":1...":1,"r":1687717476170}]' [118 bytes]
2023-06-25 21:24:35,849 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.68,"t":1...":1,"r":1687717476191}]' [120 bytes]
2023-06-25 21:24:35,851 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.84,"t":1...":1,"r":1687717476194}]' [121 bytes]
2023-06-25 21:24:35,854 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.84,"t":1...":1,"r":1687717476196}]' [118 bytes]
2023-06-25 21:24:35,855 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.84,"t":1...":1,"r":1687717476197}]' [124 bytes]
2023-06-25 21:24:35,859 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30397.1,"t":16...":1,"r":1687717476201}]' [118 bytes]
2023-06-25 21:24:35,860 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30397.1,"t":16...":1,"r":1687717476201}]' [122 bytes]
2023-06-25 21:24:35,872 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30397.86,"t":1...":1,"r":1687717476214}]' [124 bytes]
2023-06-25 21:24:36,009 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:24:36,009 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:24:36,349 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.42,"t":1...":1,"r":1687717476691}]' [122 bytes]
2023-06-25 21:24:36,349 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.06,"t":1...":1,"r":1687717476691}]' [124 bytes]
2023-06-25 21:24:36,547 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.04,"t":1...":1,"r":1687717476890}]' [124 bytes]
2023-06-25 21:24:36,623 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.04,"t":1...":1,"r":1687717476966}]' [123 bytes]
2023-06-25 21:24:37,385 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.38,"t":1...":1,"r":1687717477727}]' [122 bytes]
2023-06-25 21:24:37,710 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.09,"t":1...":1,"r":1687717478052}]' [123 bytes]
2023-06-25 21:24:37,710 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.09,"t":1...":1,"r":1687717478052}]' [361 bytes]
2023-06-25 21:24:37,711 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.94,"t":1...":1,"r":1687717478052}]' [123 bytes]
2023-06-25 21:24:37,899 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.5,"t":16...:23,"r":1687717478241}]' [297 bytes]
2023-06-25 21:24:38,674 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.92,"t":1...":1,"r":1687717479017}]' [124 bytes]
2023-06-25 21:24:39,363 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.89,"t":1...":1,"r":1687717479704}]' [122 bytes]
2023-06-25 21:24:39,363 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.91,"t":1...":1,"r":1687717479704}]' [124 bytes]
2023-06-25 21:24:39,688 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.36,"t":1...":1,"r":1687717480030}]' [124 bytes]
2023-06-25 21:24:39,993 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.39,"t":1...":1,"r":1687717480335}]' [124 bytes]
2023-06-25 21:24:41,010 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:24:41,010 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:24:41,467 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.83,"t":1...":1,"r":1687717481809}]' [123 bytes]
2023-06-25 21:24:41,846 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.52,"t":1...":1,"r":1687717482189}]' [122 bytes]
2023-06-25 21:24:41,847 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.52,"t":1...":1,"r":1687717482189}]' [604 bytes]
2023-06-25 21:24:41,993 DEBUG protocol 14776 21916 % sending keepalive ping
2023-06-25 21:24:41,993 DEBUG protocol 14776 21916 > PING 32 e1 f0 e6 [binary, 4 bytes]
2023-06-25 21:24:42,094 DEBUG protocol 14776 21916 < PONG 32 e1 f0 e6 [binary, 4 bytes]
2023-06-25 21:24:42,094 DEBUG protocol 14776 21916 % received keepalive pong
2023-06-25 21:24:42,293 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.49,"t":1...":1,"r":1687717482636}]' [124 bytes]
2023-06-25 21:24:42,742 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.9,"t":16...":1,"r":1687717483083}]' [123 bytes]
2023-06-25 21:24:43,878 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.4,"t":16...":1,"r":1687717484220}]' [123 bytes]
2023-06-25 21:24:44,049 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.36,"t":1...":1,"r":1687717484392}]' [122 bytes]
2023-06-25 21:24:44,050 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.37,"t":1...":1,"r":1687717484392}]' [245 bytes]
2023-06-25 21:24:45,361 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.39,"t":1...":1,"r":1687717485704}]' [124 bytes]
2023-06-25 21:24:46,009 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:24:46,009 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:24:46,292 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401,"t":1687...":6,"r":1687717486634}]' [121 bytes]
2023-06-25 21:24:46,301 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402,"t":1687...":6,"r":1687717486644}]' [121 bytes]
2023-06-25 21:24:47,056 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.36,"t":1...":1,"r":1687717487399}]' [124 bytes]
2023-06-25 21:24:47,575 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.36,"t":1...":1,"r":1687717487918}]' [124 bytes]
2023-06-25 21:24:47,607 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.36,"t":1...":1,"r":1687717487948}]' [122 bytes]
2023-06-25 21:24:47,928 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.56,"t":1...":1,"r":1687717488271}]' [124 bytes]
2023-06-25 21:24:48,649 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.01,"t":1...":1,"r":1687717488992}]' [124 bytes]
2023-06-25 21:24:48,917 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.01,"t":1...":1,"r":1687717489260}]' [123 bytes]
2023-06-25 21:24:51,009 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:24:51,009 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:24:51,847 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.74,"t":1...":1,"r":1687717492189}]' [124 bytes]
2023-06-25 21:24:52,037 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.74,"t":1...":1,"r":1687717492380}]' [124 bytes]
2023-06-25 21:24:52,450 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.19,"t":1...":1,"r":1687717492793}]' [120 bytes]
2023-06-25 21:24:53,247 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.5,"t":16...:23,"r":1687717493590}]' [151 bytes]
2023-06-25 21:24:53,317 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.6,"t":16...":1,"r":1687717493659}]' [122 bytes]
2023-06-25 21:24:53,619 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.61,"t":1...":1,"r":1687717493962}]' [124 bytes]
2023-06-25 21:24:54,088 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.63,"t":1...":1,"r":1687717494430}]' [124 bytes]
2023-06-25 21:24:54,299 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.51,"t":1...":1,"r":1687717494642}]' [124 bytes]
2023-06-25 21:24:55,462 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.97,"t":1...":1,"r":1687717495805}]' [124 bytes]
2023-06-25 21:24:55,630 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30381.4,"t":16...:23,"r":1687717495973}]' [294 bytes]
2023-06-25 21:24:55,631 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30379.4,"t":16...:23,"r":1687717495973}]' [1797 bytes]
2023-06-25 21:24:56,008 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:24:56,009 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:24:56,107 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.97,"t":1...":1,"r":1687717496450}]' [124 bytes]
2023-06-25 21:24:56,365 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.51,"t":1...":1,"r":1687717496708}]' [124 bytes]
2023-06-25 21:24:57,399 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.47,"t":1...":1,"r":1687717497742}]' [124 bytes]
2023-06-25 21:24:57,548 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.88,"t":1...":1,"r":1687717497891}]' [124 bytes]
2023-06-25 21:24:59,045 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.89,"t":1...":1,"r":1687717499388}]' [118 bytes]
2023-06-25 21:24:59,045 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.34,"t":1...":1,"r":1687717499388}]' [362 bytes]
2023-06-25 21:24:59,081 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.43,"t":1...":1,"r":1687717499424}]' [124 bytes]
2023-06-25 21:24:59,091 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.88,"t":1...":1,"r":1687717499433}]' [124 bytes]
2023-06-25 21:24:59,632 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.88,"t":1...":1,"r":1687717499976}]' [124 bytes]
2023-06-25 21:24:59,633 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.88,"t":1...":1,"r":1687717499976}]' [124 bytes]
2023-06-25 21:24:59,650 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.88,"t":1...":1,"r":1687717499993}]' [122 bytes]
2023-06-25 21:24:59,706 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.88,"t":1...":1,"r":1687717500047}]' [123 bytes]
2023-06-25 21:24:59,748 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.4,"t":16...":1,"r":1687717500090}]' [123 bytes]
2023-06-25 21:24:59,867 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.41,"t":1...":1,"r":1687717500210}]' [124 bytes]
2023-06-25 21:24:59,867 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30394.41,"t":1...":1,"r":1687717500210}]' [477 bytes]
2023-06-25 21:25:00,473 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395.27,"t":1...":1,"r":1687717500811}]' [122 bytes]
2023-06-25 21:25:00,473 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395.26,"t":1...":1,"r":1687717500811}]' [124 bytes]
2023-06-25 21:25:00,555 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395.57,"t":1...":1,"r":1687717500898}]' [124 bytes]
2023-06-25 21:25:00,617 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395.57,"t":1...":1,"r":1687717500960}]' [124 bytes]
2023-06-25 21:25:00,741 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395.6,"t":16...":1,"r":1687717501084}]' [122 bytes]
2023-06-25 21:25:01,009 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:25:01,009 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:25:01,414 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.43,"t":1...":1,"r":1687717501718}]' [123 bytes]
2023-06-25 21:25:01,537 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395.7,"t":16...":1,"r":1687717501880}]' [123 bytes]
2023-06-25 21:25:02,096 DEBUG protocol 14776 21916 % sending keepalive ping
2023-06-25 21:25:02,096 DEBUG protocol 14776 21916 > PING 0d ff f0 f4 [binary, 4 bytes]
2023-06-25 21:25:02,197 DEBUG protocol 14776 21916 < PONG 0d ff f0 f4 [binary, 4 bytes]
2023-06-25 21:25:02,197 DEBUG protocol 14776 21916 % received keepalive pong
2023-06-25 21:25:02,347 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.43,"t":1...":1,"r":1687717502690}]' [120 bytes]
2023-06-25 21:25:02,375 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396.43,"t":1...":1,"r":1687717502718}]' [123 bytes]
2023-06-25 21:25:02,564 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396,"t":1687...":6,"r":1687717502907}]' [116 bytes]
2023-06-25 21:25:02,580 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396,"t":1687...":6,"r":1687717502923}]' [121 bytes]
2023-06-25 21:25:02,581 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30396,"t":1687...":6,"r":1687717502924}]' [120 bytes]
2023-06-25 21:25:02,869 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.83,"t":1...":1,"r":1687717503212}]' [120 bytes]
2023-06-25 21:25:02,877 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.83,"t":1...":1,"r":1687717503220}]' [123 bytes]
2023-06-25 21:25:02,901 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.07,"t":1...":1,"r":1687717503245}]' [124 bytes]
2023-06-25 21:25:02,955 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398,"t":1687...":6,"r":1687717503299}]' [116 bytes]
2023-06-25 21:25:03,000 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398,"t":1687...":6,"r":1687717503343}]' [119 bytes]
2023-06-25 21:25:03,420 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399,"t":1687...":6,"r":1687717503763}]' [120 bytes]
2023-06-25 21:25:03,776 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.35,"t":1...":1,"r":1687717504119}]' [124 bytes]
2023-06-25 21:25:03,868 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30380.5,"t":16...:23,"r":1687717504211}]' [297 bytes]
2023-06-25 21:25:04,387 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.4,"t":16...":1,"r":1687717504730}]' [122 bytes]
2023-06-25 21:25:04,822 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.42,"t":1...":1,"r":1687717505165}]' [124 bytes]
2023-06-25 21:25:05,383 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.39,"t":1...":1,"r":1687717505727}]' [123 bytes]
2023-06-25 21:25:05,483 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.39,"t":1...":1,"r":1687717505826}]' [122 bytes]
2023-06-25 21:25:05,484 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.4,"t":16...":1,"r":1687717505826}]' [1222 bytes]
2023-06-25 21:25:05,520 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.83,"t":1...":1,"r":1687717505864}]' [124 bytes]
2023-06-25 21:25:05,743 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.79,"t":1...":1,"r":1687717506087}]' [120 bytes]
2023-06-25 21:25:05,760 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.79,"t":1...":1,"r":1687717506103}]' [124 bytes]
2023-06-25 21:25:05,762 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.79,"t":1...":1,"r":1687717506103}]' [365 bytes]
2023-06-25 21:25:05,762 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.93,"t":1...":1,"r":1687717506103}]' [363 bytes]
2023-06-25 21:25:05,767 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.94,"t":1...":1,"r":1687717506110}]' [124 bytes]
2023-06-25 21:25:05,773 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.14,"t":1...":1,"r":1687717506116}]' [120 bytes]
2023-06-25 21:25:05,776 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.14,"t":1...":1,"r":1687717506120}]' [120 bytes]
2023-06-25 21:25:05,782 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.14,"t":1...":1,"r":1687717506126}]' [120 bytes]
2023-06-25 21:25:06,008 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:25:06,009 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:25:06,181 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30380.5,"t":16...:23,"r":1687717506524}]' [151 bytes]
2023-06-25 21:25:06,389 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.69,"t":1...":1,"r":1687717506733}]' [122 bytes]
2023-06-25 21:25:06,391 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.36,"t":1...":1,"r":1687717506734}]' [247 bytes]
2023-06-25 21:25:06,560 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404,"t":1687...":6,"r":1687717506903}]' [120 bytes]
2023-06-25 21:25:06,578 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404,"t":1687...":6,"r":1687717506922}]' [121 bytes]
2023-06-25 21:25:06,594 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407,"t":1687...":6,"r":1687717506937}]' [115 bytes]
2023-06-25 21:25:06,594 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407,"t":1687...":6,"r":1687717506939}]' [120 bytes]
2023-06-25 21:25:07,344 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.05,"t":1...":1,"r":1687717507687}]' [124 bytes]
2023-06-25 21:25:07,389 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.35,"t":1...":1,"r":1687717507733}]' [122 bytes]
2023-06-25 21:25:07,446 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.04,"t":1...":1,"r":1687717507789}]' [124 bytes]
2023-06-25 21:25:07,458 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.58,"t":1...":1,"r":1687717507800}]' [124 bytes]
2023-06-25 21:25:07,459 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.04,"t":1...":1,"r":1687717507801}]' [124 bytes]
2023-06-25 21:25:07,606 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.79,"t":1...":1,"r":1687717507949}]' [122 bytes]
2023-06-25 21:25:07,607 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.79,"t":1...":1,"r":1687717507949}]' [602 bytes]
2023-06-25 21:25:07,710 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.86,"t":1...":1,"r":1687717508054}]' [123 bytes]
2023-06-25 21:25:08,389 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.54,"t":1...":1,"r":1687717508732}]' [122 bytes]
2023-06-25 21:25:08,389 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.54,"t":1...":1,"r":1687717508732}]' [122 bytes]
2023-06-25 21:25:08,744 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.02,"t":1...":1,"r":1687717509087}]' [124 bytes]
2023-06-25 21:25:09,123 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.01,"t":1...":1,"r":1687717509467}]' [124 bytes]
2023-06-25 21:25:09,383 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.01,"t":1...":1,"r":1687717509726}]' [123 bytes]
2023-06-25 21:25:09,836 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.02,"t":1...":1,"r":1687717510180}]' [124 bytes]
2023-06-25 21:25:10,193 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.07,"t":1...":1,"r":1687717510537}]' [119 bytes]
2023-06-25 21:25:10,193 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.07,"t":1...":1,"r":1687717510537}]' [124 bytes]
2023-06-25 21:25:10,384 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.03,"t":1...":1,"r":1687717510727}]' [120 bytes]
2023-06-25 21:25:10,782 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.36,"t":1...":1,"r":1687717511119}]' [122 bytes]
2023-06-25 21:25:11,008 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:25:11,008 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:25:11,213 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.72,"t":1...":1,"r":1687717511557}]' [118 bytes]
2023-06-25 21:25:11,213 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.71,"t":1...":1,"r":1687717511557}]' [123 bytes]
2023-06-25 21:25:11,385 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.46,"t":1...":1,"r":1687717511729}]' [123 bytes]
2023-06-25 21:25:11,394 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.46,"t":1...":1,"r":1687717511737}]' [123 bytes]
2023-06-25 21:25:11,395 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.46,"t":1...":1,"r":1687717511737}]' [733 bytes]
2023-06-25 21:25:11,422 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.58,"t":1...":1,"r":1687717511765}]' [121 bytes]
2023-06-25 21:25:11,432 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.58,"t":1...":1,"r":1687717511776}]' [121 bytes]
2023-06-25 21:25:11,489 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408,"t":1687...":2,"r":1687717511832}]' [232 bytes]
2023-06-25 21:25:11,543 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408,"t":1687...":2,"r":1687717511886}]' [116 bytes]
2023-06-25 21:25:11,543 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408,"t":1687...":2,"r":1687717511886}]' [117 bytes]
2023-06-25 21:25:12,177 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.48,"t":1...":1,"r":1687717512521}]' [123 bytes]
2023-06-25 21:25:12,262 INFO autoreload 14776 13304 C:\Users\Evert\Desktop\Django\monreal\trading\data_feed.py changed, reloading.
2023-06-25 21:25:12,544 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.18,"t":1...":1,"r":1687717512888}]' [122 bytes]
2023-06-25 21:25:12,544 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.19,"t":1...":1,"r":1687717512888}]' [124 bytes]
2023-06-25 21:25:12,724 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409,"t":1687...":6,"r":1687717513067}]' [121 bytes]
2023-06-25 21:25:12,923 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418,"t":1687...":2,"r":1687717513266}]' [117 bytes]
2023-06-25 21:25:12,967 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409,"t":1687...":6,"r":1687717513309}]' [121 bytes]
2023-06-25 21:25:13,014 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418,"t":1687...":2,"r":1687717513358}]' [117 bytes]
2023-06-25 21:25:13,607 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.24,"t":1...":1,"r":1687717513950}]' [124 bytes]
2023-06-25 21:25:14,677 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.45,"t":1...":1,"r":1687717515021}]' [124 bytes]
2023-06-25 21:25:15,477 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414,"t":1687...":6,"r":1687717515820}]' [118 bytes]
2023-06-25 21:25:15,528 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.51,"t":1...":1,"r":1687717515871}]' [124 bytes]
2023-06-25 21:25:16,010 DEBUG protocol 14776 21916 < PING '' [0 bytes]
2023-06-25 21:25:16,010 DEBUG protocol 14776 21916 > PONG '' [0 bytes]
2023-06-25 21:25:16,147 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.39,"t":1...":1,"r":1687717516490}]' [121 bytes]
2023-06-25 21:25:16,213 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.58,"t":1...":1,"r":1687717516552}]' [120 bytes]
2023-06-25 21:25:16,366 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.45,"t":1...":1,"r":1687717516709}]' [121 bytes]
2023-06-25 21:25:16,406 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.26,"t":1...":1,"r":1687717516750}]' [123 bytes]
2023-06-25 21:25:16,777 DEBUG protocol 14776 21916 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.14,"t":1...":1,"r":1687717517120}]' [124 bytes]
2023-06-25 21:25:55,956 INFO autoreload 22060 19052 Watching for file changes with StatReloader
2023-06-25 21:25:56,183 DEBUG proactor_events 22060 15808 Using proactor: IocpProactor
2023-06-25 21:25:56,186 DEBUG __init__ 22060 15808 connect: wss://socket.polygon.io/crypto
2023-06-25 21:25:56,352 DEBUG protocol 22060 15808 = connection is CONNECTING
2023-06-25 21:25:56,460 DEBUG client 22060 15808 > GET /crypto HTTP/1.1
2023-06-25 21:25:56,460 DEBUG client 22060 15808 > Host: socket.polygon.io
2023-06-25 21:25:56,460 DEBUG client 22060 15808 > Upgrade: websocket
2023-06-25 21:25:56,460 DEBUG client 22060 15808 > Connection: Upgrade
2023-06-25 21:25:56,460 DEBUG client 22060 15808 > Sec-WebSocket-Key: r2OeSu/6Yc0WJ3o8RYvE+Q==
2023-06-25 21:25:56,460 DEBUG client 22060 15808 > Sec-WebSocket-Version: 13
2023-06-25 21:25:56,460 DEBUG client 22060 15808 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:25:56,460 DEBUG client 22060 15808 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:25:56,664 DEBUG client 22060 15808 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:25:56,665 DEBUG client 22060 15808 < Server: nginx/1.19.2
2023-06-25 21:25:56,665 DEBUG client 22060 15808 < Date: Sun, 25 Jun 2023 18:25:57 GMT
2023-06-25 21:25:56,665 DEBUG client 22060 15808 < Connection: upgrade
2023-06-25 21:25:56,665 DEBUG client 22060 15808 < Upgrade: websocket
2023-06-25 21:25:56,665 DEBUG client 22060 15808 < Sec-WebSocket-Accept: vCxJQsMO1m0P/KnkPkZtw3lFARo=
2023-06-25 21:25:56,665 DEBUG client 22060 15808 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:25:56,665 DEBUG protocol 22060 15808 = connection is OPEN
2023-06-25 21:25:56,666 DEBUG protocol 22060 15808 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:25:56,666 DEBUG __init__ 22060 15808 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:25:56,666 DEBUG __init__ 22060 15808 authing...
2023-06-25 21:25:56,667 DEBUG protocol 22060 15808 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:25:56,773 DEBUG protocol 22060 15808 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:25:56,773 DEBUG __init__ 22060 15808 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:25:56,773 DEBUG __init__ 22060 15808 reconciling: set() {'XT.BTC-USD'}
2023-06-25 21:25:56,774 DEBUG __init__ 22060 15808 subbing: XT.BTC-USD
2023-06-25 21:25:56,774 DEBUG protocol 22060 15808 > TEXT '{"action": "subscribe", "params": "XT.BTC-USD"}' [47 bytes]
2023-06-25 21:25:56,876 DEBUG protocol 22060 15808 < TEXT '[{"ev":"status","status":"success","message":"s...ribed to: XT.BTC-USD"}]' [74 bytes]
2023-06-25 21:25:56,876 DEBUG __init__ 22060 15808 status: subscribed to: XT.BTC-USD
2023-06-25 21:25:57,097 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30426.57,"t":1...":1,"r":1687717557441}]' [124 bytes]
2023-06-25 21:25:59,243 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30426.28,"t":1...":1,"r":1687717559588}]' [118 bytes]
2023-06-25 21:25:59,244 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30426.28,"t":1...":1,"r":1687717559588}]' [124 bytes]
2023-06-25 21:25:59,788 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30426.94,"t":1...":1,"r":1687717560133}]' [124 bytes]
2023-06-25 21:26:00,703 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30426.94,"t":1...":1,"r":1687717561048}]' [123 bytes]
2023-06-25 21:26:00,810 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.5,"t":16...:23,"r":1687717561154}]' [299 bytes]
2023-06-25 21:26:00,811 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.5,"t":16...:23,"r":1687717561154}]' [301 bytes]
2023-06-25 21:26:00,933 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30426.94,"t":1...":1,"r":1687717561278}]' [124 bytes]
2023-06-25 21:26:01,665 DEBUG protocol 22060 15808 < PING '' [0 bytes]
2023-06-25 21:26:01,665 DEBUG protocol 22060 15808 > PONG '' [0 bytes]
2023-06-25 21:26:02,416 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30427.74,"t":1...":1,"r":1687717562760}]' [124 bytes]
2023-06-25 21:26:02,959 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30428.52,"t":1...":1,"r":1687717563302}]' [124 bytes]
2023-06-25 21:26:03,751 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30426.97,"t":1...":1,"r":1687717564096}]' [122 bytes]
2023-06-25 21:26:03,752 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30426.97,"t":1...":1,"r":1687717564096}]' [838 bytes]
2023-06-25 21:26:04,399 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30425.9,"t":16...":1,"r":1687717564744}]' [123 bytes]
2023-06-25 21:26:04,947 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30425.99,"t":1...":1,"r":1687717565291}]' [124 bytes]
2023-06-25 21:26:06,526 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30428.69,"t":1...":1,"r":1687717566870}]' [118 bytes]
2023-06-25 21:26:06,526 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30428.69,"t":1...":1,"r":1687717566870}]' [123 bytes]
2023-06-25 21:26:06,664 DEBUG protocol 22060 15808 < PING '' [0 bytes]
2023-06-25 21:26:06,664 DEBUG protocol 22060 15808 > PONG '' [0 bytes]
2023-06-25 21:26:07,672 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30429,"t":1687...":6,"r":1687717568016}]' [121 bytes]
2023-06-25 21:26:07,935 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30429.26,"t":1...":1,"r":1687717568280}]' [123 bytes]
2023-06-25 21:26:08,366 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30429.25,"t":1...":1,"r":1687717568710}]' [240 bytes]
2023-06-25 21:26:08,521 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30427.27,"t":1...":1,"r":1687717568866}]' [124 bytes]
2023-06-25 21:26:09,269 DEBUG proactor_events 4600 3408 Using proactor: IocpProactor
2023-06-25 21:26:09,272 DEBUG __init__ 4600 3408 connect: wss://socket.polygon.io/crypto
2023-06-25 21:26:09,295 DEBUG functional 4600 4024 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-25 21:26:09,295 DEBUG functional 4600 4024 
def backend_cleanup():
    return 1

2023-06-25 21:26:09,296 DEBUG functional 4600 4024 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-25 21:26:09,296 DEBUG functional 4600 4024 
def xmap(task, it):
    return 1

2023-06-25 21:26:09,296 DEBUG functional 4600 4024 
def chain(*args, **kwargs):
    return 1

2023-06-25 21:26:09,297 DEBUG functional 4600 4024 
def debug_task(self):
    return 1

2023-06-25 21:26:09,297 DEBUG functional 4600 4024 
def xstarmap(task, it):
    return 1

2023-06-25 21:26:09,297 DEBUG functional 4600 4024 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-25 21:26:09,298 DEBUG functional 4600 4024 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-25 21:26:09,298 DEBUG functional 4600 4024 
def chunks(task, it, n):
    return 1

2023-06-25 21:26:09,298 DEBUG functional 4600 4024 
def get_current_buy_price(symbol):
    return 1

2023-06-25 21:26:09,394 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30426.03,"t":1...":1,"r":1687717569739}]' [124 bytes]
2023-06-25 21:26:09,495 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.9,"t":16...:23,"r":1687717569838}]' [296 bytes]
2023-06-25 21:26:09,495 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.1,"t":16...:23,"r":1687717569838}]' [1620 bytes]
2023-06-25 21:26:09,495 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414.2,"t":16...:23,"r":1687717569838}]' [151 bytes]
2023-06-25 21:26:09,495 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414.3,"t":16...:23,"r":1687717569838}]' [146 bytes]
2023-06-25 21:26:09,495 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414.4,"t":16...:23,"r":1687717569838}]' [441 bytes]
2023-06-25 21:26:09,496 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30416,"t":1687...:23,"r":1687717569838}]' [149 bytes]
2023-06-25 21:26:09,519 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30426.03,"t":1...":1,"r":1687717569864}]' [124 bytes]
2023-06-25 21:26:09,525 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30426.03,"t":1...":1,"r":1687717569870}]' [124 bytes]
2023-06-25 21:26:10,294 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30426.02,"t":1...":1,"r":1687717570638}]' [123 bytes]
2023-06-25 21:26:10,295 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30426.02,"t":1...":1,"r":1687717570638}]' [608 bytes]
2023-06-25 21:26:10,953 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30426.02,"t":1...":1,"r":1687717571297}]' [124 bytes]
2023-06-25 21:26:11,221 DEBUG proactor_events 8788 16072 Using proactor: IocpProactor
2023-06-25 21:26:11,224 DEBUG __init__ 8788 16072 connect: wss://socket.polygon.io/crypto
2023-06-25 21:26:11,233 DEBUG proactor_events 16196 10248 Using proactor: IocpProactor
2023-06-25 21:26:11,236 DEBUG __init__ 16196 10248 connect: wss://socket.polygon.io/crypto
2023-06-25 21:26:11,664 DEBUG protocol 22060 15808 < PING '' [0 bytes]
2023-06-25 21:26:11,664 DEBUG protocol 22060 15808 > PONG '' [0 bytes]
2023-06-25 21:26:11,836 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30426.03,"t":1...":1,"r":1687717572182}]' [124 bytes]
2023-06-25 21:26:11,870 DEBUG protocol 22060 15808 < TEXT '[{"ev":"status","status":"max_connections","mes...onnections exceeded."}]' [96 bytes]
2023-06-25 21:26:11,870 DEBUG protocol 22060 15808 < CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:26:11,870 DEBUG protocol 22060 15808 = connection is CLOSING
2023-06-25 21:26:11,870 DEBUG protocol 22060 15808 > CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:26:11,870 DEBUG protocol 22060 15808 = connection is CLOSED
2023-06-25 21:26:11,870 DEBUG __init__ 22060 15808 status: Maximum number of connections exceeded.
2023-06-25 21:26:11,871 DEBUG protocol 22060 15808 x closing TCP connection
2023-06-25 21:26:11,871 DEBUG __init__ 22060 15808 connection closed (ERR): received 1008 (policy violation); then sent 1008 (policy violation)
2023-06-25 21:26:11,975 DEBUG protocol 22060 15808 = connection is CONNECTING
2023-06-25 21:26:12,081 DEBUG client 22060 15808 > GET /crypto HTTP/1.1
2023-06-25 21:26:12,081 DEBUG client 22060 15808 > Host: socket.polygon.io
2023-06-25 21:26:12,081 DEBUG client 22060 15808 > Upgrade: websocket
2023-06-25 21:26:12,081 DEBUG client 22060 15808 > Connection: Upgrade
2023-06-25 21:26:12,082 DEBUG client 22060 15808 > Sec-WebSocket-Key: yzT/jG0jXszZ3+YnHtyawA==
2023-06-25 21:26:12,082 DEBUG client 22060 15808 > Sec-WebSocket-Version: 13
2023-06-25 21:26:12,082 DEBUG client 22060 15808 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:26:12,082 DEBUG client 22060 15808 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:26:12,284 DEBUG client 22060 15808 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:26:12,284 DEBUG client 22060 15808 < Server: nginx/1.19.2
2023-06-25 21:26:12,284 DEBUG client 22060 15808 < Date: Sun, 25 Jun 2023 18:26:12 GMT
2023-06-25 21:26:12,284 DEBUG client 22060 15808 < Connection: upgrade
2023-06-25 21:26:12,284 DEBUG client 22060 15808 < Upgrade: websocket
2023-06-25 21:26:12,284 DEBUG client 22060 15808 < Sec-WebSocket-Accept: 7k9x4oL3AhqNyREiEeN+j+wg8wU=
2023-06-25 21:26:12,284 DEBUG client 22060 15808 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:26:12,284 DEBUG protocol 22060 15808 = connection is OPEN
2023-06-25 21:26:12,285 DEBUG protocol 22060 15808 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:26:12,285 DEBUG __init__ 22060 15808 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:26:12,285 DEBUG __init__ 22060 15808 authing...
2023-06-25 21:26:12,285 DEBUG protocol 22060 15808 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:26:12,388 DEBUG protocol 22060 15808 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:26:12,388 DEBUG __init__ 22060 15808 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:26:12,388 DEBUG __init__ 22060 15808 reconciling: set() {'XT.BTC-USD'}
2023-06-25 21:26:12,389 DEBUG __init__ 22060 15808 subbing: XT.BTC-USD
2023-06-25 21:26:12,389 DEBUG protocol 22060 15808 > TEXT '{"action": "subscribe", "params": "XT.BTC-USD"}' [47 bytes]
2023-06-25 21:26:12,491 DEBUG protocol 22060 15808 < TEXT '[{"ev":"status","status":"success","message":"s...ribed to: XT.BTC-USD"}]' [74 bytes]
2023-06-25 21:26:12,492 DEBUG __init__ 22060 15808 status: subscribed to: XT.BTC-USD
2023-06-25 21:26:12,795 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30423.96,"t":1...":1,"r":1687717573141}]' [118 bytes]
2023-06-25 21:26:12,796 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30423.96,"t":1...":1,"r":1687717573141}]' [123 bytes]
2023-06-25 21:26:13,067 DEBUG proactor_events 8032 17416 Using proactor: IocpProactor
2023-06-25 21:26:13,070 DEBUG __init__ 8032 17416 connect: wss://socket.polygon.io/crypto
2023-06-25 21:26:13,164 DEBUG proactor_events 22180 16752 Using proactor: IocpProactor
2023-06-25 21:26:13,167 DEBUG __init__ 22180 16752 connect: wss://socket.polygon.io/crypto
2023-06-25 21:26:13,760 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30423.96,"t":1...":1,"r":1687717574104}]' [118 bytes]
2023-06-25 21:26:13,760 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30423.96,"t":1...":1,"r":1687717574104}]' [124 bytes]
2023-06-25 21:26:14,751 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30423.96,"t":1...":1,"r":1687717575096}]' [124 bytes]
2023-06-25 21:26:15,490 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30426.23,"t":1...":1,"r":1687717575835}]' [124 bytes]
2023-06-25 21:26:15,716 DEBUG proactor_events 9744 18732 Using proactor: IocpProactor
2023-06-25 21:26:15,719 DEBUG __init__ 9744 18732 connect: wss://socket.polygon.io/crypto
2023-06-25 21:26:15,724 DEBUG proactor_events 10800 19344 Using proactor: IocpProactor
2023-06-25 21:26:15,727 DEBUG __init__ 10800 19344 connect: wss://socket.polygon.io/crypto
2023-06-25 21:26:15,892 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30429,"t":1687...":6,"r":1687717576236}]' [121 bytes]
2023-06-25 21:26:16,081 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30426.22,"t":1...":1,"r":1687717576426}]' [123 bytes]
2023-06-25 21:26:16,661 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30424.43,"t":1...":1,"r":1687717577006}]' [124 bytes]
2023-06-25 21:26:16,884 DEBUG protocol 22060 15808 < TEXT '[{"ev":"status","status":"max_connections","mes...onnections exceeded."}]' [96 bytes]
2023-06-25 21:26:16,884 DEBUG protocol 22060 15808 < CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:26:16,884 DEBUG protocol 22060 15808 = connection is CLOSING
2023-06-25 21:26:16,884 DEBUG protocol 22060 15808 > CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:26:16,884 DEBUG protocol 22060 15808 = connection is CLOSED
2023-06-25 21:26:16,884 DEBUG __init__ 22060 15808 status: Maximum number of connections exceeded.
2023-06-25 21:26:16,885 DEBUG protocol 22060 15808 x closing TCP connection
2023-06-25 21:26:16,885 DEBUG __init__ 22060 15808 connection closed (ERR): received 1008 (policy violation); then sent 1008 (policy violation)
2023-06-25 21:26:16,990 DEBUG protocol 22060 15808 = connection is CONNECTING
2023-06-25 21:26:17,095 DEBUG client 22060 15808 > GET /crypto HTTP/1.1
2023-06-25 21:26:17,095 DEBUG client 22060 15808 > Host: socket.polygon.io
2023-06-25 21:26:17,095 DEBUG client 22060 15808 > Upgrade: websocket
2023-06-25 21:26:17,095 DEBUG client 22060 15808 > Connection: Upgrade
2023-06-25 21:26:17,095 DEBUG client 22060 15808 > Sec-WebSocket-Key: U/1q2nh+0xzmIT33bCyvdA==
2023-06-25 21:26:17,095 DEBUG client 22060 15808 > Sec-WebSocket-Version: 13
2023-06-25 21:26:17,095 DEBUG client 22060 15808 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:26:17,095 DEBUG client 22060 15808 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:26:17,306 DEBUG client 22060 15808 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:26:17,306 DEBUG client 22060 15808 < Server: nginx/1.19.2
2023-06-25 21:26:17,306 DEBUG client 22060 15808 < Date: Sun, 25 Jun 2023 18:26:17 GMT
2023-06-25 21:26:17,306 DEBUG client 22060 15808 < Connection: upgrade
2023-06-25 21:26:17,306 DEBUG client 22060 15808 < Upgrade: websocket
2023-06-25 21:26:17,306 DEBUG client 22060 15808 < Sec-WebSocket-Accept: umnjNIZgWcXzCsusaSZxDM5Cw0E=
2023-06-25 21:26:17,306 DEBUG client 22060 15808 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:26:17,307 DEBUG protocol 22060 15808 = connection is OPEN
2023-06-25 21:26:17,307 DEBUG protocol 22060 15808 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:26:17,307 DEBUG __init__ 22060 15808 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:26:17,307 DEBUG __init__ 22060 15808 authing...
2023-06-25 21:26:17,307 DEBUG protocol 22060 15808 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:26:17,410 DEBUG protocol 22060 15808 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:26:17,410 DEBUG __init__ 22060 15808 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:26:17,410 DEBUG __init__ 22060 15808 reconciling: set() {'XT.BTC-USD'}
2023-06-25 21:26:17,411 DEBUG __init__ 22060 15808 subbing: XT.BTC-USD
2023-06-25 21:26:17,411 DEBUG protocol 22060 15808 > TEXT '{"action": "subscribe", "params": "XT.BTC-USD"}' [47 bytes]
2023-06-25 21:26:17,514 DEBUG protocol 22060 15808 < TEXT '[{"ev":"status","status":"success","message":"s...ribed to: XT.BTC-USD"}]' [74 bytes]
2023-06-25 21:26:17,514 DEBUG __init__ 22060 15808 status: subscribed to: XT.BTC-USD
2023-06-25 21:26:17,712 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30423.06,"t":1...":1,"r":1687717578056}]' [123 bytes]
2023-06-25 21:26:17,994 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421.73,"t":1...":1,"r":1687717578339}]' [122 bytes]
2023-06-25 21:26:17,995 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421.7,"t":16...":1,"r":1687717578340}]' [365 bytes]
2023-06-25 21:26:17,998 DEBUG proactor_events 13540 11888 Using proactor: IocpProactor
2023-06-25 21:26:18,001 DEBUG __init__ 13540 11888 connect: wss://socket.polygon.io/crypto
2023-06-25 21:26:18,062 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421.51,"t":1...":1,"r":1687717578406}]' [124 bytes]
2023-06-25 21:26:18,634 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421.51,"t":1...":1,"r":1687717578978}]' [122 bytes]
2023-06-25 21:26:18,634 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421.51,"t":1...":1,"r":1687717578978}]' [366 bytes]
2023-06-25 21:26:19,171 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30422.27,"t":1...":1,"r":1687717579516}]' [124 bytes]
2023-06-25 21:26:19,180 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30422.27,"t":1...":1,"r":1687717579525}]' [124 bytes]
2023-06-25 21:26:20,029 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30423.23,"t":1...":1,"r":1687717580374}]' [123 bytes]
2023-06-25 21:26:20,656 DEBUG protocol 22060 15808 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30423.33,"t":1...":1,"r":1687717580998}]' [123 bytes]
2023-06-25 21:27:49,063 INFO autoreload 22268 21644 Watching for file changes with StatReloader
2023-06-25 21:27:49,288 DEBUG proactor_events 22268 13044 Using proactor: IocpProactor
2023-06-25 21:27:49,291 DEBUG __init__ 22268 13044 connect: wss://socket.polygon.io/crypto
2023-06-25 21:27:49,454 DEBUG protocol 22268 13044 = connection is CONNECTING
2023-06-25 21:27:49,557 DEBUG client 22268 13044 > GET /crypto HTTP/1.1
2023-06-25 21:27:49,557 DEBUG client 22268 13044 > Host: socket.polygon.io
2023-06-25 21:27:49,557 DEBUG client 22268 13044 > Upgrade: websocket
2023-06-25 21:27:49,557 DEBUG client 22268 13044 > Connection: Upgrade
2023-06-25 21:27:49,557 DEBUG client 22268 13044 > Sec-WebSocket-Key: wYYhN/NNWcEU7MH38wh5HA==
2023-06-25 21:27:49,557 DEBUG client 22268 13044 > Sec-WebSocket-Version: 13
2023-06-25 21:27:49,557 DEBUG client 22268 13044 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:27:49,557 DEBUG client 22268 13044 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:27:49,753 DEBUG client 22268 13044 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:27:49,753 DEBUG client 22268 13044 < Server: nginx/1.19.2
2023-06-25 21:27:49,753 DEBUG client 22268 13044 < Date: Sun, 25 Jun 2023 18:27:50 GMT
2023-06-25 21:27:49,753 DEBUG client 22268 13044 < Connection: upgrade
2023-06-25 21:27:49,753 DEBUG client 22268 13044 < Upgrade: websocket
2023-06-25 21:27:49,753 DEBUG client 22268 13044 < Sec-WebSocket-Accept: Gq6YT3TVDyd5rJPixKEY4tfL970=
2023-06-25 21:27:49,753 DEBUG client 22268 13044 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:27:49,753 DEBUG protocol 22268 13044 = connection is OPEN
2023-06-25 21:27:49,754 DEBUG protocol 22268 13044 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:27:49,754 DEBUG __init__ 22268 13044 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:27:49,754 DEBUG __init__ 22268 13044 authing...
2023-06-25 21:27:49,755 DEBUG protocol 22268 13044 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:27:49,871 DEBUG protocol 22268 13044 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:27:49,872 DEBUG __init__ 22268 13044 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:27:49,872 DEBUG __init__ 22268 13044 reconciling: set() {'XT.BTC-USD'}
2023-06-25 21:27:49,872 DEBUG __init__ 22268 13044 subbing: XT.BTC-USD
2023-06-25 21:27:49,873 DEBUG protocol 22268 13044 > TEXT '{"action": "subscribe", "params": "XT.BTC-USD"}' [47 bytes]
2023-06-25 21:27:49,972 DEBUG protocol 22268 13044 < TEXT '[{"ev":"status","status":"success","message":"s...ribed to: XT.BTC-USD"}]' [74 bytes]
2023-06-25 21:27:49,972 DEBUG __init__ 22268 13044 status: subscribed to: XT.BTC-USD
2023-06-25 21:27:50,053 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414.85,"t":1...":1,"r":1687717670400}]' [120 bytes]
2023-06-25 21:27:50,053 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414.85,"t":1...":1,"r":1687717670401}]' [124 bytes]
2023-06-25 21:27:51,000 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415.35,"t":1...":1,"r":1687717671347}]' [124 bytes]
2023-06-25 21:27:51,156 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.5,"t":16...":1,"r":1687717671504}]' [123 bytes]
2023-06-25 21:27:51,157 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.49,"t":1...":1,"r":1687717671504}]' [842 bytes]
2023-06-25 21:27:51,158 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.17,"t":1...":1,"r":1687717671506}]' [367 bytes]
2023-06-25 21:27:52,056 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.97,"t":1...":1,"r":1687717672404}]' [122 bytes]
2023-06-25 21:27:53,103 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415.33,"t":1...":1,"r":1687717673450}]' [124 bytes]
2023-06-25 21:27:53,468 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415.78,"t":1...":1,"r":1687717673815}]' [124 bytes]
2023-06-25 21:27:53,879 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415.77,"t":1...":1,"r":1687717674226}]' [123 bytes]
2023-06-25 21:27:54,375 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417,"t":1687...":6,"r":1687717674722}]' [121 bytes]
2023-06-25 21:27:54,457 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417.03,"t":1...":1,"r":1687717674804}]' [124 bytes]
2023-06-25 21:27:54,753 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:27:54,753 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:27:55,211 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417.03,"t":1...":1,"r":1687717675558}]' [124 bytes]
2023-06-25 21:27:55,287 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415.79,"t":1...":1,"r":1687717675634}]' [123 bytes]
2023-06-25 21:27:55,701 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417.31,"t":1...":1,"r":1687717676048}]' [124 bytes]
2023-06-25 21:27:55,882 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.05,"t":1...":1,"r":1687717676229}]' [124 bytes]
2023-06-25 21:27:55,961 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.05,"t":1...":1,"r":1687717676309}]' [124 bytes]
2023-06-25 21:27:55,962 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.07,"t":1...":1,"r":1687717676309}]' [243 bytes]
2023-06-25 21:27:56,228 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30419.41,"t":1...":1,"r":1687717676576}]' [122 bytes]
2023-06-25 21:27:56,229 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30419.41,"t":1...":1,"r":1687717676576}]' [124 bytes]
2023-06-25 21:27:56,465 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30419.39,"t":1...":1,"r":1687717676812}]' [123 bytes]
2023-06-25 21:27:56,524 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30419.39,"t":1...":1,"r":1687717676872}]' [124 bytes]
2023-06-25 21:27:56,720 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30419,"t":1687...":6,"r":1687717677067}]' [120 bytes]
2023-06-25 21:27:56,730 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414,"t":1687...":6,"r":1687717677078}]' [121 bytes]
2023-06-25 21:27:57,574 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30419,"t":1687...":1,"r":1687717677921}]' [121 bytes]
2023-06-25 21:27:58,350 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.94,"t":1...":1,"r":1687717678697}]' [118 bytes]
2023-06-25 21:27:58,351 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.95,"t":1...":1,"r":1687717678697}]' [487 bytes]
2023-06-25 21:27:58,963 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.75,"t":1...":1,"r":1687717679311}]' [124 bytes]
2023-06-25 21:27:59,663 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.34,"t":1...":1,"r":1687717680011}]' [122 bytes]
2023-06-25 21:27:59,664 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.34,"t":1...":1,"r":1687717680011}]' [600 bytes]
2023-06-25 21:27:59,753 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:27:59,753 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:28:00,205 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30419,"t":1687...":6,"r":1687717680553}]' [121 bytes]
2023-06-25 21:28:00,538 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421,"t":1687...":6,"r":1687717680858}]' [121 bytes]
2023-06-25 21:28:00,645 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30420.22,"t":1...":1,"r":1687717680983}]' [124 bytes]
2023-06-25 21:28:00,682 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30420.22,"t":1...":1,"r":1687717681029}]' [124 bytes]
2023-06-25 21:28:01,383 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.9,"t":16...:23,"r":1687717681730}]' [299 bytes]
2023-06-25 21:28:01,558 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30420.09,"t":1...":1,"r":1687717681905}]' [124 bytes]
2023-06-25 21:28:01,941 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.17,"t":1...":1,"r":1687717682289}]' [124 bytes]
2023-06-25 21:28:02,488 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415.87,"t":1...":1,"r":1687717682835}]' [121 bytes]
2023-06-25 21:28:02,488 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415.7,"t":16...":1,"r":1687717682835}]' [123 bytes]
2023-06-25 21:28:02,505 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415.7,"t":16...":1,"r":1687717682852}]' [123 bytes]
2023-06-25 21:28:02,963 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414,"t":1687...":1,"r":1687717683310}]' [121 bytes]
2023-06-25 21:28:03,729 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.05,"t":1...":1,"r":1687717684076}]' [124 bytes]
2023-06-25 21:28:04,566 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.48,"t":1...":1,"r":1687717684913}]' [124 bytes]
2023-06-25 21:28:04,753 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:28:04,753 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:28:05,323 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.48,"t":1...":1,"r":1687717685670}]' [124 bytes]
2023-06-25 21:28:05,504 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.29,"t":1...":1,"r":1687717685851}]' [123 bytes]
2023-06-25 21:28:05,504 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414.79,"t":1...":1,"r":1687717685851}]' [124 bytes]
2023-06-25 21:28:05,570 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.48,"t":1...":1,"r":1687717685917}]' [123 bytes]
2023-06-25 21:28:05,872 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.99,"t":1...":1,"r":1687717686220}]' [123 bytes]
2023-06-25 21:28:05,965 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.98,"t":1...":1,"r":1687717686312}]' [124 bytes]
2023-06-25 21:28:06,408 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.98,"t":1...":1,"r":1687717686756}]' [124 bytes]
2023-06-25 21:28:06,872 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.3,"t":16...:23,"r":1687717687219}]' [151 bytes]
2023-06-25 21:28:06,873 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.4,"t":16...:23,"r":1687717687219}]' [150 bytes]
2023-06-25 21:28:06,960 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.23,"t":1...":1,"r":1687717687307}]' [124 bytes]
2023-06-25 21:28:08,396 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30431,"t":1687...":2,"r":1687717688744}]' [117 bytes]
2023-06-25 21:28:08,397 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30431,"t":1687...":2,"r":1687717688744}]' [122 bytes]
2023-06-25 21:28:08,452 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30431,"t":1687...":2,"r":1687717688799}]' [117 bytes]
2023-06-25 21:28:08,455 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30431,"t":1687...":2,"r":1687717688803}]' [122 bytes]
2023-06-25 21:28:09,412 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.48,"t":1...":1,"r":1687717689759}]' [121 bytes]
2023-06-25 21:28:09,449 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.48,"t":1...":1,"r":1687717689797}]' [121 bytes]
2023-06-25 21:28:09,663 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.48,"t":1...":1,"r":1687717690011}]' [124 bytes]
2023-06-25 21:28:09,753 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:28:09,753 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:28:09,781 DEBUG protocol 22268 13044 % sending keepalive ping
2023-06-25 21:28:09,781 DEBUG protocol 22268 13044 > PING 63 32 aa 55 [binary, 4 bytes]
2023-06-25 21:28:09,949 DEBUG protocol 22268 13044 < PONG 63 32 aa 55 [binary, 4 bytes]
2023-06-25 21:28:09,950 DEBUG protocol 22268 13044 % received keepalive pong
2023-06-25 21:28:10,280 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.47,"t":1...":1,"r":1687717690628}]' [121 bytes]
2023-06-25 21:28:10,281 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.07,"t":1...":1,"r":1687717690628}]' [124 bytes]
2023-06-25 21:28:11,836 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.69,"t":1...":1,"r":1687717692184}]' [124 bytes]
2023-06-25 21:28:13,448 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.55,"t":1...":1,"r":1687717693796}]' [124 bytes]
2023-06-25 21:28:14,752 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:28:14,752 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:28:16,130 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.83,"t":1...":1,"r":1687717696478}]' [124 bytes]
2023-06-25 21:28:16,131 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.83,"t":1...":1,"r":1687717696478}]' [957 bytes]
2023-06-25 21:28:16,524 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.87,"t":1...":1,"r":1687717696871}]' [124 bytes]
2023-06-25 21:28:17,343 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.87,"t":1...":1,"r":1687717697691}]' [124 bytes]
2023-06-25 21:28:17,469 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.86,"t":1...":1,"r":1687717697816}]' [124 bytes]
2023-06-25 21:28:18,876 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.87,"t":1...":1,"r":1687717699224}]' [122 bytes]
2023-06-25 21:28:18,930 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.87,"t":1...":1,"r":1687717699278}]' [124 bytes]
2023-06-25 21:28:19,178 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.87,"t":1...":1,"r":1687717699526}]' [124 bytes]
2023-06-25 21:28:19,616 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.87,"t":1...":1,"r":1687717699963}]' [123 bytes]
2023-06-25 21:28:19,752 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:28:19,752 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:28:20,337 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.86,"t":1...":1,"r":1687717700685}]' [123 bytes]
2023-06-25 21:28:21,154 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.87,"t":1...":1,"r":1687717701503}]' [124 bytes]
2023-06-25 21:28:21,628 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.8,"t":16...:23,"r":1687717701976}]' [151 bytes]
2023-06-25 21:28:21,629 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.5,"t":16...:23,"r":1687717701976}]' [895 bytes]
2023-06-25 21:28:21,675 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.3,"t":16...:23,"r":1687717702023}]' [151 bytes]
2023-06-25 21:28:21,675 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.3,"t":16...:23,"r":1687717702023}]' [151 bytes]
2023-06-25 21:28:22,339 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.87,"t":1...":1,"r":1687717702687}]' [123 bytes]
2023-06-25 21:28:22,599 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.86,"t":1...":1,"r":1687717702947}]' [124 bytes]
2023-06-25 21:28:22,620 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410,"t":1687...":1,"r":1687717702968}]' [120 bytes]
2023-06-25 21:28:22,621 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.96,"t":1...":1,"r":1687717702968}]' [124 bytes]
2023-06-25 21:28:22,652 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.96,"t":1...":1,"r":1687717703001}]' [123 bytes]
2023-06-25 21:28:22,886 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.29,"t":1...":1,"r":1687717703234}]' [124 bytes]
2023-06-25 21:28:22,949 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.1,"t":16...":1,"r":1687717703297}]' [123 bytes]
2023-06-25 21:28:23,445 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.23,"t":1...":1,"r":1687717703792}]' [122 bytes]
2023-06-25 21:28:23,445 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.22,"t":1...":1,"r":1687717703792}]' [122 bytes]
2023-06-25 21:28:23,480 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.08,"t":1...":1,"r":1687717703829}]' [124 bytes]
2023-06-25 21:28:24,541 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399,"t":1687...:23,"r":1687717704889}]' [145 bytes]
2023-06-25 21:28:24,741 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30398.9,"t":16...:23,"r":1687717705090}]' [299 bytes]
2023-06-25 21:28:24,743 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30385.5,"t":16...:23,"r":1687717705090}]' [151 bytes]
2023-06-25 21:28:24,750 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.57,"t":1...":1,"r":1687717705098}]' [122 bytes]
2023-06-25 21:28:24,752 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:28:24,752 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:28:25,096 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.25,"t":1...":1,"r":1687717705445}]' [124 bytes]
2023-06-25 21:28:25,666 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.51,"t":1...":1,"r":1687717706013}]' [124 bytes]
2023-06-25 21:28:26,137 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.5,"t":16...":1,"r":1687717706483}]' [117 bytes]
2023-06-25 21:28:26,138 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.51,"t":1...":1,"r":1687717706483}]' [123 bytes]
2023-06-25 21:28:26,536 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.67,"t":1...":1,"r":1687717706884}]' [123 bytes]
2023-06-25 21:28:27,315 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.95,"t":1...":1,"r":1687717707663}]' [124 bytes]
2023-06-25 21:28:27,559 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.94,"t":1...":1,"r":1687717707907}]' [124 bytes]
2023-06-25 21:28:27,995 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402,"t":1687...":6,"r":1687717708343}]' [115 bytes]
2023-06-25 21:28:27,996 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.93,"t":1...":1,"r":1687717708344}]' [124 bytes]
2023-06-25 21:28:29,752 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:28:29,753 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:28:29,945 DEBUG protocol 22268 13044 % sending keepalive ping
2023-06-25 21:28:29,945 DEBUG protocol 22268 13044 > PING e0 0e 36 a7 [binary, 4 bytes]
2023-06-25 21:28:30,043 DEBUG protocol 22268 13044 < PONG e0 0e 36 a7 [binary, 4 bytes]
2023-06-25 21:28:30,043 DEBUG protocol 22268 13044 % received keepalive pong
2023-06-25 21:28:30,570 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.24,"t":1...":1,"r":1687717710918}]' [124 bytes]
2023-06-25 21:28:30,732 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.25,"t":1...":1,"r":1687717711080}]' [124 bytes]
2023-06-25 21:28:31,429 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.25,"t":1...":1,"r":1687717711777}]' [124 bytes]
2023-06-25 21:28:31,845 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.24,"t":1...":1,"r":1687717712194}]' [124 bytes]
2023-06-25 21:28:32,078 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404,"t":1687...":6,"r":1687717712424}]' [121 bytes]
2023-06-25 21:28:32,484 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.12,"t":1...":1,"r":1687717712831}]' [124 bytes]
2023-06-25 21:28:32,484 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.12,"t":1...":1,"r":1687717712831}]' [243 bytes]
2023-06-25 21:28:32,688 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406,"t":1687...":6,"r":1687717713036}]' [115 bytes]
2023-06-25 21:28:32,980 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.05,"t":1...":1,"r":1687717713328}]' [124 bytes]
2023-06-25 21:28:33,044 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.05,"t":1...":1,"r":1687717713392}]' [124 bytes]
2023-06-25 21:28:33,044 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.04,"t":1...":1,"r":1687717713392}]' [245 bytes]
2023-06-25 21:28:33,087 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.47,"t":1...":1,"r":1687717713435}]' [124 bytes]
2023-06-25 21:28:33,254 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.86,"t":1...":1,"r":1687717713601}]' [124 bytes]
2023-06-25 21:28:33,545 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.95,"t":1...":1,"r":1687717713893}]' [124 bytes]
2023-06-25 21:28:34,296 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.99,"t":1...":1,"r":1687717714645}]' [124 bytes]
2023-06-25 21:28:34,751 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:28:34,752 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:28:34,924 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.42,"t":1...":1,"r":1687717715273}]' [121 bytes]
2023-06-25 21:28:34,939 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.43,"t":1...":1,"r":1687717715288}]' [124 bytes]
2023-06-25 21:28:35,947 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.47,"t":1...":1,"r":1687717716295}]' [123 bytes]
2023-06-25 21:28:36,368 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.4,"t":16...":1,"r":1687717716716}]' [121 bytes]
2023-06-25 21:28:36,368 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.41,"t":1...":1,"r":1687717716716}]' [365 bytes]
2023-06-25 21:28:36,867 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410,"t":1687...":6,"r":1687717717213}]' [118 bytes]
2023-06-25 21:28:36,943 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.41,"t":1...":1,"r":1687717717288}]' [122 bytes]
2023-06-25 21:28:36,944 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.41,"t":1...":1,"r":1687717717288}]' [245 bytes]
2023-06-25 21:28:36,958 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.03,"t":1...":1,"r":1687717717306}]' [121 bytes]
2023-06-25 21:28:37,033 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.7,"t":16...:23,"r":1687717717382}]' [149 bytes]
2023-06-25 21:28:37,034 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.7,"t":16...:23,"r":1687717717382}]' [590 bytes]
2023-06-25 21:28:37,094 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.3,"t":16...:23,"r":1687717717442}]' [151 bytes]
2023-06-25 21:28:37,094 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.3,"t":16...:23,"r":1687717717442}]' [151 bytes]
2023-06-25 21:28:37,169 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.44,"t":1...":1,"r":1687717717517}]' [122 bytes]
2023-06-25 21:28:37,169 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.53,"t":1...":1,"r":1687717717517}]' [600 bytes]
2023-06-25 21:28:37,170 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.9,"t":16...:23,"r":1687717717519}]' [151 bytes]
2023-06-25 21:28:37,171 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30387.9,"t":16...:23,"r":1687717717519}]' [150 bytes]
2023-06-25 21:28:37,177 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.1,"t":16...:23,"r":1687717717526}]' [151 bytes]
2023-06-25 21:28:37,203 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.32,"t":1...":1,"r":1687717717552}]' [124 bytes]
2023-06-25 21:28:38,237 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.2,"t":16...:23,"r":1687717718584}]' [146 bytes]
2023-06-25 21:28:38,237 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.2,"t":16...:23,"r":1687717718584}]' [151 bytes]
2023-06-25 21:28:38,317 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.38,"t":1...":1,"r":1687717718665}]' [124 bytes]
2023-06-25 21:28:38,318 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.37,"t":1...":1,"r":1687717718665}]' [370 bytes]
2023-06-25 21:28:39,394 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.2,"t":16...":1,"r":1687717719743}]' [123 bytes]
2023-06-25 21:28:39,752 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:28:39,752 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:28:40,113 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.47,"t":1...":1,"r":1687717720460}]' [124 bytes]
2023-06-25 21:28:40,339 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.36,"t":1...":1,"r":1687717720688}]' [123 bytes]
2023-06-25 21:28:40,770 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.42,"t":1...":1,"r":1687717721118}]' [124 bytes]
2023-06-25 21:28:40,910 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395.8,"t":16...:23,"r":1687717721257}]' [151 bytes]
2023-06-25 21:28:40,910 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395.9,"t":16...:23,"r":1687717721257}]' [151 bytes]
2023-06-25 21:28:41,433 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.28,"t":1...":1,"r":1687717721781}]' [124 bytes]
2023-06-25 21:28:41,977 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.28,"t":1...":1,"r":1687717722325}]' [124 bytes]
2023-06-25 21:28:41,978 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.53,"t":1...":1,"r":1687717722325}]' [365 bytes]
2023-06-25 21:28:42,018 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.2,"t":16...:23,"r":1687717722367}]' [151 bytes]
2023-06-25 21:28:42,018 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.2,"t":16...:23,"r":1687717722367}]' [151 bytes]
2023-06-25 21:28:43,736 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30388.3,"t":16...:23,"r":1687717724084}]' [297 bytes]
2023-06-25 21:28:43,736 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30391.2,"t":16...:23,"r":1687717724084}]' [301 bytes]
2023-06-25 21:28:44,187 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389,"t":1687...:23,"r":1687717724536}]' [143 bytes]
2023-06-25 21:28:44,188 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389,"t":1687...:23,"r":1687717724536}]' [440 bytes]
2023-06-25 21:28:44,261 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.52,"t":1...":1,"r":1687717724609}]' [124 bytes]
2023-06-25 21:28:44,752 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:28:44,752 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:28:45,051 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.51,"t":1...":1,"r":1687717725399}]' [124 bytes]
2023-06-25 21:28:45,051 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.51,"t":1...":1,"r":1687717725399}]' [240 bytes]
2023-06-25 21:28:45,619 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410,"t":1687...":1,"r":1687717725967}]' [120 bytes]
2023-06-25 21:28:45,646 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410,"t":1687...":1,"r":1687717725993}]' [121 bytes]
2023-06-25 21:28:45,646 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.01,"t":1...":1,"r":1687717725993}]' [124 bytes]
2023-06-25 21:28:46,008 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.95,"t":1...":1,"r":1687717726357}]' [124 bytes]
2023-06-25 21:28:46,216 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.01,"t":1...":1,"r":1687717726564}]' [124 bytes]
2023-06-25 21:28:46,218 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.08,"t":1...":1,"r":1687717726565}]' [124 bytes]
2023-06-25 21:28:46,244 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.07,"t":1...":1,"r":1687717726592}]' [124 bytes]
2023-06-25 21:28:46,340 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.02,"t":1...":1,"r":1687717726688}]' [123 bytes]
2023-06-25 21:28:47,405 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.82,"t":1...":1,"r":1687717727754}]' [124 bytes]
2023-06-25 21:28:47,637 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.16,"t":1...":1,"r":1687717727987}]' [124 bytes]
2023-06-25 21:28:48,687 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.82,"t":1...":1,"r":1687717729036}]' [124 bytes]
2023-06-25 21:28:48,823 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.78,"t":1...":1,"r":1687717729172}]' [124 bytes]
2023-06-25 21:28:49,415 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.35,"t":1...":1,"r":1687717729764}]' [124 bytes]
2023-06-25 21:28:49,426 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.04,"t":1...":1,"r":1687717729774}]' [118 bytes]
2023-06-25 21:28:49,752 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:28:49,752 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:28:50,060 DEBUG protocol 22268 13044 % sending keepalive ping
2023-06-25 21:28:50,060 DEBUG protocol 22268 13044 > PING 60 e1 7e 0b [binary, 4 bytes]
2023-06-25 21:28:50,158 DEBUG protocol 22268 13044 < PONG 60 e1 7e 0b [binary, 4 bytes]
2023-06-25 21:28:50,159 DEBUG protocol 22268 13044 % received keepalive pong
2023-06-25 21:28:50,552 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.12,"t":1...":1,"r":1687717730901}]' [124 bytes]
2023-06-25 21:28:50,650 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.13,"t":1...":1,"r":1687717730999}]' [124 bytes]
2023-06-25 21:28:50,967 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.08,"t":1...":1,"r":1687717731316}]' [122 bytes]
2023-06-25 21:28:50,968 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.72,"t":1...":1,"r":1687717731316}]' [124 bytes]
2023-06-25 21:28:51,205 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.63,"t":1...":1,"r":1687717731554}]' [120 bytes]
2023-06-25 21:28:51,456 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.86,"t":1...":1,"r":1687717731804}]' [124 bytes]
2023-06-25 21:28:51,456 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.86,"t":1...":1,"r":1687717731804}]' [729 bytes]
2023-06-25 21:28:51,457 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.79,"t":1...":1,"r":1687717731804}]' [124 bytes]
2023-06-25 21:28:51,461 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.76,"t":1...":1,"r":1687717731809}]' [122 bytes]
2023-06-25 21:28:51,461 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.75,"t":1...":1,"r":1687717731809}]' [609 bytes]
2023-06-25 21:28:51,462 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.47,"t":1...":1,"r":1687717731810}]' [124 bytes]
2023-06-25 21:28:51,462 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.27,"t":1...":1,"r":1687717731810}]' [124 bytes]
2023-06-25 21:28:51,462 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.24,"t":1...":1,"r":1687717731810}]' [246 bytes]
2023-06-25 21:28:52,686 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.85,"t":1...":1,"r":1687717733035}]' [124 bytes]
2023-06-25 21:28:54,400 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.7,"t":16...":1,"r":1687717734748}]' [123 bytes]
2023-06-25 21:28:54,561 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408,"t":1687...":6,"r":1687717734909}]' [117 bytes]
2023-06-25 21:28:54,752 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:28:54,752 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:28:54,933 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.15,"t":1...":1,"r":1687717735281}]' [124 bytes]
2023-06-25 21:28:55,147 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.13,"t":1...":1,"r":1687717735495}]' [124 bytes]
2023-06-25 21:28:55,986 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.78,"t":1...":1,"r":1687717736335}]' [123 bytes]
2023-06-25 21:28:59,072 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.62,"t":1...":1,"r":1687717739421}]' [122 bytes]
2023-06-25 21:28:59,072 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.62,"t":1...":1,"r":1687717739421}]' [604 bytes]
2023-06-25 21:28:59,119 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.53,"t":1...":1,"r":1687717739467}]' [124 bytes]
2023-06-25 21:28:59,751 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:28:59,751 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:28:59,761 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.47,"t":1...":1,"r":1687717740111}]' [124 bytes]
2023-06-25 21:28:59,978 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409,"t":1687...":6,"r":1687717740327}]' [121 bytes]
2023-06-25 21:29:00,864 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.1,"t":16...:23,"r":1687717741214}]' [149 bytes]
2023-06-25 21:29:00,865 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30391.2,"t":16...:23,"r":1687717741214}]' [300 bytes]
2023-06-25 21:29:01,399 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.69,"t":1...":1,"r":1687717741747}]' [122 bytes]
2023-06-25 21:29:01,488 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.69,"t":1...":1,"r":1687717741837}]' [122 bytes]
2023-06-25 21:29:01,488 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.89,"t":1...":1,"r":1687717741837}]' [124 bytes]
2023-06-25 21:29:02,881 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409,"t":1687...":6,"r":1687717743229}]' [118 bytes]
2023-06-25 21:29:03,118 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409,"t":1687...":6,"r":1687717743466}]' [121 bytes]
2023-06-25 21:29:03,350 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409,"t":1687...":6,"r":1687717743700}]' [121 bytes]
2023-06-25 21:29:03,361 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409,"t":1687...":6,"r":1687717743710}]' [121 bytes]
2023-06-25 21:29:03,486 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.44,"t":1...":1,"r":1687717743835}]' [124 bytes]
2023-06-25 21:29:03,715 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.77,"t":1...":1,"r":1687717744064}]' [124 bytes]
2023-06-25 21:29:04,425 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.36,"t":1...":1,"r":1687717744773}]' [487 bytes]
2023-06-25 21:29:04,426 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.45,"t":1...":1,"r":1687717744773}]' [733 bytes]
2023-06-25 21:29:04,752 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:29:04,752 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:29:06,293 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.06,"t":1...":1,"r":1687717746642}]' [122 bytes]
2023-06-25 21:29:06,293 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.06,"t":1...":1,"r":1687717746642}]' [123 bytes]
2023-06-25 21:29:06,512 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.07,"t":1...":1,"r":1687717746862}]' [124 bytes]
2023-06-25 21:29:06,520 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.41,"t":1...":1,"r":1687717746868}]' [123 bytes]
2023-06-25 21:29:06,971 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.18,"t":1...":1,"r":1687717747319}]' [122 bytes]
2023-06-25 21:29:07,016 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.35,"t":1...":1,"r":1687717747365}]' [124 bytes]
2023-06-25 21:29:08,404 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.1,"t":16...":1,"r":1687717748753}]' [123 bytes]
2023-06-25 21:29:08,871 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.35,"t":1...":1,"r":1687717749220}]' [124 bytes]
2023-06-25 21:29:09,098 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.08,"t":1...":1,"r":1687717749447}]' [124 bytes]
2023-06-25 21:29:09,190 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.34,"t":1...":1,"r":1687717749540}]' [120 bytes]
2023-06-25 21:29:09,191 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.34,"t":1...":1,"r":1687717749540}]' [118 bytes]
2023-06-25 21:29:09,721 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.45,"t":1...":1,"r":1687717750070}]' [124 bytes]
2023-06-25 21:29:09,751 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:29:09,751 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:29:09,799 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409,"t":1687...":6,"r":1687717750147}]' [121 bytes]
2023-06-25 21:29:10,055 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.73,"t":1...":1,"r":1687717750404}]' [122 bytes]
2023-06-25 21:29:10,167 DEBUG protocol 22268 13044 % sending keepalive ping
2023-06-25 21:29:10,167 DEBUG protocol 22268 13044 > PING c1 f4 ae 98 [binary, 4 bytes]
2023-06-25 21:29:10,264 DEBUG protocol 22268 13044 < PONG c1 f4 ae 98 [binary, 4 bytes]
2023-06-25 21:29:10,264 DEBUG protocol 22268 13044 % received keepalive pong
2023-06-25 21:29:11,822 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.73,"t":1...":1,"r":1687717752171}]' [124 bytes]
2023-06-25 21:29:12,169 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.72,"t":1...":1,"r":1687717752517}]' [123 bytes]
2023-06-25 21:29:12,555 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.73,"t":1...":1,"r":1687717752904}]' [124 bytes]
2023-06-25 21:29:12,773 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.97,"t":1...":1,"r":1687717753122}]' [123 bytes]
2023-06-25 21:29:12,773 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.29,"t":1...":1,"r":1687717753122}]' [124 bytes]
2023-06-25 21:29:13,688 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.88,"t":1...":1,"r":1687717754038}]' [122 bytes]
2023-06-25 21:29:13,689 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.33,"t":1...":1,"r":1687717754038}]' [124 bytes]
2023-06-25 21:29:14,740 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.29,"t":1...":1,"r":1687717755090}]' [124 bytes]
2023-06-25 21:29:14,751 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:29:14,751 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:29:14,756 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.29,"t":1...":1,"r":1687717755105}]' [124 bytes]
2023-06-25 21:29:14,956 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.86,"t":1...":1,"r":1687717755305}]' [124 bytes]
2023-06-25 21:29:14,956 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.48,"t":1...":1,"r":1687717755305}]' [124 bytes]
2023-06-25 21:29:16,266 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30408.61,"t":1...":1,"r":1687717756608}]' [119 bytes]
2023-06-25 21:29:16,721 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.09,"t":1...":1,"r":1687717757071}]' [121 bytes]
2023-06-25 21:29:16,745 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.56,"t":1...":1,"r":1687717757094}]' [123 bytes]
2023-06-25 21:29:17,366 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30409.47,"t":1...":1,"r":1687717757716}]' [124 bytes]
2023-06-25 21:29:18,205 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.19,"t":1...":1,"r":1687717758554}]' [124 bytes]
2023-06-25 21:29:18,206 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.25,"t":1...":1,"r":1687717758554}]' [604 bytes]
2023-06-25 21:29:18,206 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.55,"t":1...":1,"r":1687717758554}]' [609 bytes]
2023-06-25 21:29:18,243 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.97,"t":1...":1,"r":1687717758593}]' [124 bytes]
2023-06-25 21:29:18,277 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.88,"t":1...":1,"r":1687717758627}]' [121 bytes]
2023-06-25 21:29:19,751 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:29:19,751 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:29:21,975 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30410.6,"t":16...":1,"r":1687717762324}]' [123 bytes]
2023-06-25 21:29:23,073 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.21,"t":1...":1,"r":1687717763422}]' [118 bytes]
2023-06-25 21:29:23,078 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.21,"t":1...":1,"r":1687717763428}]' [124 bytes]
2023-06-25 21:29:23,079 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.64,"t":1...":1,"r":1687717763428}]' [979 bytes]
2023-06-25 21:29:23,082 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.83,"t":1...":1,"r":1687717763432}]' [124 bytes]
2023-06-25 21:29:23,138 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414.86,"t":1...":1,"r":1687717763488}]' [124 bytes]
2023-06-25 21:29:23,139 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414.4,"t":16...":1,"r":1687717763488}]' [607 bytes]
2023-06-25 21:29:23,145 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415,"t":1687...":2,"r":1687717763495}]' [233 bytes]
2023-06-25 21:29:23,146 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30422,"t":1687...":2,"r":1687717763495}]' [241 bytes]
2023-06-25 21:29:23,174 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417.99,"t":1...":1,"r":1687717763524}]' [124 bytes]
2023-06-25 21:29:23,201 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414,"t":1687...":6,"r":1687717763551}]' [119 bytes]
2023-06-25 21:29:23,216 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.37,"t":1...":1,"r":1687717763564}]' [120 bytes]
2023-06-25 21:29:23,216 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.37,"t":1...":1,"r":1687717763564}]' [238 bytes]
2023-06-25 21:29:23,222 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30422,"t":1687...":2,"r":1687717763572}]' [241 bytes]
2023-06-25 21:29:23,241 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414,"t":1687...":6,"r":1687717763591}]' [233 bytes]
2023-06-25 21:29:23,243 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415,"t":1687...":2,"r":1687717763593}]' [117 bytes]
2023-06-25 21:29:23,244 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415,"t":1687...":2,"r":1687717763593}]' [117 bytes]
2023-06-25 21:29:23,281 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415,"t":1687...":6,"r":1687717763631}]' [117 bytes]
2023-06-25 21:29:23,375 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.37,"t":1...":1,"r":1687717763725}]' [124 bytes]
2023-06-25 21:29:23,444 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.38,"t":1...":1,"r":1687717763794}]' [124 bytes]
2023-06-25 21:29:23,445 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.39,"t":1...":1,"r":1687717763794}]' [124 bytes]
2023-06-25 21:29:23,446 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30420.06,"t":1...":1,"r":1687717763794}]' [857 bytes]
2023-06-25 21:29:23,613 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30422.99,"t":1...":1,"r":1687717763961}]' [245 bytes]
2023-06-25 21:29:23,764 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30389.1,"t":16...:23,"r":1687717764114}]' [149 bytes]
2023-06-25 21:29:23,765 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30393.9,"t":16...:23,"r":1687717764114}]' [895 bytes]
2023-06-25 21:29:23,971 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.6,"t":16...:23,"r":1687717764321}]' [147 bytes]
2023-06-25 21:29:24,014 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30395.8,"t":16...:23,"r":1687717764364}]' [301 bytes]
2023-06-25 21:29:24,181 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30420.11,"t":1...":1,"r":1687717764531}]' [124 bytes]
2023-06-25 21:29:24,751 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:29:24,751 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:29:26,250 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30422,"t":1687...":6,"r":1687717766599}]' [121 bytes]
2023-06-25 21:29:26,602 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30420.93,"t":1...":1,"r":1687717766951}]' [123 bytes]
2023-06-25 21:29:27,632 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421.68,"t":1...":1,"r":1687717767982}]' [123 bytes]
2023-06-25 21:29:27,974 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421.94,"t":1...":1,"r":1687717768323}]' [124 bytes]
2023-06-25 21:29:28,439 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30419.97,"t":1...":1,"r":1687717768788}]' [124 bytes]
2023-06-25 21:29:29,306 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.87,"t":1...":1,"r":1687717769655}]' [124 bytes]
2023-06-25 21:29:29,556 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.87,"t":1...":1,"r":1687717769905}]' [123 bytes]
2023-06-25 21:29:29,751 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:29:29,751 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:29:30,209 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.86,"t":1...":1,"r":1687717770559}]' [240 bytes]
2023-06-25 21:29:30,264 DEBUG protocol 22268 13044 % sending keepalive ping
2023-06-25 21:29:30,264 DEBUG protocol 22268 13044 > PING 21 71 d2 73 [binary, 4 bytes]
2023-06-25 21:29:30,361 DEBUG protocol 22268 13044 < PONG 21 71 d2 73 [binary, 4 bytes]
2023-06-25 21:29:30,362 DEBUG protocol 22268 13044 % received keepalive pong
2023-06-25 21:29:30,552 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.86,"t":1...":1,"r":1687717770902}]' [124 bytes]
2023-06-25 21:29:31,373 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.86,"t":1...":1,"r":1687717771723}]' [124 bytes]
2023-06-25 21:29:31,374 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.86,"t":1...":1,"r":1687717771723}]' [124 bytes]
2023-06-25 21:29:32,376 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.86,"t":1...":1,"r":1687717772726}]' [124 bytes]
2023-06-25 21:29:32,377 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.86,"t":1...":1,"r":1687717772726}]' [477 bytes]
2023-06-25 21:29:32,789 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.86,"t":1...":1,"r":1687717773138}]' [119 bytes]
2023-06-25 21:29:32,789 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.86,"t":1...":1,"r":1687717773138}]' [124 bytes]
2023-06-25 21:29:33,195 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30416,"t":1687...":6,"r":1687717773545}]' [117 bytes]
2023-06-25 21:29:33,226 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.85,"t":1...":1,"r":1687717773575}]' [124 bytes]
2023-06-25 21:29:33,239 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.86,"t":1...":1,"r":1687717773589}]' [124 bytes]
2023-06-25 21:29:33,308 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.85,"t":1...":1,"r":1687717773658}]' [124 bytes]
2023-06-25 21:29:33,374 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.84,"t":1...":1,"r":1687717773723}]' [124 bytes]
2023-06-25 21:29:33,511 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417.31,"t":1...":1,"r":1687717773861}]' [124 bytes]
2023-06-25 21:29:34,085 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415.89,"t":1...":1,"r":1687717774434}]' [124 bytes]
2023-06-25 21:29:34,086 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415.89,"t":1...":1,"r":1687717774434}]' [124 bytes]
2023-06-25 21:29:34,139 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30416.2,"t":16...":1,"r":1687717774488}]' [123 bytes]
2023-06-25 21:29:34,190 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30416.2,"t":16...":1,"r":1687717774539}]' [118 bytes]
2023-06-25 21:29:34,371 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417.3,"t":16...":1,"r":1687717774721}]' [123 bytes]
2023-06-25 21:29:34,751 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:29:34,751 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:29:34,894 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417.3,"t":16...":1,"r":1687717775243}]' [123 bytes]
2023-06-25 21:29:35,379 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417.29,"t":1...":1,"r":1687717775729}]' [119 bytes]
2023-06-25 21:29:35,388 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417.29,"t":1...":1,"r":1687717775739}]' [119 bytes]
2023-06-25 21:29:35,389 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417.3,"t":16...":1,"r":1687717775739}]' [843 bytes]
2023-06-25 21:29:35,389 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.24,"t":1...":1,"r":1687717775739}]' [124 bytes]
2023-06-25 21:29:35,390 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.24,"t":1...":1,"r":1687717775741}]' [124 bytes]
2023-06-25 21:29:35,829 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30416.28,"t":1...":1,"r":1687717776179}]' [123 bytes]
2023-06-25 21:29:37,227 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417.6,"t":16...":1,"r":1687717777577}]' [123 bytes]
2023-06-25 21:29:37,996 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.86,"t":1...":1,"r":1687717778345}]' [124 bytes]
2023-06-25 21:29:38,320 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30420.78,"t":1...":1,"r":1687717778670}]' [124 bytes]
2023-06-25 21:29:38,627 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30420,"t":1687...":1,"r":1687717778977}]' [120 bytes]
2023-06-25 21:29:38,805 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30419.46,"t":1...":1,"r":1687717779155}]' [124 bytes]
2023-06-25 21:29:39,232 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.61,"t":1...":1,"r":1687717779581}]' [124 bytes]
2023-06-25 21:29:39,751 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:29:39,752 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:29:40,064 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30420.76,"t":1...":1,"r":1687717780413}]' [122 bytes]
2023-06-25 21:29:40,064 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30420.76,"t":1...":1,"r":1687717780413}]' [487 bytes]
2023-06-25 21:29:42,591 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.5,"t":16...:23,"r":1687717782941}]' [301 bytes]
2023-06-25 21:29:43,303 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421.11,"t":1...":1,"r":1687717783653}]' [124 bytes]
2023-06-25 21:29:43,303 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421.83,"t":1...":1,"r":1687717783653}]' [124 bytes]
2023-06-25 21:29:43,834 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30419.6,"t":16...":1,"r":1687717784184}]' [123 bytes]
2023-06-25 21:29:44,303 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421.79,"t":1...":1,"r":1687717784652}]' [122 bytes]
2023-06-25 21:29:44,303 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421.79,"t":1...":1,"r":1687717784653}]' [366 bytes]
2023-06-25 21:29:44,509 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30399.4,"t":16...:23,"r":1687717784858}]' [145 bytes]
2023-06-25 21:29:44,750 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:29:44,750 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:29:45,045 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421.75,"t":1...":1,"r":1687717785395}]' [124 bytes]
2023-06-25 21:29:45,252 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421.74,"t":1...":1,"r":1687717785602}]' [124 bytes]
2023-06-25 21:29:45,637 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.21,"t":1...":1,"r":1687717785987}]' [122 bytes]
2023-06-25 21:29:45,638 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.21,"t":1...":1,"r":1687717785987}]' [731 bytes]
2023-06-25 21:29:45,638 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417.41,"t":1...":1,"r":1687717785987}]' [124 bytes]
2023-06-25 21:29:46,068 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30419.59,"t":1...":1,"r":1687717786417}]' [124 bytes]
2023-06-25 21:29:46,320 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30419.59,"t":1...":1,"r":1687717786669}]' [247 bytes]
2023-06-25 21:29:46,443 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418.03,"t":1...":1,"r":1687717786793}]' [124 bytes]
2023-06-25 21:29:48,385 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30419.86,"t":1...":1,"r":1687717788736}]' [124 bytes]
2023-06-25 21:29:48,386 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30419.87,"t":1...":1,"r":1687717788736}]' [239 bytes]
2023-06-25 21:29:48,846 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30419.83,"t":1...":1,"r":1687717789195}]' [124 bytes]
2023-06-25 21:29:48,875 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30419.83,"t":1...":1,"r":1687717789225}]' [121 bytes]
2023-06-25 21:29:49,132 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417.48,"t":1...":1,"r":1687717789481}]' [118 bytes]
2023-06-25 21:29:49,132 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417.47,"t":1...":1,"r":1687717789482}]' [124 bytes]
2023-06-25 21:29:49,132 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417.42,"t":1...":1,"r":1687717789482}]' [366 bytes]
2023-06-25 21:29:49,647 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417.36,"t":1...":1,"r":1687717789997}]' [122 bytes]
2023-06-25 21:29:49,651 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30417.36,"t":1...":1,"r":1687717790002}]' [124 bytes]
2023-06-25 21:29:49,750 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:29:49,750 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:29:50,140 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30416.27,"t":1...":1,"r":1687717790490}]' [124 bytes]
2023-06-25 21:29:50,143 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30416.26,"t":1...":1,"r":1687717790493}]' [121 bytes]
2023-06-25 21:29:50,144 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30416.26,"t":1...":1,"r":1687717790493}]' [122 bytes]
2023-06-25 21:29:50,350 DEBUG protocol 22268 13044 % sending keepalive ping
2023-06-25 21:29:50,350 DEBUG protocol 22268 13044 > PING 7d 7b 4f fc [binary, 4 bytes]
2023-06-25 21:29:50,449 DEBUG protocol 22268 13044 < PONG 7d 7b 4f fc [binary, 4 bytes]
2023-06-25 21:29:50,450 DEBUG protocol 22268 13044 % received keepalive pong
2023-06-25 21:29:50,494 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414,"t":1687...":6,"r":1687717790845}]' [115 bytes]
2023-06-25 21:29:51,791 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414.12,"t":1...":1,"r":1687717792141}]' [124 bytes]
2023-06-25 21:29:51,822 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415.83,"t":1...":1,"r":1687717792172}]' [124 bytes]
2023-06-25 21:29:53,410 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415.2,"t":16...":1,"r":1687717793760}]' [356 bytes]
2023-06-25 21:29:53,411 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414.98,"t":1...":1,"r":1687717793760}]' [368 bytes]
2023-06-25 21:29:53,411 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.1,"t":16...":1,"r":1687717793760}]' [123 bytes]
2023-06-25 21:29:53,411 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.08,"t":1...":1,"r":1687717793760}]' [118 bytes]
2023-06-25 21:29:53,412 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.06,"t":1...":1,"r":1687717793762}]' [124 bytes]
2023-06-25 21:29:53,413 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.03,"t":1...":1,"r":1687717793763}]' [609 bytes]
2023-06-25 21:29:53,414 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.5,"t":16...":1,"r":1687717793763}]' [368 bytes]
2023-06-25 21:29:54,750 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:29:54,750 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:29:55,040 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.47,"t":1...":1,"r":1687717795390}]' [124 bytes]
2023-06-25 21:29:55,158 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.47,"t":1...":1,"r":1687717795508}]' [124 bytes]
2023-06-25 21:29:55,334 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.47,"t":1...":1,"r":1687717795684}]' [124 bytes]
2023-06-25 21:29:55,756 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418,"t":1687...":6,"r":1687717796105}]' [121 bytes]
2023-06-25 21:29:55,764 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418,"t":1687...":6,"r":1687717796114}]' [121 bytes]
2023-06-25 21:29:55,869 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414.31,"t":1...":1,"r":1687717796219}]' [124 bytes]
2023-06-25 21:29:56,325 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.47,"t":1...":1,"r":1687717796675}]' [124 bytes]
2023-06-25 21:29:56,325 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.47,"t":1...":1,"r":1687717796675}]' [121 bytes]
2023-06-25 21:29:56,325 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.47,"t":1...":1,"r":1687717796675}]' [118 bytes]
2023-06-25 21:29:56,325 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.47,"t":1...":1,"r":1687717796675}]' [121 bytes]
2023-06-25 21:29:56,325 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.47,"t":1...":1,"r":1687717796675}]' [122 bytes]
2023-06-25 21:29:56,326 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.47,"t":1...":1,"r":1687717796675}]' [122 bytes]
2023-06-25 21:29:56,326 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414.1,"t":16...":1,"r":1687717796675}]' [123 bytes]
2023-06-25 21:29:56,326 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414.31,"t":1...":1,"r":1687717796675}]' [118 bytes]
2023-06-25 21:29:56,326 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414.32,"t":1...":1,"r":1687717796675}]' [246 bytes]
2023-06-25 21:29:56,326 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414.41,"t":1...":1,"r":1687717796675}]' [124 bytes]
2023-06-25 21:29:56,326 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414.8,"t":16...":1,"r":1687717796675}]' [123 bytes]
2023-06-25 21:29:56,326 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415.1,"t":16...":1,"r":1687717796675}]' [123 bytes]
2023-06-25 21:29:56,326 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415.46,"t":1...":1,"r":1687717796675}]' [124 bytes]
2023-06-25 21:29:56,792 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.47,"t":1...":1,"r":1687717797142}]' [123 bytes]
2023-06-25 21:29:58,150 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.47,"t":1...":1,"r":1687717798500}]' [247 bytes]
2023-06-25 21:29:58,206 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.46,"t":1...":1,"r":1687717798556}]' [124 bytes]
2023-06-25 21:29:58,206 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.2,"t":16...":1,"r":1687717798556}]' [123 bytes]
2023-06-25 21:29:58,712 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30414.78,"t":1...":1,"r":1687717799062}]' [124 bytes]
2023-06-25 21:29:59,084 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30415.65,"t":1...":1,"r":1687717799434}]' [124 bytes]
2023-06-25 21:29:59,675 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30418,"t":1687...":6,"r":1687717800025}]' [118 bytes]
2023-06-25 21:29:59,750 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:29:59,750 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:30:00,474 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.44,"t":1...":1,"r":1687717800824}]' [124 bytes]
2023-06-25 21:30:00,655 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.45,"t":1...":1,"r":1687717801005}]' [124 bytes]
2023-06-25 21:30:00,829 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30413.45,"t":1...":1,"r":1687717801179}]' [124 bytes]
2023-06-25 21:30:02,696 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.57,"t":1...":1,"r":1687717803046}]' [124 bytes]
2023-06-25 21:30:02,977 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.85,"t":1...":1,"r":1687717803326}]' [123 bytes]
2023-06-25 21:30:03,950 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30412.82,"t":1...":1,"r":1687717804300}]' [124 bytes]
2023-06-25 21:30:04,750 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:30:04,750 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:30:04,940 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.57,"t":1...":1,"r":1687717805291}]' [124 bytes]
2023-06-25 21:30:05,417 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30411.56,"t":1...":1,"r":1687717805767}]' [124 bytes]
2023-06-25 21:30:05,548 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30430,"t":1687...":2,"r":1687717805899}]' [117 bytes]
2023-06-25 21:30:05,549 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30430,"t":1687...":2,"r":1687717805899}]' [117 bytes]
2023-06-25 21:30:05,591 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30430,"t":1687...":2,"r":1687717805942}]' [233 bytes]
2023-06-25 21:30:05,636 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.33,"t":1...":1,"r":1687717805986}]' [124 bytes]
2023-06-25 21:30:05,685 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.21,"t":1...":1,"r":1687717806033}]' [124 bytes]
2023-06-25 21:30:06,193 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421,"t":1687...":2,"r":1687717806543}]' [118 bytes]
2023-06-25 21:30:06,251 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30421,"t":1687...":2,"r":1687717806601}]' [118 bytes]
2023-06-25 21:30:06,767 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.2,"t":16...":1,"r":1687717807118}]' [121 bytes]
2023-06-25 21:30:06,767 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30407.2,"t":16...":1,"r":1687717807118}]' [121 bytes]
2023-06-25 21:30:07,090 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.64,"t":1...":1,"r":1687717807441}]' [124 bytes]
2023-06-25 21:30:07,228 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.47,"t":1...":1,"r":1687717807578}]' [124 bytes]
2023-06-25 21:30:07,401 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.72,"t":1...":1,"r":1687717807752}]' [124 bytes]
2023-06-25 21:30:07,917 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.37,"t":1...":1,"r":1687717808268}]' [121 bytes]
2023-06-25 21:30:07,917 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.37,"t":1...":1,"r":1687717808268}]' [241 bytes]
2023-06-25 21:30:07,973 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.36,"t":1...":1,"r":1687717808324}]' [124 bytes]
2023-06-25 21:30:08,070 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30406.36,"t":1...":1,"r":1687717808421}]' [123 bytes]
2023-06-25 21:30:08,753 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.92,"t":1...":1,"r":1687717809103}]' [124 bytes]
2023-06-25 21:30:09,750 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:30:09,750 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:30:09,779 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.75,"t":1...":1,"r":1687717810130}]' [124 bytes]
2023-06-25 21:30:09,936 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.74,"t":1...":1,"r":1687717810224}]' [121 bytes]
2023-06-25 21:30:10,046 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.47,"t":1...":1,"r":1687717810309}]' [121 bytes]
2023-06-25 21:30:10,047 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.47,"t":1...":1,"r":1687717810309}]' [239 bytes]
2023-06-25 21:30:10,462 DEBUG protocol 22268 13044 % sending keepalive ping
2023-06-25 21:30:10,462 DEBUG protocol 22268 13044 > PING 09 3d d5 e4 [binary, 4 bytes]
2023-06-25 21:30:10,560 DEBUG protocol 22268 13044 < PONG 09 3d d5 e4 [binary, 4 bytes]
2023-06-25 21:30:10,560 DEBUG protocol 22268 13044 % received keepalive pong
2023-06-25 21:30:10,674 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.49,"t":1...":1,"r":1687717811024}]' [123 bytes]
2023-06-25 21:30:12,068 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.4,"t":16...":1,"r":1687717812418}]' [123 bytes]
2023-06-25 21:30:12,069 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.4,"t":16...":1,"r":1687717812418}]' [479 bytes]
2023-06-25 21:30:12,069 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.53,"t":1...":1,"r":1687717812418}]' [124 bytes]
2023-06-25 21:30:12,177 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.89,"t":1...":1,"r":1687717812528}]' [124 bytes]
2023-06-25 21:30:12,962 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.49,"t":1...":1,"r":1687717813313}]' [118 bytes]
2023-06-25 21:30:12,963 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.48,"t":1...":1,"r":1687717813313}]' [124 bytes]
2023-06-25 21:30:12,968 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.11,"t":1...":1,"r":1687717813318}]' [124 bytes]
2023-06-25 21:30:13,127 DEBUG proactor_events 20888 3296 Using proactor: IocpProactor
2023-06-25 21:30:13,129 DEBUG __init__ 20888 3296 connect: wss://socket.polygon.io/crypto
2023-06-25 21:30:13,151 DEBUG functional 20888 5032 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-25 21:30:13,152 DEBUG functional 20888 5032 
def backend_cleanup():
    return 1

2023-06-25 21:30:13,152 DEBUG functional 20888 5032 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-25 21:30:13,153 DEBUG functional 20888 5032 
def xmap(task, it):
    return 1

2023-06-25 21:30:13,153 DEBUG functional 20888 5032 
def chain(*args, **kwargs):
    return 1

2023-06-25 21:30:13,153 DEBUG functional 20888 5032 
def debug_task(self):
    return 1

2023-06-25 21:30:13,154 DEBUG functional 20888 5032 
def xstarmap(task, it):
    return 1

2023-06-25 21:30:13,154 DEBUG functional 20888 5032 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-25 21:30:13,154 DEBUG functional 20888 5032 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-25 21:30:13,155 DEBUG functional 20888 5032 
def chunks(task, it, n):
    return 1

2023-06-25 21:30:13,155 DEBUG functional 20888 5032 
def get_current_buy_price(symbol):
    return 1

2023-06-25 21:30:13,493 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.12,"t":1...":1,"r":1687717813843}]' [124 bytes]
2023-06-25 21:30:13,933 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.56,"t":1...":1,"r":1687717814277}]' [122 bytes]
2023-06-25 21:30:13,937 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.56,"t":1...":1,"r":1687717814288}]' [124 bytes]
2023-06-25 21:30:14,341 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.84,"t":1...":1,"r":1687717814689}]' [124 bytes]
2023-06-25 21:30:14,750 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:30:14,750 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:30:15,534 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.18,"t":1...":1,"r":1687717815885}]' [122 bytes]
2023-06-25 21:30:15,535 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.18,"t":1...":1,"r":1687717815885}]' [483 bytes]
2023-06-25 21:30:15,618 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.74,"t":1...":1,"r":1687717815966}]' [123 bytes]
2023-06-25 21:30:16,045 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.08,"t":1...":1,"r":1687717816395}]' [124 bytes]
2023-06-25 21:30:16,253 DEBUG protocol 22268 13044 < TEXT '[{"ev":"status","status":"max_connections","mes...onnections exceeded."}]' [96 bytes]
2023-06-25 21:30:16,253 DEBUG protocol 22268 13044 < CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:30:16,253 DEBUG protocol 22268 13044 = connection is CLOSING
2023-06-25 21:30:16,253 DEBUG protocol 22268 13044 > CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:30:16,253 DEBUG protocol 22268 13044 = connection is CLOSED
2023-06-25 21:30:16,254 DEBUG __init__ 22268 13044 status: Maximum number of connections exceeded.
2023-06-25 21:30:16,254 DEBUG protocol 22268 13044 x closing TCP connection
2023-06-25 21:30:16,255 DEBUG __init__ 22268 13044 connection closed (ERR): received 1008 (policy violation); then sent 1008 (policy violation)
2023-06-25 21:30:16,358 DEBUG protocol 22268 13044 = connection is CONNECTING
2023-06-25 21:30:16,465 DEBUG client 22268 13044 > GET /crypto HTTP/1.1
2023-06-25 21:30:16,465 DEBUG client 22268 13044 > Host: socket.polygon.io
2023-06-25 21:30:16,465 DEBUG client 22268 13044 > Upgrade: websocket
2023-06-25 21:30:16,465 DEBUG client 22268 13044 > Connection: Upgrade
2023-06-25 21:30:16,465 DEBUG client 22268 13044 > Sec-WebSocket-Key: Utn7NDeDl4pHR006fbp16Q==
2023-06-25 21:30:16,466 DEBUG client 22268 13044 > Sec-WebSocket-Version: 13
2023-06-25 21:30:16,466 DEBUG client 22268 13044 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:30:16,466 DEBUG client 22268 13044 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:30:16,504 DEBUG proactor_events 10792 13436 Using proactor: IocpProactor
2023-06-25 21:30:16,508 DEBUG __init__ 10792 13436 connect: wss://socket.polygon.io/crypto
2023-06-25 21:30:16,663 DEBUG proactor_events 6908 13008 Using proactor: IocpProactor
2023-06-25 21:30:16,669 DEBUG client 22268 13044 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:30:16,668 DEBUG __init__ 6908 13008 connect: wss://socket.polygon.io/crypto
2023-06-25 21:30:16,669 DEBUG client 22268 13044 < Server: nginx/1.19.2
2023-06-25 21:30:16,669 DEBUG client 22268 13044 < Date: Sun, 25 Jun 2023 18:30:17 GMT
2023-06-25 21:30:16,669 DEBUG client 22268 13044 < Connection: upgrade
2023-06-25 21:30:16,669 DEBUG client 22268 13044 < Upgrade: websocket
2023-06-25 21:30:16,669 DEBUG client 22268 13044 < Sec-WebSocket-Accept: ehm0oAePkmTNGiQ3WF4L1vbeh8A=
2023-06-25 21:30:16,669 DEBUG client 22268 13044 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:30:16,670 DEBUG protocol 22268 13044 = connection is OPEN
2023-06-25 21:30:16,670 DEBUG protocol 22268 13044 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:30:16,670 DEBUG __init__ 22268 13044 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:30:16,670 DEBUG __init__ 22268 13044 authing...
2023-06-25 21:30:16,671 DEBUG protocol 22268 13044 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:30:16,676 DEBUG proactor_events 19356 12252 Using proactor: IocpProactor
2023-06-25 21:30:16,682 DEBUG __init__ 19356 12252 connect: wss://socket.polygon.io/crypto
2023-06-25 21:30:16,703 DEBUG proactor_events 18696 9640 Using proactor: IocpProactor
2023-06-25 21:30:16,708 DEBUG __init__ 18696 9640 connect: wss://socket.polygon.io/crypto
2023-06-25 21:30:16,732 DEBUG proactor_events 14796 11640 Using proactor: IocpProactor
2023-06-25 21:30:16,735 DEBUG proactor_events 17132 2384 Using proactor: IocpProactor
2023-06-25 21:30:16,737 DEBUG __init__ 14796 11640 connect: wss://socket.polygon.io/crypto
2023-06-25 21:30:16,739 DEBUG proactor_events 22400 22492 Using proactor: IocpProactor
2023-06-25 21:30:16,739 DEBUG __init__ 17132 2384 connect: wss://socket.polygon.io/crypto
2023-06-25 21:30:16,743 DEBUG proactor_events 528 14080 Using proactor: IocpProactor
2023-06-25 21:30:16,743 DEBUG __init__ 22400 22492 connect: wss://socket.polygon.io/crypto
2023-06-25 21:30:16,745 DEBUG __init__ 528 14080 connect: wss://socket.polygon.io/crypto
2023-06-25 21:30:16,759 DEBUG proactor_events 22248 9332 Using proactor: IocpProactor
2023-06-25 21:30:16,764 DEBUG __init__ 22248 9332 connect: wss://socket.polygon.io/crypto
2023-06-25 21:30:16,769 DEBUG proactor_events 17424 18872 Using proactor: IocpProactor
2023-06-25 21:30:16,772 DEBUG __init__ 17424 18872 connect: wss://socket.polygon.io/crypto
2023-06-25 21:30:16,778 DEBUG protocol 22268 13044 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:30:16,779 DEBUG __init__ 22268 13044 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:30:16,779 DEBUG __init__ 22268 13044 reconciling: set() {'XT.BTC-USD'}
2023-06-25 21:30:16,779 DEBUG __init__ 22268 13044 subbing: XT.BTC-USD
2023-06-25 21:30:16,780 DEBUG protocol 22268 13044 > TEXT '{"action": "subscribe", "params": "XT.BTC-USD"}' [47 bytes]
2023-06-25 21:30:16,816 DEBUG proactor_events 4592 14860 Using proactor: IocpProactor
2023-06-25 21:30:16,819 DEBUG __init__ 4592 14860 connect: wss://socket.polygon.io/crypto
2023-06-25 21:30:16,835 DEBUG proactor_events 9268 3916 Using proactor: IocpProactor
2023-06-25 21:30:16,838 DEBUG __init__ 9268 3916 connect: wss://socket.polygon.io/crypto
2023-06-25 21:30:16,889 DEBUG protocol 22268 13044 < TEXT '[{"ev":"status","status":"success","message":"s...ribed to: XT.BTC-USD"}]' [74 bytes]
2023-06-25 21:30:16,889 DEBUG __init__ 22268 13044 status: subscribed to: XT.BTC-USD
2023-06-25 21:30:17,391 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.62,"t":1...":1,"r":1687717817741}]' [122 bytes]
2023-06-25 21:30:17,391 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.62,"t":1...":1,"r":1687717817741}]' [361 bytes]
2023-06-25 21:30:17,439 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.92,"t":1...":1,"r":1687717817789}]' [124 bytes]
2023-06-25 21:30:17,694 DEBUG protocol 22268 13044 < TEXT '[{"ev":"status","status":"max_connections","mes...onnections exceeded."}]' [96 bytes]
2023-06-25 21:30:17,695 DEBUG protocol 22268 13044 < CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:30:17,695 DEBUG protocol 22268 13044 = connection is CLOSING
2023-06-25 21:30:17,695 DEBUG protocol 22268 13044 > CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:30:17,695 DEBUG protocol 22268 13044 = connection is CLOSED
2023-06-25 21:30:17,696 DEBUG __init__ 22268 13044 status: Maximum number of connections exceeded.
2023-06-25 21:30:17,696 DEBUG protocol 22268 13044 x closing TCP connection
2023-06-25 21:30:17,696 DEBUG __init__ 22268 13044 connection closed (ERR): received 1008 (policy violation); then sent 1008 (policy violation)
2023-06-25 21:30:17,796 DEBUG protocol 22268 13044 = connection is CONNECTING
2023-06-25 21:30:17,903 DEBUG client 22268 13044 > GET /crypto HTTP/1.1
2023-06-25 21:30:17,903 DEBUG client 22268 13044 > Host: socket.polygon.io
2023-06-25 21:30:17,903 DEBUG client 22268 13044 > Upgrade: websocket
2023-06-25 21:30:17,903 DEBUG client 22268 13044 > Connection: Upgrade
2023-06-25 21:30:17,903 DEBUG client 22268 13044 > Sec-WebSocket-Key: pHdQGF3Il1Jjrz6+BbuEvg==
2023-06-25 21:30:17,903 DEBUG client 22268 13044 > Sec-WebSocket-Version: 13
2023-06-25 21:30:17,903 DEBUG client 22268 13044 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:30:17,903 DEBUG client 22268 13044 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:30:18,103 DEBUG client 22268 13044 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:30:18,103 DEBUG client 22268 13044 < Server: nginx/1.19.2
2023-06-25 21:30:18,103 DEBUG client 22268 13044 < Date: Sun, 25 Jun 2023 18:30:18 GMT
2023-06-25 21:30:18,103 DEBUG client 22268 13044 < Connection: upgrade
2023-06-25 21:30:18,103 DEBUG client 22268 13044 < Upgrade: websocket
2023-06-25 21:30:18,104 DEBUG client 22268 13044 < Sec-WebSocket-Accept: cAHTENQJT0inz501Jcm+CeSeeOY=
2023-06-25 21:30:18,104 DEBUG client 22268 13044 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:30:18,104 DEBUG protocol 22268 13044 = connection is OPEN
2023-06-25 21:30:18,104 DEBUG protocol 22268 13044 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:30:18,104 DEBUG __init__ 22268 13044 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:30:18,105 DEBUG __init__ 22268 13044 authing...
2023-06-25 21:30:18,105 DEBUG protocol 22268 13044 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:30:18,206 DEBUG protocol 22268 13044 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:30:18,206 DEBUG __init__ 22268 13044 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:30:18,207 DEBUG __init__ 22268 13044 reconciling: set() {'XT.BTC-USD'}
2023-06-25 21:30:18,207 DEBUG __init__ 22268 13044 subbing: XT.BTC-USD
2023-06-25 21:30:18,207 DEBUG protocol 22268 13044 > TEXT '{"action": "subscribe", "params": "XT.BTC-USD"}' [47 bytes]
2023-06-25 21:30:18,306 DEBUG protocol 22268 13044 < TEXT '[{"ev":"status","status":"success","message":"s...ribed to: XT.BTC-USD"}]' [74 bytes]
2023-06-25 21:30:18,307 DEBUG __init__ 22268 13044 status: subscribed to: XT.BTC-USD
2023-06-25 21:30:18,976 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.41,"t":1...":1,"r":1687717819320}]' [124 bytes]
2023-06-25 21:30:19,072 DEBUG proactor_events 6880 11012 Using proactor: IocpProactor
2023-06-25 21:30:19,075 DEBUG __init__ 6880 11012 connect: wss://socket.polygon.io/crypto
2023-06-25 21:30:19,111 DEBUG proactor_events 21892 11424 Using proactor: IocpProactor
2023-06-25 21:30:19,111 DEBUG proactor_events 9300 3568 Using proactor: IocpProactor
2023-06-25 21:30:19,113 DEBUG proactor_events 22072 22320 Using proactor: IocpProactor
2023-06-25 21:30:19,114 DEBUG __init__ 21892 11424 connect: wss://socket.polygon.io/crypto
2023-06-25 21:30:19,113 DEBUG __init__ 9300 3568 connect: wss://socket.polygon.io/crypto
2023-06-25 21:30:19,117 DEBUG __init__ 22072 22320 connect: wss://socket.polygon.io/crypto
2023-06-25 21:30:19,856 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.49,"t":1...":1,"r":1687717820207}]' [122 bytes]
2023-06-25 21:30:19,858 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.49,"t":1...":1,"r":1687717820208}]' [122 bytes]
2023-06-25 21:30:20,716 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.7,"t":16...":1,"r":1687717821067}]' [121 bytes]
2023-06-25 21:30:20,717 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.7,"t":16...":1,"r":1687717821067}]' [839 bytes]
2023-06-25 21:30:21,126 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.65,"t":1...":1,"r":1687717821477}]' [123 bytes]
2023-06-25 21:30:21,126 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.95,"t":1...":1,"r":1687717821477}]' [124 bytes]
2023-06-25 21:30:21,164 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.96,"t":1...":1,"r":1687717821512}]' [122 bytes]
2023-06-25 21:30:21,274 DEBUG protocol 22268 13044 < TEXT '[{"ev":"status","status":"max_connections","mes...onnections exceeded."}]' [96 bytes]
2023-06-25 21:30:21,274 DEBUG protocol 22268 13044 < CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:30:21,274 DEBUG protocol 22268 13044 = connection is CLOSING
2023-06-25 21:30:21,274 DEBUG protocol 22268 13044 > CLOSE 1008 (policy violation) [2 bytes]
2023-06-25 21:30:21,275 DEBUG protocol 22268 13044 = connection is CLOSED
2023-06-25 21:30:21,275 DEBUG __init__ 22268 13044 status: Maximum number of connections exceeded.
2023-06-25 21:30:21,276 DEBUG protocol 22268 13044 x closing TCP connection
2023-06-25 21:30:21,276 DEBUG __init__ 22268 13044 connection closed (ERR): received 1008 (policy violation); then sent 1008 (policy violation)
2023-06-25 21:30:21,380 DEBUG protocol 22268 13044 = connection is CONNECTING
2023-06-25 21:30:21,485 DEBUG client 22268 13044 > GET /crypto HTTP/1.1
2023-06-25 21:30:21,485 DEBUG client 22268 13044 > Host: socket.polygon.io
2023-06-25 21:30:21,485 DEBUG client 22268 13044 > Upgrade: websocket
2023-06-25 21:30:21,486 DEBUG client 22268 13044 > Connection: Upgrade
2023-06-25 21:30:21,486 DEBUG client 22268 13044 > Sec-WebSocket-Key: F5uIIOe77tR3GchZ2fjHFw==
2023-06-25 21:30:21,486 DEBUG client 22268 13044 > Sec-WebSocket-Version: 13
2023-06-25 21:30:21,486 DEBUG client 22268 13044 > Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
2023-06-25 21:30:21,486 DEBUG client 22268 13044 > User-Agent: Python/3.10 websockets/10.4
2023-06-25 21:30:21,689 DEBUG client 22268 13044 < HTTP/1.1 101 Switching Protocols
2023-06-25 21:30:21,689 DEBUG client 22268 13044 < Server: nginx/1.19.2
2023-06-25 21:30:21,689 DEBUG client 22268 13044 < Date: Sun, 25 Jun 2023 18:30:22 GMT
2023-06-25 21:30:21,689 DEBUG client 22268 13044 < Connection: upgrade
2023-06-25 21:30:21,689 DEBUG client 22268 13044 < Upgrade: websocket
2023-06-25 21:30:21,689 DEBUG client 22268 13044 < Sec-WebSocket-Accept: n6KZ7DTyp1V8n7jR6OK80aTBmzU=
2023-06-25 21:30:21,689 DEBUG client 22268 13044 < Strict-Transport-Security: max-age=15724800; includeSubDomains
2023-06-25 21:30:21,689 DEBUG protocol 22268 13044 = connection is OPEN
2023-06-25 21:30:21,690 DEBUG protocol 22268 13044 < TEXT '[{"ev":"status","status":"connected","message":"Connected Successfully"}]' [73 bytes]
2023-06-25 21:30:21,690 DEBUG __init__ 22268 13044 connected: [{"ev":"status","status":"connected","message":"Connected Successfully"}]
2023-06-25 21:30:21,690 DEBUG __init__ 22268 13044 authing...
2023-06-25 21:30:21,690 DEBUG protocol 22268 13044 > TEXT '{"action": "auth", "params": "znfXR7OLa31mT1BPHuSl60vIl_syeOoQ"}' [64 bytes]
2023-06-25 21:30:21,792 DEBUG protocol 22268 13044 < TEXT '[{"ev":"status","status":"auth_success","message":"authenticated"}]' [67 bytes]
2023-06-25 21:30:21,792 DEBUG __init__ 22268 13044 authed: [{"ev":"status","status":"auth_success","message":"authenticated"}]
2023-06-25 21:30:21,793 DEBUG __init__ 22268 13044 reconciling: set() {'XT.BTC-USD'}
2023-06-25 21:30:21,793 DEBUG __init__ 22268 13044 subbing: XT.BTC-USD
2023-06-25 21:30:21,793 DEBUG protocol 22268 13044 > TEXT '{"action": "subscribe", "params": "XT.BTC-USD"}' [47 bytes]
2023-06-25 21:30:21,896 DEBUG protocol 22268 13044 < TEXT '[{"ev":"status","status":"success","message":"s...ribed to: XT.BTC-USD"}]' [74 bytes]
2023-06-25 21:30:21,896 DEBUG __init__ 22268 13044 status: subscribed to: XT.BTC-USD
2023-06-25 21:30:22,203 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.79,"t":1...":1,"r":1687717822554}]' [124 bytes]
2023-06-25 21:30:23,799 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.2,"t":16...:23,"r":1687717824150}]' [146 bytes]
2023-06-25 21:30:24,849 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.1,"t":16...":1,"r":1687717825199}]' [121 bytes]
2023-06-25 21:30:24,849 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.1,"t":16...":1,"r":1687717825199}]' [121 bytes]
2023-06-25 21:30:25,048 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.25,"t":1...":1,"r":1687717825399}]' [124 bytes]
2023-06-25 21:30:25,722 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.09,"t":1...":1,"r":1687717826073}]' [124 bytes]
2023-06-25 21:30:26,187 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.32,"t":1...":1,"r":1687717826538}]' [124 bytes]
2023-06-25 21:30:26,423 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.32,"t":1...":1,"r":1687717826773}]' [124 bytes]
2023-06-25 21:30:26,423 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.45,"t":1...":1,"r":1687717826774}]' [366 bytes]
2023-06-25 21:30:26,457 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.31,"t":1...":1,"r":1687717826808}]' [124 bytes]
2023-06-25 21:30:26,689 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:30:26,689 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:30:26,786 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.65,"t":1...":1,"r":1687717827137}]' [122 bytes]
2023-06-25 21:30:26,787 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30400.65,"t":1...":1,"r":1687717827137}]' [124 bytes]
2023-06-25 21:30:28,293 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30405.32,"t":1...":1,"r":1687717828645}]' [124 bytes]
2023-06-25 21:30:29,051 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.2,"t":16...":1,"r":1687717829402}]' [123 bytes]
2023-06-25 21:30:29,052 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.2,"t":16...":1,"r":1687717829402}]' [123 bytes]
2023-06-25 21:30:29,285 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.2,"t":16...:23,"r":1687717829636}]' [146 bytes]
2023-06-25 21:30:30,284 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.42,"t":1...":1,"r":1687717830635}]' [124 bytes]
2023-06-25 21:30:30,284 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30403.42,"t":1...":1,"r":1687717830635}]' [118 bytes]
2023-06-25 21:30:30,988 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.02,"t":1...":1,"r":1687717831332}]' [124 bytes]
2023-06-25 21:30:31,433 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.02,"t":1...":1,"r":1687717831776}]' [124 bytes]
2023-06-25 21:30:31,453 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30404.02,"t":1...":1,"r":1687717831805}]' [122 bytes]
2023-06-25 21:30:31,688 DEBUG protocol 22268 13044 < PING '' [0 bytes]
2023-06-25 21:30:31,689 DEBUG protocol 22268 13044 > PONG '' [0 bytes]
2023-06-25 21:30:32,588 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.09,"t":1...":1,"r":1687717832940}]' [121 bytes]
2023-06-25 21:30:32,786 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30390.2,"t":16...:23,"r":1687717833138}]' [151 bytes]
2023-06-25 21:30:33,338 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.58,"t":1...":1,"r":1687717833690}]' [124 bytes]
2023-06-25 21:30:33,532 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.1,"t":16...":1,"r":1687717833884}]' [119 bytes]
2023-06-25 21:30:33,974 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.28,"t":1...":1,"r":1687717834326}]' [123 bytes]
2023-06-25 21:30:34,350 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30402.27,"t":1...":1,"r":1687717834702}]' [123 bytes]
2023-06-25 21:30:34,382 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.11,"t":1...":1,"r":1687717834734}]' [118 bytes]
2023-06-25 21:30:34,382 DEBUG protocol 22268 13044 < TEXT '[{"ev":"XT","pair":"BTC-USD","p":30401.1,"t":16...":1,"r":1687717834734}]' [123 bytes]
2023-06-26 11:13:41,778 INFO autoreload 21308 6540 Watching for file changes with StatReloader
2023-06-26 11:14:00,105 DEBUG functional 14548 13060 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 11:14:00,106 DEBUG functional 14548 13060 
def backend_cleanup():
    return 1

2023-06-26 11:14:00,106 DEBUG functional 14548 13060 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 11:14:00,106 DEBUG functional 14548 13060 
def xmap(task, it):
    return 1

2023-06-26 11:14:00,107 DEBUG functional 14548 13060 
def chain(*args, **kwargs):
    return 1

2023-06-26 11:14:00,107 DEBUG functional 14548 13060 
def debug_task(self):
    return 1

2023-06-26 11:14:00,107 DEBUG functional 14548 13060 
def xstarmap(task, it):
    return 1

2023-06-26 11:14:00,108 DEBUG functional 14548 13060 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 11:14:00,108 DEBUG functional 14548 13060 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 11:14:00,108 DEBUG functional 14548 13060 
def chunks(task, it, n):
    return 1

2023-06-26 11:14:00,109 DEBUG functional 14548 13060 
def get_current_buy_price(symbol):
    return 1

2023-06-26 11:15:14,997 INFO autoreload 21956 21772 Watching for file changes with StatReloader
2023-06-26 11:15:24,937 DEBUG functional 11980 8956 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 11:15:24,937 DEBUG functional 11980 8956 
def backend_cleanup():
    return 1

2023-06-26 11:15:24,938 DEBUG functional 11980 8956 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 11:15:24,938 DEBUG functional 11980 8956 
def xmap(task, it):
    return 1

2023-06-26 11:15:24,939 DEBUG functional 11980 8956 
def chain(*args, **kwargs):
    return 1

2023-06-26 11:15:24,939 DEBUG functional 11980 8956 
def debug_task(self):
    return 1

2023-06-26 11:15:24,939 DEBUG functional 11980 8956 
def xstarmap(task, it):
    return 1

2023-06-26 11:15:24,940 DEBUG functional 11980 8956 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 11:15:24,940 DEBUG functional 11980 8956 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 11:15:24,940 DEBUG functional 11980 8956 
def chunks(task, it, n):
    return 1

2023-06-26 11:15:24,941 DEBUG functional 11980 8956 
def get_current_buy_price(symbol):
    return 1

2023-06-26 11:15:48,154 DEBUG functional 12512 20760 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 11:15:48,154 DEBUG functional 12512 20760 
def backend_cleanup():
    return 1

2023-06-26 11:15:48,154 DEBUG functional 12512 20760 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 11:15:48,155 DEBUG functional 12512 20760 
def xmap(task, it):
    return 1

2023-06-26 11:15:48,155 DEBUG functional 12512 20760 
def chain(*args, **kwargs):
    return 1

2023-06-26 11:15:48,155 DEBUG functional 12512 20760 
def debug_task(self):
    return 1

2023-06-26 11:15:48,156 DEBUG functional 12512 20760 
def xstarmap(task, it):
    return 1

2023-06-26 11:15:48,156 DEBUG functional 12512 20760 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 11:15:48,156 DEBUG functional 12512 20760 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 11:15:48,157 DEBUG functional 12512 20760 
def chunks(task, it, n):
    return 1

2023-06-26 11:15:48,157 DEBUG functional 12512 20760 
def get_current_buy_price(symbol):
    return 1

2023-06-26 11:16:10,878 INFO autoreload 21956 21772 C:\Users\Evert\Desktop\Django\monreal\monreal\settings.py changed, reloading.
2023-06-26 11:16:19,415 INFO autoreload 7616 14388 Watching for file changes with StatReloader
2023-06-26 11:16:26,343 DEBUG functional 6264 20712 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 11:16:26,344 DEBUG functional 6264 20712 
def backend_cleanup():
    return 1

2023-06-26 11:16:26,344 DEBUG functional 6264 20712 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 11:16:26,344 DEBUG functional 6264 20712 
def xmap(task, it):
    return 1

2023-06-26 11:16:26,345 DEBUG functional 6264 20712 
def chain(*args, **kwargs):
    return 1

2023-06-26 11:16:26,345 DEBUG functional 6264 20712 
def debug_task(self):
    return 1

2023-06-26 11:16:26,345 DEBUG functional 6264 20712 
def xstarmap(task, it):
    return 1

2023-06-26 11:16:26,346 DEBUG functional 6264 20712 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 11:16:26,346 DEBUG functional 6264 20712 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 11:16:26,346 DEBUG functional 6264 20712 
def chunks(task, it, n):
    return 1

2023-06-26 11:16:26,347 DEBUG functional 6264 20712 
def get_current_buy_price(symbol):
    return 1

2023-06-26 11:16:34,855 DEBUG functional 16012 7664 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 11:16:34,855 DEBUG functional 16012 7664 
def backend_cleanup():
    return 1

2023-06-26 11:16:34,856 DEBUG functional 16012 7664 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 11:16:34,856 DEBUG functional 16012 7664 
def xmap(task, it):
    return 1

2023-06-26 11:16:34,857 DEBUG functional 16012 7664 
def chain(*args, **kwargs):
    return 1

2023-06-26 11:16:34,857 DEBUG functional 16012 7664 
def debug_task(self):
    return 1

2023-06-26 11:16:34,857 DEBUG functional 16012 7664 
def xstarmap(task, it):
    return 1

2023-06-26 11:16:34,858 DEBUG functional 16012 7664 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 11:16:34,858 DEBUG functional 16012 7664 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 11:16:34,858 DEBUG functional 16012 7664 
def chunks(task, it, n):
    return 1

2023-06-26 11:16:34,859 DEBUG functional 16012 7664 
def get_current_buy_price(symbol):
    return 1

2023-06-26 11:54:30,147 INFO autoreload 1228 14488 Watching for file changes with StatReloader
2023-06-26 11:54:48,442 DEBUG functional 16268 16016 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 11:54:48,442 DEBUG functional 16268 16016 
def backend_cleanup():
    return 1

2023-06-26 11:54:48,442 DEBUG functional 16268 16016 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 11:54:48,443 DEBUG functional 16268 16016 
def xmap(task, it):
    return 1

2023-06-26 11:54:48,443 DEBUG functional 16268 16016 
def chain(*args, **kwargs):
    return 1

2023-06-26 11:54:48,443 DEBUG functional 16268 16016 
def debug_task(self):
    return 1

2023-06-26 11:54:48,444 DEBUG functional 16268 16016 
def xstarmap(task, it):
    return 1

2023-06-26 11:54:48,444 DEBUG functional 16268 16016 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 11:54:48,445 DEBUG functional 16268 16016 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 11:54:48,445 DEBUG functional 16268 16016 
def chunks(task, it, n):
    return 1

2023-06-26 11:54:48,446 DEBUG functional 16268 16016 
def get_current_buy_price(symbol):
    return 1

2023-06-26 11:55:05,548 DEBUG functional 17792 22836 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 11:55:05,548 DEBUG functional 17792 22836 
def backend_cleanup():
    return 1

2023-06-26 11:55:05,548 DEBUG functional 17792 22836 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 11:55:05,549 DEBUG functional 17792 22836 
def xmap(task, it):
    return 1

2023-06-26 11:55:05,549 DEBUG functional 17792 22836 
def chain(*args, **kwargs):
    return 1

2023-06-26 11:55:05,550 DEBUG functional 17792 22836 
def debug_task(self):
    return 1

2023-06-26 11:55:05,550 DEBUG functional 17792 22836 
def xstarmap(task, it):
    return 1

2023-06-26 11:55:05,551 DEBUG functional 17792 22836 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 11:55:05,551 DEBUG functional 17792 22836 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 11:55:05,551 DEBUG functional 17792 22836 
def chunks(task, it, n):
    return 1

2023-06-26 11:55:05,552 DEBUG functional 17792 22836 
def get_current_buy_price(symbol):
    return 1

2023-06-26 11:57:35,962 INFO autoreload 22652 20340 Watching for file changes with StatReloader
2023-06-26 11:57:50,042 DEBUG functional 8092 23344 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 11:57:50,043 DEBUG functional 8092 23344 
def backend_cleanup():
    return 1

2023-06-26 11:57:50,043 DEBUG functional 8092 23344 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 11:57:50,044 DEBUG functional 8092 23344 
def xmap(task, it):
    return 1

2023-06-26 11:57:50,044 DEBUG functional 8092 23344 
def chain(*args, **kwargs):
    return 1

2023-06-26 11:57:50,044 DEBUG functional 8092 23344 
def debug_task(self):
    return 1

2023-06-26 11:57:50,045 DEBUG functional 8092 23344 
def xstarmap(task, it):
    return 1

2023-06-26 11:57:50,045 DEBUG functional 8092 23344 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 11:57:50,045 DEBUG functional 8092 23344 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 11:57:50,046 DEBUG functional 8092 23344 
def chunks(task, it, n):
    return 1

2023-06-26 11:57:50,046 DEBUG functional 8092 23344 
def get_current_buy_price(symbol):
    return 1

2023-06-26 11:58:01,308 DEBUG functional 23400 22344 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 11:58:01,308 DEBUG functional 23400 22344 
def backend_cleanup():
    return 1

2023-06-26 11:58:01,309 DEBUG functional 23400 22344 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 11:58:01,309 DEBUG functional 23400 22344 
def xmap(task, it):
    return 1

2023-06-26 11:58:01,309 DEBUG functional 23400 22344 
def chain(*args, **kwargs):
    return 1

2023-06-26 11:58:01,310 DEBUG functional 23400 22344 
def debug_task(self):
    return 1

2023-06-26 11:58:01,310 DEBUG functional 23400 22344 
def xstarmap(task, it):
    return 1

2023-06-26 11:58:01,310 DEBUG functional 23400 22344 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 11:58:01,311 DEBUG functional 23400 22344 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 11:58:01,311 DEBUG functional 23400 22344 
def chunks(task, it, n):
    return 1

2023-06-26 11:58:01,311 DEBUG functional 23400 22344 
def get_current_buy_price(symbol):
    return 1

2023-06-26 11:58:39,647 INFO autoreload 5488 1976 Watching for file changes with StatReloader
2023-06-26 11:58:45,898 DEBUG functional 20992 19524 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 11:58:45,899 DEBUG functional 20992 19524 
def backend_cleanup():
    return 1

2023-06-26 11:58:45,899 DEBUG functional 20992 19524 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 11:58:45,900 DEBUG functional 20992 19524 
def xmap(task, it):
    return 1

2023-06-26 11:58:45,900 DEBUG functional 20992 19524 
def chain(*args, **kwargs):
    return 1

2023-06-26 11:58:45,900 DEBUG functional 20992 19524 
def debug_task(self):
    return 1

2023-06-26 11:58:45,901 DEBUG functional 20992 19524 
def xstarmap(task, it):
    return 1

2023-06-26 11:58:45,901 DEBUG functional 20992 19524 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 11:58:45,901 DEBUG functional 20992 19524 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 11:58:45,902 DEBUG functional 20992 19524 
def chunks(task, it, n):
    return 1

2023-06-26 11:58:45,902 DEBUG functional 20992 19524 
def get_current_buy_price(symbol):
    return 1

2023-06-26 11:58:53,926 DEBUG functional 24172 10636 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 11:58:53,926 DEBUG functional 24172 10636 
def backend_cleanup():
    return 1

2023-06-26 11:58:53,927 DEBUG functional 24172 10636 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 11:58:53,927 DEBUG functional 24172 10636 
def xmap(task, it):
    return 1

2023-06-26 11:58:53,927 DEBUG functional 24172 10636 
def chain(*args, **kwargs):
    return 1

2023-06-26 11:58:53,928 DEBUG functional 24172 10636 
def debug_task(self):
    return 1

2023-06-26 11:58:53,928 DEBUG functional 24172 10636 
def xstarmap(task, it):
    return 1

2023-06-26 11:58:53,928 DEBUG functional 24172 10636 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 11:58:53,929 DEBUG functional 24172 10636 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 11:58:53,929 DEBUG functional 24172 10636 
def chunks(task, it, n):
    return 1

2023-06-26 11:58:53,930 DEBUG functional 24172 10636 
def get_current_buy_price(symbol):
    return 1

2023-06-26 12:01:44,356 INFO autoreload 18648 19684 Watching for file changes with StatReloader
2023-06-26 12:01:50,621 DEBUG functional 6580 4512 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:01:50,621 DEBUG functional 6580 4512 
def backend_cleanup():
    return 1

2023-06-26 12:01:50,622 DEBUG functional 6580 4512 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:01:50,622 DEBUG functional 6580 4512 
def xmap(task, it):
    return 1

2023-06-26 12:01:50,622 DEBUG functional 6580 4512 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:01:50,623 DEBUG functional 6580 4512 
def debug_task(self):
    return 1

2023-06-26 12:01:50,623 DEBUG functional 6580 4512 
def xstarmap(task, it):
    return 1

2023-06-26 12:01:50,623 DEBUG functional 6580 4512 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:01:50,624 DEBUG functional 6580 4512 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:01:50,624 DEBUG functional 6580 4512 
def chunks(task, it, n):
    return 1

2023-06-26 12:01:50,624 DEBUG functional 6580 4512 
def get_current_buy_price(symbol):
    return 1

2023-06-26 12:01:59,802 DEBUG functional 18376 5452 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:01:59,802 DEBUG functional 18376 5452 
def backend_cleanup():
    return 1

2023-06-26 12:01:59,803 DEBUG functional 18376 5452 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:01:59,803 DEBUG functional 18376 5452 
def xmap(task, it):
    return 1

2023-06-26 12:01:59,804 DEBUG functional 18376 5452 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:01:59,804 DEBUG functional 18376 5452 
def debug_task(self):
    return 1

2023-06-26 12:01:59,805 DEBUG functional 18376 5452 
def xstarmap(task, it):
    return 1

2023-06-26 12:01:59,805 DEBUG functional 18376 5452 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:01:59,805 DEBUG functional 18376 5452 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:01:59,806 DEBUG functional 18376 5452 
def chunks(task, it, n):
    return 1

2023-06-26 12:01:59,806 DEBUG functional 18376 5452 
def get_current_buy_price(symbol):
    return 1

2023-06-26 12:03:36,311 INFO autoreload 18648 19684 C:\Users\Evert\Desktop\Django\monreal\monreal\settings.py changed, reloading.
2023-06-26 12:03:37,846 INFO autoreload 22000 23456 Watching for file changes with StatReloader
2023-06-26 12:03:43,490 DEBUG functional 18856 13736 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:03:43,491 DEBUG functional 18856 13736 
def backend_cleanup():
    return 1

2023-06-26 12:03:43,491 DEBUG functional 18856 13736 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:03:43,492 DEBUG functional 18856 13736 
def xmap(task, it):
    return 1

2023-06-26 12:03:43,492 DEBUG functional 18856 13736 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:03:43,492 DEBUG functional 18856 13736 
def debug_task(self):
    return 1

2023-06-26 12:03:43,493 DEBUG functional 18856 13736 
def xstarmap(task, it):
    return 1

2023-06-26 12:03:43,493 DEBUG functional 18856 13736 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:03:43,493 DEBUG functional 18856 13736 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:03:43,494 DEBUG functional 18856 13736 
def chunks(task, it, n):
    return 1

2023-06-26 12:03:43,494 DEBUG functional 18856 13736 
def get_current_buy_price(symbol):
    return 1

2023-06-26 12:03:51,126 DEBUG functional 24180 17760 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:03:51,127 DEBUG functional 24180 17760 
def backend_cleanup():
    return 1

2023-06-26 12:03:51,127 DEBUG functional 24180 17760 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:03:51,128 DEBUG functional 24180 17760 
def xmap(task, it):
    return 1

2023-06-26 12:03:51,128 DEBUG functional 24180 17760 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:03:51,128 DEBUG functional 24180 17760 
def debug_task(self):
    return 1

2023-06-26 12:03:51,129 DEBUG functional 24180 17760 
def xstarmap(task, it):
    return 1

2023-06-26 12:03:51,129 DEBUG functional 24180 17760 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:03:51,130 DEBUG functional 24180 17760 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:03:51,130 DEBUG functional 24180 17760 
def chunks(task, it, n):
    return 1

2023-06-26 12:03:51,130 DEBUG functional 24180 17760 
def get_current_buy_price(symbol):
    return 1

2023-06-26 12:05:35,047 INFO autoreload 22000 23456 C:\Users\Evert\Desktop\Django\monreal\monreal\settings.py changed, reloading.
2023-06-26 12:05:36,547 INFO autoreload 23740 16088 Watching for file changes with StatReloader
2023-06-26 12:05:43,416 DEBUG functional 20396 11208 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:05:43,417 DEBUG functional 20396 11208 
def backend_cleanup():
    return 1

2023-06-26 12:05:43,417 DEBUG functional 20396 11208 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:05:43,418 DEBUG functional 20396 11208 
def xmap(task, it):
    return 1

2023-06-26 12:05:43,418 DEBUG functional 20396 11208 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:05:43,418 DEBUG functional 20396 11208 
def debug_task(self):
    return 1

2023-06-26 12:05:43,419 DEBUG functional 20396 11208 
def xstarmap(task, it):
    return 1

2023-06-26 12:05:43,419 DEBUG functional 20396 11208 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:05:43,420 DEBUG functional 20396 11208 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:05:43,421 DEBUG functional 20396 11208 
def chunks(task, it, n):
    return 1

2023-06-26 12:05:43,421 DEBUG functional 20396 11208 
def get_current_buy_price(symbol):
    return 1

2023-06-26 12:05:51,098 DEBUG functional 18300 9228 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:05:51,099 DEBUG functional 18300 9228 
def backend_cleanup():
    return 1

2023-06-26 12:05:51,099 DEBUG functional 18300 9228 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:05:51,099 DEBUG functional 18300 9228 
def xmap(task, it):
    return 1

2023-06-26 12:05:51,100 DEBUG functional 18300 9228 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:05:51,100 DEBUG functional 18300 9228 
def debug_task(self):
    return 1

2023-06-26 12:05:51,100 DEBUG functional 18300 9228 
def xstarmap(task, it):
    return 1

2023-06-26 12:05:51,101 DEBUG functional 18300 9228 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:05:51,101 DEBUG functional 18300 9228 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:05:51,101 DEBUG functional 18300 9228 
def chunks(task, it, n):
    return 1

2023-06-26 12:05:51,102 DEBUG functional 18300 9228 
def get_current_buy_price(symbol):
    return 1

2023-06-26 12:06:10,974 INFO autoreload 23740 16088 C:\Users\Evert\Desktop\Django\monreal\monreal\settings.py changed, reloading.
2023-06-26 12:06:12,587 INFO autoreload 10072 10232 Watching for file changes with StatReloader
2023-06-26 12:06:20,168 DEBUG functional 9428 13388 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:06:20,169 DEBUG functional 9428 13388 
def backend_cleanup():
    return 1

2023-06-26 12:06:20,170 DEBUG functional 9428 13388 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:06:20,170 DEBUG functional 9428 13388 
def xmap(task, it):
    return 1

2023-06-26 12:06:20,171 DEBUG functional 9428 13388 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:06:20,171 DEBUG functional 9428 13388 
def debug_task(self):
    return 1

2023-06-26 12:06:20,171 DEBUG functional 9428 13388 
def xstarmap(task, it):
    return 1

2023-06-26 12:06:20,172 DEBUG functional 9428 13388 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:06:20,172 DEBUG functional 9428 13388 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:06:20,172 DEBUG functional 9428 13388 
def chunks(task, it, n):
    return 1

2023-06-26 12:06:20,173 DEBUG functional 9428 13388 
def get_current_buy_price(symbol):
    return 1

2023-06-26 12:09:48,776 INFO autoreload 10072 10232 C:\Users\Evert\Desktop\Django\monreal\monreal\celery.py changed, reloading.
2023-06-26 12:09:50,335 INFO autoreload 3172 16820 Watching for file changes with StatReloader
2023-06-26 12:09:57,701 DEBUG functional 24088 11428 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:09:57,701 DEBUG functional 24088 11428 
def backend_cleanup():
    return 1

2023-06-26 12:09:57,702 DEBUG functional 24088 11428 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:09:57,702 DEBUG functional 24088 11428 
def xmap(task, it):
    return 1

2023-06-26 12:09:57,702 DEBUG functional 24088 11428 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:09:57,703 DEBUG functional 24088 11428 
def debug_task(self):
    return 1

2023-06-26 12:09:57,703 DEBUG functional 24088 11428 
def xstarmap(task, it):
    return 1

2023-06-26 12:09:57,703 DEBUG functional 24088 11428 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:09:57,704 DEBUG functional 24088 11428 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:09:57,704 DEBUG functional 24088 11428 
def chunks(task, it, n):
    return 1

2023-06-26 12:09:57,704 DEBUG functional 24088 11428 
def get_current_buy_price(symbol):
    return 1

2023-06-26 12:10:05,385 DEBUG functional 11376 8568 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:10:05,386 DEBUG functional 11376 8568 
def backend_cleanup():
    return 1

2023-06-26 12:10:05,386 DEBUG functional 11376 8568 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:10:05,387 DEBUG functional 11376 8568 
def xmap(task, it):
    return 1

2023-06-26 12:10:05,387 DEBUG functional 11376 8568 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:10:05,387 DEBUG functional 11376 8568 
def debug_task(self):
    return 1

2023-06-26 12:10:05,388 DEBUG functional 11376 8568 
def xstarmap(task, it):
    return 1

2023-06-26 12:10:05,388 DEBUG functional 11376 8568 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:10:05,388 DEBUG functional 11376 8568 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:10:05,389 DEBUG functional 11376 8568 
def chunks(task, it, n):
    return 1

2023-06-26 12:10:05,389 DEBUG functional 11376 8568 
def get_current_buy_price(symbol):
    return 1

2023-06-26 12:11:13,300 INFO autoreload 3172 16820 C:\Users\Evert\Desktop\Django\monreal\monreal\settings.py changed, reloading.
2023-06-26 12:11:14,968 INFO autoreload 16904 15448 Watching for file changes with StatReloader
2023-06-26 12:11:21,290 DEBUG functional 10140 9556 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:11:21,291 DEBUG functional 10140 9556 
def backend_cleanup():
    return 1

2023-06-26 12:11:21,291 DEBUG functional 10140 9556 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:11:21,292 DEBUG functional 10140 9556 
def xmap(task, it):
    return 1

2023-06-26 12:11:21,292 DEBUG functional 10140 9556 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:11:21,292 DEBUG functional 10140 9556 
def debug_task(self):
    return 1

2023-06-26 12:11:21,293 DEBUG functional 10140 9556 
def xstarmap(task, it):
    return 1

2023-06-26 12:11:21,293 DEBUG functional 10140 9556 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:11:21,294 DEBUG functional 10140 9556 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:11:21,294 DEBUG functional 10140 9556 
def chunks(task, it, n):
    return 1

2023-06-26 12:11:21,295 DEBUG functional 10140 9556 
def get_current_buy_price(symbol):
    return 1

2023-06-26 12:11:27,783 DEBUG functional 13168 11764 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:11:27,784 DEBUG functional 13168 11764 
def backend_cleanup():
    return 1

2023-06-26 12:11:27,784 DEBUG functional 13168 11764 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:11:27,785 DEBUG functional 13168 11764 
def xmap(task, it):
    return 1

2023-06-26 12:11:27,785 DEBUG functional 13168 11764 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:11:27,785 DEBUG functional 13168 11764 
def debug_task(self):
    return 1

2023-06-26 12:11:27,786 DEBUG functional 13168 11764 
def xstarmap(task, it):
    return 1

2023-06-26 12:11:27,786 DEBUG functional 13168 11764 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:11:27,786 DEBUG functional 13168 11764 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:11:27,787 DEBUG functional 13168 11764 
def chunks(task, it, n):
    return 1

2023-06-26 12:11:27,787 DEBUG functional 13168 11764 
def get_current_buy_price(symbol):
    return 1

2023-06-26 12:15:16,295 INFO autoreload 9264 14672 Watching for file changes with StatReloader
2023-06-26 12:15:30,391 DEBUG functional 17320 23704 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:15:30,392 DEBUG functional 17320 23704 
def backend_cleanup():
    return 1

2023-06-26 12:15:30,392 DEBUG functional 17320 23704 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:15:30,393 DEBUG functional 17320 23704 
def debug_task(self):
    return 1

2023-06-26 12:15:30,393 DEBUG functional 17320 23704 
def xmap(task, it):
    return 1

2023-06-26 12:15:30,393 DEBUG functional 17320 23704 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:15:30,394 DEBUG functional 17320 23704 
def xstarmap(task, it):
    return 1

2023-06-26 12:15:30,394 DEBUG functional 17320 23704 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:15:30,394 DEBUG functional 17320 23704 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:15:30,395 DEBUG functional 17320 23704 
def chunks(task, it, n):
    return 1

2023-06-26 12:15:50,920 DEBUG functional 7160 23124 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:15:50,921 DEBUG functional 7160 23124 
def backend_cleanup():
    return 1

2023-06-26 12:15:50,921 DEBUG functional 7160 23124 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:15:50,922 DEBUG functional 7160 23124 
def debug_task(self):
    return 1

2023-06-26 12:15:50,922 DEBUG functional 7160 23124 
def xmap(task, it):
    return 1

2023-06-26 12:15:50,922 DEBUG functional 7160 23124 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:15:50,923 DEBUG functional 7160 23124 
def xstarmap(task, it):
    return 1

2023-06-26 12:15:50,923 DEBUG functional 7160 23124 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:15:50,923 DEBUG functional 7160 23124 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:15:50,924 DEBUG functional 7160 23124 
def chunks(task, it, n):
    return 1

2023-06-26 12:20:37,220 INFO autoreload 9264 14672 C:\Users\Evert\Desktop\Django\monreal\monreal\celery.py changed, reloading.
2023-06-26 12:20:38,922 INFO autoreload 24004 19532 Watching for file changes with StatReloader
2023-06-26 12:21:13,469 INFO autoreload 13492 15872 Watching for file changes with StatReloader
2023-06-26 12:21:20,331 DEBUG functional 6832 14632 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:21:20,332 DEBUG functional 6832 14632 
def backend_cleanup():
    return 1

2023-06-26 12:21:20,332 DEBUG functional 6832 14632 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:21:20,332 DEBUG functional 6832 14632 
def debug_task(self):
    return 1

2023-06-26 12:21:20,333 DEBUG functional 6832 14632 
def xmap(task, it):
    return 1

2023-06-26 12:21:20,333 DEBUG functional 6832 14632 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:21:20,333 DEBUG functional 6832 14632 
def xstarmap(task, it):
    return 1

2023-06-26 12:21:20,334 DEBUG functional 6832 14632 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:21:20,334 DEBUG functional 6832 14632 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:21:20,334 DEBUG functional 6832 14632 
def chunks(task, it, n):
    return 1

2023-06-26 12:23:10,860 INFO autoreload 13492 15872 C:\Users\Evert\Desktop\Django\monreal\monreal\celery.py changed, reloading.
2023-06-26 12:23:12,491 INFO autoreload 21956 11772 Watching for file changes with StatReloader
2023-06-26 12:23:20,418 DEBUG functional 24028 13432 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:23:20,419 DEBUG functional 24028 13432 
def backend_cleanup():
    return 1

2023-06-26 12:23:20,419 DEBUG functional 24028 13432 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:23:20,419 DEBUG functional 24028 13432 
def debug_task(self):
    return 1

2023-06-26 12:23:20,420 DEBUG functional 24028 13432 
def xmap(task, it):
    return 1

2023-06-26 12:23:20,420 DEBUG functional 24028 13432 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:23:20,420 DEBUG functional 24028 13432 
def xstarmap(task, it):
    return 1

2023-06-26 12:23:20,421 DEBUG functional 24028 13432 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:23:20,421 DEBUG functional 24028 13432 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:23:20,421 DEBUG functional 24028 13432 
def chunks(task, it, n):
    return 1

2023-06-26 12:25:33,790 INFO autoreload 21956 11772 C:\Users\Evert\Desktop\Django\monreal\monreal\celery.py changed, reloading.
2023-06-26 12:25:35,515 INFO autoreload 2228 4008 Watching for file changes with StatReloader
2023-06-26 12:25:45,088 INFO autoreload 23076 23276 Watching for file changes with StatReloader
2023-06-26 12:25:53,186 DEBUG functional 4036 13340 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:25:53,187 DEBUG functional 4036 13340 
def backend_cleanup():
    return 1

2023-06-26 12:25:53,187 DEBUG functional 4036 13340 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:25:53,188 DEBUG functional 4036 13340 
def debug_task(self):
    return 1

2023-06-26 12:25:53,188 DEBUG functional 4036 13340 
def xmap(task, it):
    return 1

2023-06-26 12:25:53,188 DEBUG functional 4036 13340 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:25:53,188 DEBUG functional 4036 13340 
def xstarmap(task, it):
    return 1

2023-06-26 12:25:53,189 DEBUG functional 4036 13340 
def redis_test():
    return 1

2023-06-26 12:25:53,189 DEBUG functional 4036 13340 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:25:53,190 DEBUG functional 4036 13340 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:25:53,190 DEBUG functional 4036 13340 
def chunks(task, it, n):
    return 1

2023-06-26 12:26:25,973 INFO autoreload 23076 23276 C:\Users\Evert\Desktop\Django\monreal\monreal\settings.py changed, reloading.
2023-06-26 12:26:27,721 INFO autoreload 18172 10952 Watching for file changes with StatReloader
2023-06-26 12:26:35,134 INFO autoreload 5760 22836 Watching for file changes with StatReloader
2023-06-26 12:26:42,762 DEBUG functional 16320 3448 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:26:42,763 DEBUG functional 16320 3448 
def backend_cleanup():
    return 1

2023-06-26 12:26:42,763 DEBUG functional 16320 3448 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:26:42,763 DEBUG functional 16320 3448 
def debug_task(self):
    return 1

2023-06-26 12:26:42,764 DEBUG functional 16320 3448 
def xmap(task, it):
    return 1

2023-06-26 12:26:42,764 DEBUG functional 16320 3448 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:26:42,764 DEBUG functional 16320 3448 
def xstarmap(task, it):
    return 1

2023-06-26 12:26:42,765 DEBUG functional 16320 3448 
def redis_test():
    return 1

2023-06-26 12:26:42,765 DEBUG functional 16320 3448 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:26:42,765 DEBUG functional 16320 3448 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:26:42,766 DEBUG functional 16320 3448 
def chunks(task, it, n):
    return 1

2023-06-26 12:28:01,521 INFO autoreload 5760 22836 C:\Users\Evert\Desktop\Django\monreal\monreal\celery.py changed, reloading.
2023-06-26 12:28:03,340 INFO autoreload 24460 9164 Watching for file changes with StatReloader
2023-06-26 12:30:02,218 INFO autoreload 19888 20708 Watching for file changes with StatReloader
2023-06-26 12:30:08,865 DEBUG functional 1132 13848 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:30:08,866 DEBUG functional 1132 13848 
def backend_cleanup():
    return 1

2023-06-26 12:30:08,866 DEBUG functional 1132 13848 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:30:08,866 DEBUG functional 1132 13848 
def debug_task(self):
    return 1

2023-06-26 12:30:08,867 DEBUG functional 1132 13848 
def xmap(task, it):
    return 1

2023-06-26 12:30:08,867 DEBUG functional 1132 13848 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:30:08,867 DEBUG functional 1132 13848 
def xstarmap(task, it):
    return 1

2023-06-26 12:30:08,868 DEBUG functional 1132 13848 
def redis_test():
    return 1

2023-06-26 12:30:08,868 DEBUG functional 1132 13848 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:30:08,868 DEBUG functional 1132 13848 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:30:08,869 DEBUG functional 1132 13848 
def chunks(task, it, n):
    return 1

2023-06-26 12:34:43,552 INFO autoreload 19888 20708 C:\Users\Evert\Desktop\Django\monreal\monreal\celery.py changed, reloading.
2023-06-26 12:34:45,323 INFO autoreload 6668 19908 Watching for file changes with StatReloader
2023-06-26 12:34:57,885 DEBUG functional 23356 16420 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:34:57,886 DEBUG functional 23356 16420 
def backend_cleanup():
    return 1

2023-06-26 12:34:57,886 DEBUG functional 23356 16420 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:34:57,887 DEBUG functional 23356 16420 
def debug_task(self):
    return 1

2023-06-26 12:34:57,887 DEBUG functional 23356 16420 
def xmap(task, it):
    return 1

2023-06-26 12:34:57,887 DEBUG functional 23356 16420 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:34:57,888 DEBUG functional 23356 16420 
def xstarmap(task, it):
    return 1

2023-06-26 12:34:57,888 DEBUG functional 23356 16420 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:34:57,888 DEBUG functional 23356 16420 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:34:57,889 DEBUG functional 23356 16420 
def chunks(task, it, n):
    return 1

2023-06-26 12:35:20,923 INFO autoreload 6668 19908 C:\Users\Evert\Desktop\Django\monreal\monreal\celery.py changed, reloading.
2023-06-26 12:35:22,658 INFO autoreload 14092 23744 Watching for file changes with StatReloader
2023-06-26 12:35:32,505 INFO autoreload 14020 1984 Watching for file changes with StatReloader
2023-06-26 12:35:40,796 DEBUG functional 16976 23656 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:35:40,797 DEBUG functional 16976 23656 
def backend_cleanup():
    return 1

2023-06-26 12:35:40,797 DEBUG functional 16976 23656 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:35:40,797 DEBUG functional 16976 23656 
def debug_task(self):
    return 1

2023-06-26 12:35:40,798 DEBUG functional 16976 23656 
def xmap(task, it):
    return 1

2023-06-26 12:35:40,798 DEBUG functional 16976 23656 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:35:40,798 DEBUG functional 16976 23656 
def xstarmap(task, it):
    return 1

2023-06-26 12:35:40,799 DEBUG functional 16976 23656 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:35:40,799 DEBUG functional 16976 23656 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:35:40,800 DEBUG functional 16976 23656 
def chunks(task, it, n):
    return 1

2023-06-26 12:36:40,779 INFO autoreload 24316 19492 Watching for file changes with StatReloader
2023-06-26 12:37:03,125 DEBUG functional 22588 13860 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:37:03,125 DEBUG functional 22588 13860 
def backend_cleanup():
    return 1

2023-06-26 12:37:03,126 DEBUG functional 22588 13860 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:37:03,126 DEBUG functional 22588 13860 
def debug_task(self):
    return 1

2023-06-26 12:37:03,126 DEBUG functional 22588 13860 
def xmap(task, it):
    return 1

2023-06-26 12:37:03,127 DEBUG functional 22588 13860 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:37:03,127 DEBUG functional 22588 13860 
def xstarmap(task, it):
    return 1

2023-06-26 12:37:03,127 DEBUG functional 22588 13860 
def redis_test():
    return 1

2023-06-26 12:37:03,128 DEBUG functional 22588 13860 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:37:03,128 DEBUG functional 22588 13860 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:37:03,128 DEBUG functional 22588 13860 
def chunks(task, it, n):
    return 1

2023-06-26 12:44:19,524 INFO autoreload 18208 23600 Watching for file changes with StatReloader
2023-06-26 12:44:28,178 DEBUG functional 17288 21772 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:44:28,178 DEBUG functional 17288 21772 
def backend_cleanup():
    return 1

2023-06-26 12:44:28,178 DEBUG functional 17288 21772 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:44:28,179 DEBUG functional 17288 21772 
def debug_task(self):
    return 1

2023-06-26 12:44:28,179 DEBUG functional 17288 21772 
def xmap(task, it):
    return 1

2023-06-26 12:44:28,179 DEBUG functional 17288 21772 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:44:28,180 DEBUG functional 17288 21772 
def xstarmap(task, it):
    return 1

2023-06-26 12:44:28,180 DEBUG functional 17288 21772 
def redis_test():
    return 1

2023-06-26 12:44:28,180 DEBUG functional 17288 21772 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:44:28,181 DEBUG functional 17288 21772 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:44:28,181 DEBUG functional 17288 21772 
def chunks(task, it, n):
    return 1

2023-06-26 12:48:47,575 INFO autoreload 18208 23600 C:\Users\Evert\Desktop\Django\monreal\monreal\celery.py changed, reloading.
2023-06-26 12:48:49,127 INFO autoreload 22972 13408 Watching for file changes with StatReloader
2023-06-26 12:48:55,870 DEBUG functional 11956 17348 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:48:55,871 DEBUG functional 11956 17348 
def backend_cleanup():
    return 1

2023-06-26 12:48:55,871 DEBUG functional 11956 17348 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:48:55,871 DEBUG functional 11956 17348 
def debug_task(self):
    return 1

2023-06-26 12:48:55,872 DEBUG functional 11956 17348 
def xmap(task, it):
    return 1

2023-06-26 12:48:55,872 DEBUG functional 11956 17348 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:48:55,872 DEBUG functional 11956 17348 
def xstarmap(task, it):
    return 1

2023-06-26 12:48:55,873 DEBUG functional 11956 17348 
def redis_test():
    return 1

2023-06-26 12:48:55,873 DEBUG functional 11956 17348 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:48:55,873 DEBUG functional 11956 17348 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:48:55,874 DEBUG functional 11956 17348 
def chunks(task, it, n):
    return 1

2023-06-26 12:49:59,023 INFO autoreload 22972 13408 C:\Users\Evert\Desktop\Django\monreal\monreal\settings.py changed, reloading.
2023-06-26 12:50:00,590 INFO autoreload 16316 2904 Watching for file changes with StatReloader
2023-06-26 12:50:13,534 INFO autoreload 14388 24532 Watching for file changes with StatReloader
2023-06-26 12:50:20,474 DEBUG functional 18984 6576 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:50:20,475 DEBUG functional 18984 6576 
def backend_cleanup():
    return 1

2023-06-26 12:50:20,475 DEBUG functional 18984 6576 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:50:20,475 DEBUG functional 18984 6576 
def debug_task(self):
    return 1

2023-06-26 12:50:20,476 DEBUG functional 18984 6576 
def xmap(task, it):
    return 1

2023-06-26 12:50:20,476 DEBUG functional 18984 6576 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:50:20,476 DEBUG functional 18984 6576 
def xstarmap(task, it):
    return 1

2023-06-26 12:50:20,477 DEBUG functional 18984 6576 
def redis_test():
    return 1

2023-06-26 12:50:20,477 DEBUG functional 18984 6576 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:50:20,477 DEBUG functional 18984 6576 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:50:20,478 DEBUG functional 18984 6576 
def chunks(task, it, n):
    return 1

2023-06-26 12:50:33,934 DEBUG functional 22728 22724 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:50:33,934 DEBUG functional 22728 22724 
def backend_cleanup():
    return 1

2023-06-26 12:50:33,935 DEBUG functional 22728 22724 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:50:33,935 DEBUG functional 22728 22724 
def debug_task(self):
    return 1

2023-06-26 12:50:33,936 DEBUG functional 22728 22724 
def xmap(task, it):
    return 1

2023-06-26 12:50:33,936 DEBUG functional 22728 22724 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:50:33,936 DEBUG functional 22728 22724 
def xstarmap(task, it):
    return 1

2023-06-26 12:50:33,936 DEBUG functional 22728 22724 
def redis_test():
    return 1

2023-06-26 12:50:33,937 DEBUG functional 22728 22724 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:50:33,937 DEBUG functional 22728 22724 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:50:33,938 DEBUG functional 22728 22724 
def chunks(task, it, n):
    return 1

2023-06-26 12:50:55,533 INFO autoreload 14388 24532 C:\Users\Evert\Desktop\Django\monreal\monreal\settings.py changed, reloading.
2023-06-26 12:50:57,015 INFO autoreload 23212 22904 Watching for file changes with StatReloader
2023-06-26 12:51:10,127 DEBUG functional 21968 19772 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:51:10,127 DEBUG functional 21968 19772 
def backend_cleanup():
    return 1

2023-06-26 12:51:10,127 DEBUG functional 21968 19772 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:51:10,128 DEBUG functional 21968 19772 
def debug_task(self):
    return 1

2023-06-26 12:51:10,128 DEBUG functional 21968 19772 
def xmap(task, it):
    return 1

2023-06-26 12:51:10,128 DEBUG functional 21968 19772 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:51:10,129 DEBUG functional 21968 19772 
def xstarmap(task, it):
    return 1

2023-06-26 12:51:10,129 DEBUG functional 21968 19772 
def redis_test():
    return 1

2023-06-26 12:51:10,129 DEBUG functional 21968 19772 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:51:10,130 DEBUG functional 21968 19772 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:51:10,130 DEBUG functional 21968 19772 
def chunks(task, it, n):
    return 1

2023-06-26 12:51:18,146 DEBUG functional 23068 1736 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:51:18,147 DEBUG functional 23068 1736 
def backend_cleanup():
    return 1

2023-06-26 12:51:18,147 DEBUG functional 23068 1736 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:51:18,147 DEBUG functional 23068 1736 
def debug_task(self):
    return 1

2023-06-26 12:51:18,148 DEBUG functional 23068 1736 
def xmap(task, it):
    return 1

2023-06-26 12:51:18,148 DEBUG functional 23068 1736 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:51:18,148 DEBUG functional 23068 1736 
def xstarmap(task, it):
    return 1

2023-06-26 12:51:18,149 DEBUG functional 23068 1736 
def redis_test():
    return 1

2023-06-26 12:51:18,149 DEBUG functional 23068 1736 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:51:18,149 DEBUG functional 23068 1736 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:51:18,150 DEBUG functional 23068 1736 
def chunks(task, it, n):
    return 1

2023-06-26 12:52:11,268 INFO autoreload 23212 22904 C:\Users\Evert\Desktop\Django\monreal\monreal\celery.py changed, reloading.
2023-06-26 12:52:12,863 INFO autoreload 6540 8956 Watching for file changes with StatReloader
2023-06-26 12:52:20,732 DEBUG functional 20844 9568 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:52:20,732 DEBUG functional 20844 9568 
def backend_cleanup():
    return 1

2023-06-26 12:52:20,733 DEBUG functional 20844 9568 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:52:20,733 DEBUG functional 20844 9568 
def debug_task(self):
    return 1

2023-06-26 12:52:20,733 DEBUG functional 20844 9568 
def xmap(task, it):
    return 1

2023-06-26 12:52:20,733 DEBUG functional 20844 9568 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:52:20,734 DEBUG functional 20844 9568 
def xstarmap(task, it):
    return 1

2023-06-26 12:52:20,734 DEBUG functional 20844 9568 
def redis_test():
    return 1

2023-06-26 12:52:20,735 DEBUG functional 20844 9568 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:52:20,735 DEBUG functional 20844 9568 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:52:20,735 DEBUG functional 20844 9568 
def chunks(task, it, n):
    return 1

2023-06-26 12:52:28,002 DEBUG functional 20908 22000 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:52:28,003 DEBUG functional 20908 22000 
def backend_cleanup():
    return 1

2023-06-26 12:52:28,003 DEBUG functional 20908 22000 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:52:28,004 DEBUG functional 20908 22000 
def debug_task(self):
    return 1

2023-06-26 12:52:28,004 DEBUG functional 20908 22000 
def xmap(task, it):
    return 1

2023-06-26 12:52:28,004 DEBUG functional 20908 22000 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:52:28,005 DEBUG functional 20908 22000 
def xstarmap(task, it):
    return 1

2023-06-26 12:52:28,005 DEBUG functional 20908 22000 
def redis_test():
    return 1

2023-06-26 12:52:28,005 DEBUG functional 20908 22000 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:52:28,006 DEBUG functional 20908 22000 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:52:28,006 DEBUG functional 20908 22000 
def chunks(task, it, n):
    return 1

2023-06-26 12:53:42,146 INFO autoreload 6540 8956 C:\Users\Evert\Desktop\Django\monreal\monreal\celery.py changed, reloading.
2023-06-26 12:53:43,736 INFO autoreload 23996 15000 Watching for file changes with StatReloader
2023-06-26 12:53:49,768 DEBUG functional 10112 8132 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:53:49,769 DEBUG functional 10112 8132 
def backend_cleanup():
    return 1

2023-06-26 12:53:49,769 DEBUG functional 10112 8132 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:53:49,769 DEBUG functional 10112 8132 
def debug_task(self):
    return 1

2023-06-26 12:53:49,770 DEBUG functional 10112 8132 
def xmap(task, it):
    return 1

2023-06-26 12:53:49,770 DEBUG functional 10112 8132 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:53:49,770 DEBUG functional 10112 8132 
def xstarmap(task, it):
    return 1

2023-06-26 12:53:49,771 DEBUG functional 10112 8132 
def redis_test():
    return 1

2023-06-26 12:53:49,771 DEBUG functional 10112 8132 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:53:49,771 DEBUG functional 10112 8132 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:53:49,772 DEBUG functional 10112 8132 
def chunks(task, it, n):
    return 1

2023-06-26 12:53:56,392 DEBUG functional 23816 22880 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:53:56,392 DEBUG functional 23816 22880 
def backend_cleanup():
    return 1

2023-06-26 12:53:56,393 DEBUG functional 23816 22880 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:53:56,393 DEBUG functional 23816 22880 
def debug_task(self):
    return 1

2023-06-26 12:53:56,393 DEBUG functional 23816 22880 
def xmap(task, it):
    return 1

2023-06-26 12:53:56,394 DEBUG functional 23816 22880 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:53:56,394 DEBUG functional 23816 22880 
def xstarmap(task, it):
    return 1

2023-06-26 12:53:56,394 DEBUG functional 23816 22880 
def redis_test():
    return 1

2023-06-26 12:53:56,395 DEBUG functional 23816 22880 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:53:56,395 DEBUG functional 23816 22880 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:53:56,395 DEBUG functional 23816 22880 
def chunks(task, it, n):
    return 1

2023-06-26 12:54:43,084 INFO autoreload 23996 15000 C:\Users\Evert\Desktop\Django\monreal\monreal\settings.py changed, reloading.
2023-06-26 12:54:44,571 INFO autoreload 13928 5544 Watching for file changes with StatReloader
2023-06-26 12:55:39,682 INFO autoreload 12872 23756 Watching for file changes with StatReloader
2023-06-26 12:55:46,262 DEBUG functional 12464 21168 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:55:46,263 DEBUG functional 12464 21168 
def backend_cleanup():
    return 1

2023-06-26 12:55:46,263 DEBUG functional 12464 21168 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:55:46,264 DEBUG functional 12464 21168 
def redis_test():
    return 1

2023-06-26 12:55:46,264 DEBUG functional 12464 21168 
def debug_task(self):
    return 1

2023-06-26 12:55:46,264 DEBUG functional 12464 21168 
def xmap(task, it):
    return 1

2023-06-26 12:55:46,265 DEBUG functional 12464 21168 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:55:46,265 DEBUG functional 12464 21168 
def xstarmap(task, it):
    return 1

2023-06-26 12:55:46,265 DEBUG functional 12464 21168 
def redis_test():
    return 1

2023-06-26 12:55:46,266 DEBUG functional 12464 21168 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:55:46,266 DEBUG functional 12464 21168 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:55:46,266 DEBUG functional 12464 21168 
def chunks(task, it, n):
    return 1

2023-06-26 12:56:02,599 DEBUG functional 4392 10148 
def redis_test():
    return 1

2023-06-26 12:56:02,599 DEBUG functional 4392 10148 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:56:02,600 DEBUG functional 4392 10148 
def backend_cleanup():
    return 1

2023-06-26 12:56:02,600 DEBUG functional 4392 10148 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:56:02,600 DEBUG functional 4392 10148 
def debug_task(self):
    return 1

2023-06-26 12:56:02,601 DEBUG functional 4392 10148 
def xmap(task, it):
    return 1

2023-06-26 12:56:02,601 DEBUG functional 4392 10148 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:56:02,601 DEBUG functional 4392 10148 
def xstarmap(task, it):
    return 1

2023-06-26 12:56:02,602 DEBUG functional 4392 10148 
def redis_test():
    return 1

2023-06-26 12:56:02,602 DEBUG functional 4392 10148 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:56:02,602 DEBUG functional 4392 10148 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:56:02,603 DEBUG functional 4392 10148 
def chunks(task, it, n):
    return 1

2023-06-26 12:58:13,877 INFO autoreload 14884 23404 Watching for file changes with StatReloader
2023-06-26 12:58:36,661 DEBUG functional 23372 12268 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 12:58:36,662 DEBUG functional 23372 12268 
def debug_task(self):
    return 1

2023-06-26 12:58:36,662 DEBUG functional 23372 12268 
def chunks(task, it, n):
    return 1

2023-06-26 12:58:36,663 DEBUG functional 23372 12268 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 12:58:36,663 DEBUG functional 23372 12268 
def backend_cleanup():
    return 1

2023-06-26 12:58:36,664 DEBUG functional 23372 12268 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 12:58:36,664 DEBUG functional 23372 12268 
def redis_test():
    return 1

2023-06-26 12:58:36,664 DEBUG functional 23372 12268 
def xmap(task, it):
    return 1

2023-06-26 12:58:36,665 DEBUG functional 23372 12268 
def chain(*args, **kwargs):
    return 1

2023-06-26 12:58:36,665 DEBUG functional 23372 12268 
def redis_test():
    return 1

2023-06-26 12:58:36,665 DEBUG functional 23372 12268 
def xstarmap(task, it):
    return 1

2023-06-26 12:58:36,666 DEBUG functional 23372 12268 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 12:59:03,329 INFO autoreload 14884 23404 C:\Users\Evert\Desktop\Django\monreal\monreal\celery.py changed, reloading.
2023-06-26 12:59:04,878 INFO autoreload 22416 15356 Watching for file changes with StatReloader
2023-06-26 12:59:37,101 INFO autoreload 22416 15356 C:\Users\Evert\Desktop\Django\monreal\monreal\celery.py changed, reloading.
2023-06-26 12:59:38,618 INFO autoreload 7304 24556 Watching for file changes with StatReloader
2023-06-26 13:00:06,416 DEBUG functional 24196 13492 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 13:00:06,417 DEBUG functional 24196 13492 
def chunks(task, it, n):
    return 1

2023-06-26 13:00:06,417 DEBUG functional 24196 13492 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 13:00:06,418 DEBUG functional 24196 13492 
def backend_cleanup():
    return 1

2023-06-26 13:00:06,418 DEBUG functional 24196 13492 
def debug_task(self):
    return 1

2023-06-26 13:00:06,419 DEBUG functional 24196 13492 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 13:00:06,419 DEBUG functional 24196 13492 
def redis_test():
    return 1

2023-06-26 13:00:06,419 DEBUG functional 24196 13492 
def xmap(task, it):
    return 1

2023-06-26 13:00:06,420 DEBUG functional 24196 13492 
def chain(*args, **kwargs):
    return 1

2023-06-26 13:00:06,420 DEBUG functional 24196 13492 
def xstarmap(task, it):
    return 1

2023-06-26 13:00:06,420 DEBUG functional 24196 13492 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 13:00:27,250 DEBUG functional 24012 7060 
def redis_test():
    return 1

2023-06-26 13:00:27,251 DEBUG functional 24012 7060 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 13:00:27,251 DEBUG functional 24012 7060 
def backend_cleanup():
    return 1

2023-06-26 13:00:27,252 DEBUG functional 24012 7060 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 13:00:27,252 DEBUG functional 24012 7060 
def xmap(task, it):
    return 1

2023-06-26 13:00:27,252 DEBUG functional 24012 7060 
def chain(*args, **kwargs):
    return 1

2023-06-26 13:00:27,253 DEBUG functional 24012 7060 
def debug_task(self):
    return 1

2023-06-26 13:00:27,253 DEBUG functional 24012 7060 
def xstarmap(task, it):
    return 1

2023-06-26 13:00:27,254 DEBUG functional 24012 7060 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 13:00:27,254 DEBUG functional 24012 7060 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 13:00:27,254 DEBUG functional 24012 7060 
def chunks(task, it, n):
    return 1

2023-06-26 18:20:55,536 INFO autoreload 2580 8692 Watching for file changes with StatReloader
2023-06-26 18:21:13,983 DEBUG functional 7256 16736 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 18:21:13,983 DEBUG functional 7256 16736 
def chunks(task, it, n):
    return 1

2023-06-26 18:21:13,984 DEBUG functional 7256 16736 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 18:21:13,984 DEBUG functional 7256 16736 
def backend_cleanup():
    return 1

2023-06-26 18:21:13,985 DEBUG functional 7256 16736 
def debug_task(self):
    return 1

2023-06-26 18:21:13,985 DEBUG functional 7256 16736 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 18:21:13,985 DEBUG functional 7256 16736 
def xmap(task, it):
    return 1

2023-06-26 18:21:13,986 DEBUG functional 7256 16736 
def chain(*args, **kwargs):
    return 1

2023-06-26 18:21:13,986 DEBUG functional 7256 16736 
def db_update_task():
    return 1

2023-06-26 18:21:13,986 DEBUG functional 7256 16736 
def xstarmap(task, it):
    return 1

2023-06-26 18:21:13,987 DEBUG functional 7256 16736 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 18:21:51,443 DEBUG functional 10728 9692 
def db_update_task():
    return 1

2023-06-26 18:21:51,444 DEBUG functional 10728 9692 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 18:21:51,444 DEBUG functional 10728 9692 
def backend_cleanup():
    return 1

2023-06-26 18:21:51,444 DEBUG functional 10728 9692 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 18:21:51,445 DEBUG functional 10728 9692 
def xmap(task, it):
    return 1

2023-06-26 18:21:51,445 DEBUG functional 10728 9692 
def chain(*args, **kwargs):
    return 1

2023-06-26 18:21:51,445 DEBUG functional 10728 9692 
def debug_task(self):
    return 1

2023-06-26 18:21:51,446 DEBUG functional 10728 9692 
def xstarmap(task, it):
    return 1

2023-06-26 18:21:51,446 DEBUG functional 10728 9692 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 18:21:51,447 DEBUG functional 10728 9692 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 18:21:51,447 DEBUG functional 10728 9692 
def chunks(task, it, n):
    return 1

2023-06-26 18:22:38,855 INFO autoreload 2580 8692 C:\Users\Evert\Desktop\Django\monreal\monreal\settings.py changed, reloading.
2023-06-26 18:22:40,323 INFO autoreload 11948 3372 Watching for file changes with StatReloader
2023-06-26 18:23:01,002 INFO autoreload 12864 14712 Watching for file changes with StatReloader
2023-06-26 18:23:08,887 DEBUG functional 8800 17808 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 18:23:08,888 DEBUG functional 8800 17808 
def chunks(task, it, n):
    return 1

2023-06-26 18:23:08,888 DEBUG functional 8800 17808 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 18:23:08,889 DEBUG functional 8800 17808 
def backend_cleanup():
    return 1

2023-06-26 18:23:08,889 DEBUG functional 8800 17808 
def debug_task(self):
    return 1

2023-06-26 18:23:08,889 DEBUG functional 8800 17808 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 18:23:08,890 DEBUG functional 8800 17808 
def xmap(task, it):
    return 1

2023-06-26 18:23:08,890 DEBUG functional 8800 17808 
def chain(*args, **kwargs):
    return 1

2023-06-26 18:23:08,890 DEBUG functional 8800 17808 
def db_update_task():
    return 1

2023-06-26 18:23:08,891 DEBUG functional 8800 17808 
def xstarmap(task, it):
    return 1

2023-06-26 18:23:08,891 DEBUG functional 8800 17808 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 18:23:18,322 DEBUG functional 11204 11980 
def db_update_task():
    return 1

2023-06-26 18:23:18,323 DEBUG functional 11204 11980 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 18:23:18,323 DEBUG functional 11204 11980 
def backend_cleanup():
    return 1

2023-06-26 18:23:18,324 DEBUG functional 11204 11980 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 18:23:18,324 DEBUG functional 11204 11980 
def xmap(task, it):
    return 1

2023-06-26 18:23:18,324 DEBUG functional 11204 11980 
def chain(*args, **kwargs):
    return 1

2023-06-26 18:23:18,325 DEBUG functional 11204 11980 
def debug_task(self):
    return 1

2023-06-26 18:23:18,325 DEBUG functional 11204 11980 
def xstarmap(task, it):
    return 1

2023-06-26 18:23:18,325 DEBUG functional 11204 11980 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 18:23:18,326 DEBUG functional 11204 11980 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 18:23:18,326 DEBUG functional 11204 11980 
def chunks(task, it, n):
    return 1

2023-06-26 18:24:09,278 DEBUG functional 12068 10276 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 18:24:09,279 DEBUG functional 12068 10276 
def chunks(task, it, n):
    return 1

2023-06-26 18:24:09,279 DEBUG functional 12068 10276 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 18:24:09,279 DEBUG functional 12068 10276 
def backend_cleanup():
    return 1

2023-06-26 18:24:09,280 DEBUG functional 12068 10276 
def debug_task(self):
    return 1

2023-06-26 18:24:09,280 DEBUG functional 12068 10276 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 18:24:09,281 DEBUG functional 12068 10276 
def xmap(task, it):
    return 1

2023-06-26 18:24:09,281 DEBUG functional 12068 10276 
def chain(*args, **kwargs):
    return 1

2023-06-26 18:24:09,281 DEBUG functional 12068 10276 
def db_update_task():
    return 1

2023-06-26 18:24:09,282 DEBUG functional 12068 10276 
def xstarmap(task, it):
    return 1

2023-06-26 18:24:09,282 DEBUG functional 12068 10276 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 18:24:17,371 DEBUG functional 7632 9512 
def db_update_task():
    return 1

2023-06-26 18:24:17,372 DEBUG functional 7632 9512 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 18:24:17,372 DEBUG functional 7632 9512 
def backend_cleanup():
    return 1

2023-06-26 18:24:17,373 DEBUG functional 7632 9512 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 18:24:17,373 DEBUG functional 7632 9512 
def xmap(task, it):
    return 1

2023-06-26 18:24:17,373 DEBUG functional 7632 9512 
def chain(*args, **kwargs):
    return 1

2023-06-26 18:24:17,374 DEBUG functional 7632 9512 
def debug_task(self):
    return 1

2023-06-26 18:24:17,374 DEBUG functional 7632 9512 
def xstarmap(task, it):
    return 1

2023-06-26 18:24:17,374 DEBUG functional 7632 9512 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 18:24:17,374 DEBUG functional 7632 9512 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 18:24:17,375 DEBUG functional 7632 9512 
def chunks(task, it, n):
    return 1

2023-06-26 18:25:59,861 INFO autoreload 13208 2592 Watching for file changes with StatReloader
2023-06-26 18:26:07,192 DEBUG functional 5468 13508 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 18:26:07,193 DEBUG functional 5468 13508 
def chunks(task, it, n):
    return 1

2023-06-26 18:26:07,193 DEBUG functional 5468 13508 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 18:26:07,194 DEBUG functional 5468 13508 
def backend_cleanup():
    return 1

2023-06-26 18:26:07,194 DEBUG functional 5468 13508 
def debug_task(self):
    return 1

2023-06-26 18:26:07,195 DEBUG functional 5468 13508 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 18:26:07,195 DEBUG functional 5468 13508 
def xmap(task, it):
    return 1

2023-06-26 18:26:07,196 DEBUG functional 5468 13508 
def chain(*args, **kwargs):
    return 1

2023-06-26 18:26:07,196 DEBUG functional 5468 13508 
def db_update_task():
    return 1

2023-06-26 18:26:07,196 DEBUG functional 5468 13508 
def xstarmap(task, it):
    return 1

2023-06-26 18:26:07,197 DEBUG functional 5468 13508 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 18:26:16,118 DEBUG functional 15416 6416 
def db_update_task():
    return 1

2023-06-26 18:26:16,119 DEBUG functional 15416 6416 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 18:26:16,119 DEBUG functional 15416 6416 
def backend_cleanup():
    return 1

2023-06-26 18:26:16,119 DEBUG functional 15416 6416 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 18:26:16,120 DEBUG functional 15416 6416 
def xmap(task, it):
    return 1

2023-06-26 18:26:16,120 DEBUG functional 15416 6416 
def chain(*args, **kwargs):
    return 1

2023-06-26 18:26:16,120 DEBUG functional 15416 6416 
def debug_task(self):
    return 1

2023-06-26 18:26:16,121 DEBUG functional 15416 6416 
def xstarmap(task, it):
    return 1

2023-06-26 18:26:16,121 DEBUG functional 15416 6416 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 18:26:16,121 DEBUG functional 15416 6416 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 18:26:16,122 DEBUG functional 15416 6416 
def chunks(task, it, n):
    return 1

2023-06-26 18:35:55,142 INFO autoreload 12000 13232 Watching for file changes with StatReloader
2023-06-26 18:36:12,607 DEBUG functional 6632 3396 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 18:36:12,608 DEBUG functional 6632 3396 
def chunks(task, it, n):
    return 1

2023-06-26 18:36:12,608 DEBUG functional 6632 3396 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 18:36:12,608 DEBUG functional 6632 3396 
def backend_cleanup():
    return 1

2023-06-26 18:36:12,609 DEBUG functional 6632 3396 
def debug_task(self):
    return 1

2023-06-26 18:36:12,609 DEBUG functional 6632 3396 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 18:36:12,609 DEBUG functional 6632 3396 
def xmap(task, it):
    return 1

2023-06-26 18:36:12,610 DEBUG functional 6632 3396 
def chain(*args, **kwargs):
    return 1

2023-06-26 18:36:12,610 DEBUG functional 6632 3396 
def db_update_task():
    return 1

2023-06-26 18:36:12,610 DEBUG functional 6632 3396 
def xstarmap(task, it):
    return 1

2023-06-26 18:36:12,611 DEBUG functional 6632 3396 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 18:36:24,091 DEBUG functional 16672 17524 
def db_update_task():
    return 1

2023-06-26 18:36:24,092 DEBUG functional 16672 17524 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-26 18:36:24,092 DEBUG functional 16672 17524 
def backend_cleanup():
    return 1

2023-06-26 18:36:24,092 DEBUG functional 16672 17524 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-26 18:36:24,093 DEBUG functional 16672 17524 
def xmap(task, it):
    return 1

2023-06-26 18:36:24,093 DEBUG functional 16672 17524 
def chain(*args, **kwargs):
    return 1

2023-06-26 18:36:24,093 DEBUG functional 16672 17524 
def debug_task(self):
    return 1

2023-06-26 18:36:24,094 DEBUG functional 16672 17524 
def xstarmap(task, it):
    return 1

2023-06-26 18:36:24,094 DEBUG functional 16672 17524 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-26 18:36:24,094 DEBUG functional 16672 17524 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-26 18:36:24,095 DEBUG functional 16672 17524 
def chunks(task, it, n):
    return 1

2023-06-26 18:36:36,636 WARNING log 12000 1536 Not Found: /
2023-06-26 18:36:43,376 DEBUG core 12000 1536 Successfully imported extension module "markdown.extensions.toc".
2023-06-26 18:36:43,377 DEBUG core 12000 1536 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-26 18:36:46,936 DEBUG core 12000 1536 Successfully imported extension module "markdown.extensions.toc".
2023-06-26 18:36:46,936 DEBUG core 12000 1536 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-26 18:36:47,778 DEBUG core 12000 1536 Successfully imported extension module "markdown.extensions.toc".
2023-06-26 18:36:47,778 DEBUG core 12000 1536 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-26 18:36:50,567 DEBUG core 12000 1536 Successfully imported extension module "markdown.extensions.toc".
2023-06-26 18:36:50,567 DEBUG core 12000 1536 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-26 18:36:54,739 DEBUG core 12000 1536 Successfully imported extension module "markdown.extensions.toc".
2023-06-26 18:36:54,739 DEBUG core 12000 1536 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-26 18:37:01,532 DEBUG core 12000 1536 Successfully imported extension module "markdown.extensions.toc".
2023-06-26 18:37:01,532 DEBUG core 12000 1536 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-26 18:37:25,171 DEBUG core 12000 1536 Successfully imported extension module "markdown.extensions.toc".
2023-06-26 18:37:25,171 DEBUG core 12000 1536 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-26 18:37:25,873 DEBUG core 12000 1536 Successfully imported extension module "markdown.extensions.toc".
2023-06-26 18:37:25,874 DEBUG core 12000 1536 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-26 18:37:26,402 DEBUG core 12000 1536 Successfully imported extension module "markdown.extensions.toc".
2023-06-26 18:37:26,403 DEBUG core 12000 1536 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-26 18:37:26,826 DEBUG core 12000 1536 Successfully imported extension module "markdown.extensions.toc".
2023-06-26 18:37:26,827 DEBUG core 12000 1536 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-26 18:37:27,194 DEBUG core 12000 1536 Successfully imported extension module "markdown.extensions.toc".
2023-06-26 18:37:27,194 DEBUG core 12000 1536 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-26 18:37:50,770 DEBUG core 12000 1536 Successfully imported extension module "markdown.extensions.toc".
2023-06-26 18:37:50,770 DEBUG core 12000 1536 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-26 18:37:52,536 DEBUG core 12000 1536 Successfully imported extension module "markdown.extensions.toc".
2023-06-26 18:37:52,536 DEBUG core 12000 1536 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-26 18:37:53,580 DEBUG core 12000 1536 Successfully imported extension module "markdown.extensions.toc".
2023-06-26 18:37:53,580 DEBUG core 12000 1536 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-26 18:37:55,570 DEBUG core 12000 1536 Successfully imported extension module "markdown.extensions.toc".
2023-06-26 18:37:55,570 DEBUG core 12000 1536 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-26 18:37:56,851 DEBUG core 12000 1536 Successfully imported extension module "markdown.extensions.toc".
2023-06-26 18:37:56,851 DEBUG core 12000 1536 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-26 19:25:00,472 INFO autoreload 3392 15048 Watching for file changes with StatReloader
2023-06-26 19:36:13,161 INFO autoreload 20932 20236 Watching for file changes with StatReloader
2023-06-26 19:36:34,582 DEBUG core 20932 20624 Successfully imported extension module "markdown.extensions.toc".
2023-06-26 19:36:34,582 DEBUG core 20932 20624 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-26 19:36:48,673 DEBUG core 20932 20624 Successfully imported extension module "markdown.extensions.toc".
2023-06-26 19:36:48,673 DEBUG core 20932 20624 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-26 19:37:11,741 WARNING log 20932 8088 Bad Request: /api/close_positions/
2023-06-26 19:39:59,885 INFO autoreload 12232 6676 Watching for file changes with StatReloader
2023-06-26 19:40:15,762 WARNING log 12232 1352 Bad Request: /api/login/
2023-06-26 19:40:19,254 DEBUG core 12232 18016 Successfully imported extension module "markdown.extensions.toc".
2023-06-26 19:40:19,254 DEBUG core 12232 18016 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-26 19:40:19,975 DEBUG core 12232 18016 Successfully imported extension module "markdown.extensions.toc".
2023-06-26 19:40:19,975 DEBUG core 12232 18016 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-26 19:40:30,102 DEBUG core 12232 18016 Successfully imported extension module "markdown.extensions.toc".
2023-06-26 19:40:30,102 DEBUG core 12232 18016 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-26 19:41:00,080 INFO autoreload 12232 6676 C:\Users\Evert\Desktop\Django\monreal\accounts\views.py changed, reloading.
2023-06-26 19:41:01,634 INFO autoreload 19340 9380 Watching for file changes with StatReloader
2023-06-27 12:48:26,835 INFO autoreload 21084 7640 Watching for file changes with StatReloader
2023-06-27 12:48:58,194 DEBUG core 21084 7532 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:48:58,194 DEBUG core 21084 7532 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:48:58,434 WARNING log 21084 7832 Not Found: /favicon.ico
2023-06-27 12:49:11,635 DEBUG functional 21084 14664 
def xstarmap(task, it):
    return 1

2023-06-27 12:49:11,637 DEBUG functional 21084 14664 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 12:49:11,637 DEBUG functional 21084 14664 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 12:49:11,638 DEBUG functional 21084 14664 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 12:49:11,638 DEBUG functional 21084 14664 
def chunks(task, it, n):
    return 1

2023-06-27 12:49:11,638 DEBUG functional 21084 14664 
def debug_task(self):
    return 1

2023-06-27 12:49:11,639 DEBUG functional 21084 14664 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 12:49:11,639 DEBUG functional 21084 14664 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 12:49:11,639 DEBUG functional 21084 14664 
def xmap(task, it):
    return 1

2023-06-27 12:49:11,640 DEBUG functional 21084 14664 
def backend_cleanup():
    return 1

2023-06-27 12:49:11,640 DEBUG functional 21084 14664 
def chain(*args, **kwargs):
    return 1

2023-06-27 12:49:11,640 DEBUG functional 21084 14664 
def db_update_task():
    return 1

2023-06-27 12:49:16,496 DEBUG core 21084 8160 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:49:16,496 DEBUG core 21084 8160 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:49:17,461 DEBUG core 21084 8160 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:49:17,461 DEBUG core 21084 8160 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:49:17,510 WARNING log 21084 8160 Not Found: /favicon.ico
2023-06-27 12:49:18,096 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:49:18,096 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:49:18,728 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:49:18,728 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:49:19,119 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:49:19,119 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:49:19,565 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:49:19,565 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:49:20,008 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:49:20,008 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:49:20,481 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:49:20,481 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:49:20,886 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:49:20,886 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:49:21,243 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:49:21,244 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:49:26,448 WARNING log 21084 14664 Bad Request: /api/close_positions/
2023-06-27 12:49:27,135 WARNING log 21084 14664 Bad Request: /api/close_positions/
2023-06-27 12:49:32,634 WARNING log 21084 14664 Bad Request: /api/close_positions/
2023-06-27 12:49:33,427 WARNING log 21084 14664 Bad Request: /api/close_positions/
2023-06-27 12:49:33,588 WARNING log 21084 14664 Bad Request: /api/close_positions/
2023-06-27 12:49:40,526 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:49:40,526 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:50:17,102 DEBUG functional 4844 12404 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 12:50:17,102 DEBUG functional 4844 12404 
def chunks(task, it, n):
    return 1

2023-06-27 12:50:17,103 DEBUG functional 4844 12404 
def db_update_task():
    return 1

2023-06-27 12:50:17,103 DEBUG functional 4844 12404 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 12:50:17,104 DEBUG functional 4844 12404 
def backend_cleanup():
    return 1

2023-06-27 12:50:17,104 DEBUG functional 4844 12404 
def debug_task(self):
    return 1

2023-06-27 12:50:17,104 DEBUG functional 4844 12404 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 12:50:17,105 DEBUG functional 4844 12404 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 12:50:17,105 DEBUG functional 4844 12404 
def xmap(task, it):
    return 1

2023-06-27 12:50:17,105 DEBUG functional 4844 12404 
def chain(*args, **kwargs):
    return 1

2023-06-27 12:50:17,106 DEBUG functional 4844 12404 
def xstarmap(task, it):
    return 1

2023-06-27 12:50:17,106 DEBUG functional 4844 12404 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 12:50:22,237 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:50:22,237 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:50:22,824 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:50:22,825 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:50:23,257 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:50:23,257 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:50:23,613 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:50:23,613 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:50:33,716 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:50:33,716 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:50:34,150 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:50:34,151 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:50:57,804 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:50:57,805 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:50:58,349 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:50:58,350 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:50:58,769 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:50:58,769 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:50:59,146 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:50:59,147 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:51:16,862 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:51:16,862 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:51:17,367 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:51:17,367 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:51:21,712 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:51:21,712 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:51:22,092 DEBUG core 21084 8216 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:51:22,092 DEBUG core 21084 8216 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:52:26,715 INFO autoreload 21084 7640 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-27 12:55:17,104 INFO autoreload 17684 14044 Watching for file changes with StatReloader
2023-06-27 12:55:45,916 DEBUG functional 1408 5628 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 12:55:45,916 DEBUG functional 1408 5628 
def chunks(task, it, n):
    return 1

2023-06-27 12:55:45,916 DEBUG functional 1408 5628 
def db_update_task():
    return 1

2023-06-27 12:55:45,917 DEBUG functional 1408 5628 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 12:55:45,917 DEBUG functional 1408 5628 
def backend_cleanup():
    return 1

2023-06-27 12:55:45,918 DEBUG functional 1408 5628 
def debug_task(self):
    return 1

2023-06-27 12:55:45,918 DEBUG functional 1408 5628 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 12:55:45,918 DEBUG functional 1408 5628 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 12:55:45,919 DEBUG functional 1408 5628 
def xmap(task, it):
    return 1

2023-06-27 12:55:45,919 DEBUG functional 1408 5628 
def chain(*args, **kwargs):
    return 1

2023-06-27 12:55:45,919 DEBUG functional 1408 5628 
def xstarmap(task, it):
    return 1

2023-06-27 12:55:45,920 DEBUG functional 1408 5628 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 12:56:01,035 DEBUG functional 17684 6140 
def xstarmap(task, it):
    return 1

2023-06-27 12:56:01,037 DEBUG functional 17684 6140 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 12:56:01,038 DEBUG functional 17684 6140 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 12:56:01,038 DEBUG functional 17684 6140 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 12:56:01,038 DEBUG functional 17684 6140 
def chunks(task, it, n):
    return 1

2023-06-27 12:56:01,039 DEBUG functional 17684 6140 
def debug_task(self):
    return 1

2023-06-27 12:56:01,039 DEBUG functional 17684 6140 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 12:56:01,039 DEBUG functional 17684 6140 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 12:56:01,040 DEBUG functional 17684 6140 
def xmap(task, it):
    return 1

2023-06-27 12:56:01,040 DEBUG functional 17684 6140 
def backend_cleanup():
    return 1

2023-06-27 12:56:01,040 DEBUG functional 17684 6140 
def chain(*args, **kwargs):
    return 1

2023-06-27 12:56:01,041 DEBUG functional 17684 6140 
def db_update_task():
    return 1

2023-06-27 12:56:14,458 DEBUG core 17684 20072 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:56:14,458 DEBUG core 17684 20072 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:56:15,288 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:56:15,288 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:56:15,859 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:56:15,859 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:56:16,267 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:56:16,267 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:56:16,596 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:56:16,597 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:56:16,827 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:56:16,827 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:56:16,998 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:56:16,999 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:56:17,156 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:56:17,156 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:56:17,547 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:56:17,547 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:56:17,815 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:56:17,815 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:56:18,049 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:56:18,049 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:56:18,407 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:56:18,407 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:56:18,551 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:56:18,551 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:56:18,739 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:56:18,739 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:57:16,719 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:57:16,720 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:58:24,591 DEBUG functional 2980 13272 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 12:58:24,591 DEBUG functional 2980 13272 
def backend_cleanup():
    return 1

2023-06-27 12:58:24,592 DEBUG functional 2980 13272 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 12:58:24,592 DEBUG functional 2980 13272 
def xmap(task, it):
    return 1

2023-06-27 12:58:24,592 DEBUG functional 2980 13272 
def db_update_task():
    return 1

2023-06-27 12:58:24,593 DEBUG functional 2980 13272 
def chain(*args, **kwargs):
    return 1

2023-06-27 12:58:24,593 DEBUG functional 2980 13272 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 12:58:24,593 DEBUG functional 2980 13272 
def debug_task(self):
    return 1

2023-06-27 12:58:24,594 DEBUG functional 2980 13272 
def xstarmap(task, it):
    return 1

2023-06-27 12:58:24,594 DEBUG functional 2980 13272 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 12:58:24,595 DEBUG functional 2980 13272 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 12:58:24,595 DEBUG functional 2980 13272 
def chunks(task, it, n):
    return 1

2023-06-27 12:58:29,134 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:58:29,134 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:58:29,993 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:58:29,994 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:58:30,578 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:58:30,578 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:58:31,226 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:58:31,226 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:58:31,985 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:58:31,985 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:58:32,696 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:58:32,696 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:58:33,427 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:58:33,427 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:58:33,949 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:58:33,949 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:58:34,609 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:58:34,609 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:58:35,398 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:58:35,399 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:58:47,155 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:58:47,155 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:58:48,635 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:58:48,635 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:58:49,236 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:58:49,237 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:58:49,747 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:58:49,748 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:58:50,184 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:58:50,184 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:58:50,417 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:58:50,417 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:58:50,949 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:58:50,950 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:59:03,413 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:59:03,413 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:59:04,004 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:59:04,004 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:59:04,332 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:59:04,332 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:59:04,563 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:59:04,563 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 12:59:04,789 DEBUG core 17684 18512 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 12:59:04,789 DEBUG core 17684 18512 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:00:43,203 INFO autoreload 21400 17168 Watching for file changes with StatReloader
2023-06-27 13:01:07,621 DEBUG functional 18204 1860 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:01:07,622 DEBUG functional 18204 1860 
def chunks(task, it, n):
    return 1

2023-06-27 13:01:07,622 DEBUG functional 18204 1860 
def db_update_task():
    return 1

2023-06-27 13:01:07,623 DEBUG functional 18204 1860 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:01:07,623 DEBUG functional 18204 1860 
def backend_cleanup():
    return 1

2023-06-27 13:01:07,623 DEBUG functional 18204 1860 
def debug_task(self):
    return 1

2023-06-27 13:01:07,624 DEBUG functional 18204 1860 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:01:07,624 DEBUG functional 18204 1860 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:01:07,625 DEBUG functional 18204 1860 
def xmap(task, it):
    return 1

2023-06-27 13:01:07,625 DEBUG functional 18204 1860 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:01:07,625 DEBUG functional 18204 1860 
def xstarmap(task, it):
    return 1

2023-06-27 13:01:07,626 DEBUG functional 18204 1860 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:01:16,325 DEBUG functional 16304 12676 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:01:16,326 DEBUG functional 16304 12676 
def backend_cleanup():
    return 1

2023-06-27 13:01:16,326 DEBUG functional 16304 12676 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:01:16,327 DEBUG functional 16304 12676 
def xmap(task, it):
    return 1

2023-06-27 13:01:16,327 DEBUG functional 16304 12676 
def db_update_task():
    return 1

2023-06-27 13:01:16,327 DEBUG functional 16304 12676 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:01:16,328 DEBUG functional 16304 12676 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:01:16,328 DEBUG functional 16304 12676 
def debug_task(self):
    return 1

2023-06-27 13:01:16,328 DEBUG functional 16304 12676 
def xstarmap(task, it):
    return 1

2023-06-27 13:01:16,329 DEBUG functional 16304 12676 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:01:16,329 DEBUG functional 16304 12676 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:01:16,330 DEBUG functional 16304 12676 
def chunks(task, it, n):
    return 1

2023-06-27 13:01:19,868 DEBUG core 21400 2620 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:01:19,868 DEBUG core 21400 2620 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:01:21,102 DEBUG core 21400 2620 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:01:21,102 DEBUG core 21400 2620 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:01:21,722 DEBUG core 21400 2620 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:01:21,722 DEBUG core 21400 2620 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:01:22,197 DEBUG core 21400 2620 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:01:22,197 DEBUG core 21400 2620 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:02:58,762 DEBUG functional 13352 16552 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:02:58,763 DEBUG functional 13352 16552 
def chunks(task, it, n):
    return 1

2023-06-27 13:02:58,763 DEBUG functional 13352 16552 
def db_update_task():
    return 1

2023-06-27 13:02:58,764 DEBUG functional 13352 16552 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:02:58,764 DEBUG functional 13352 16552 
def backend_cleanup():
    return 1

2023-06-27 13:02:58,764 DEBUG functional 13352 16552 
def debug_task(self):
    return 1

2023-06-27 13:02:58,765 DEBUG functional 13352 16552 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:02:58,765 DEBUG functional 13352 16552 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:02:58,766 DEBUG functional 13352 16552 
def xmap(task, it):
    return 1

2023-06-27 13:02:58,766 DEBUG functional 13352 16552 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:02:58,766 DEBUG functional 13352 16552 
def xstarmap(task, it):
    return 1

2023-06-27 13:02:58,767 DEBUG functional 13352 16552 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:03:06,658 DEBUG functional 13488 12088 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:03:06,659 DEBUG functional 13488 12088 
def backend_cleanup():
    return 1

2023-06-27 13:03:06,659 DEBUG functional 13488 12088 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:03:06,660 DEBUG functional 13488 12088 
def xmap(task, it):
    return 1

2023-06-27 13:03:06,660 DEBUG functional 13488 12088 
def db_update_task():
    return 1

2023-06-27 13:03:06,660 DEBUG functional 13488 12088 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:03:06,661 DEBUG functional 13488 12088 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:03:06,661 DEBUG functional 13488 12088 
def debug_task(self):
    return 1

2023-06-27 13:03:06,661 DEBUG functional 13488 12088 
def xstarmap(task, it):
    return 1

2023-06-27 13:03:06,662 DEBUG functional 13488 12088 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:03:06,662 DEBUG functional 13488 12088 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:03:06,663 DEBUG functional 13488 12088 
def chunks(task, it, n):
    return 1

2023-06-27 13:03:51,487 INFO autoreload 21400 17168 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-27 13:03:53,057 INFO autoreload 9900 2304 Watching for file changes with StatReloader
2023-06-27 13:05:27,706 INFO autoreload 9900 2304 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-27 13:05:29,267 INFO autoreload 3184 7244 Watching for file changes with StatReloader
2023-06-27 13:05:37,870 INFO autoreload 3184 7244 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-27 13:05:39,410 INFO autoreload 1956 12984 Watching for file changes with StatReloader
2023-06-27 13:05:49,266 INFO autoreload 14876 9668 Watching for file changes with StatReloader
2023-06-27 13:05:59,642 DEBUG functional 9560 3604 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:05:59,642 DEBUG functional 9560 3604 
def chunks(task, it, n):
    return 1

2023-06-27 13:05:59,643 DEBUG functional 9560 3604 
def db_update_task():
    return 1

2023-06-27 13:05:59,643 DEBUG functional 9560 3604 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:05:59,644 DEBUG functional 9560 3604 
def backend_cleanup():
    return 1

2023-06-27 13:05:59,644 DEBUG functional 9560 3604 
def debug_task(self):
    return 1

2023-06-27 13:05:59,644 DEBUG functional 9560 3604 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:05:59,645 DEBUG functional 9560 3604 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:05:59,645 DEBUG functional 9560 3604 
def xmap(task, it):
    return 1

2023-06-27 13:05:59,645 DEBUG functional 9560 3604 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:05:59,646 DEBUG functional 9560 3604 
def xstarmap(task, it):
    return 1

2023-06-27 13:05:59,646 DEBUG functional 9560 3604 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:06:08,338 DEBUG functional 13284 14044 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:06:08,338 DEBUG functional 13284 14044 
def backend_cleanup():
    return 1

2023-06-27 13:06:08,339 DEBUG functional 13284 14044 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:06:08,339 DEBUG functional 13284 14044 
def xmap(task, it):
    return 1

2023-06-27 13:06:08,339 DEBUG functional 13284 14044 
def db_update_task():
    return 1

2023-06-27 13:06:08,340 DEBUG functional 13284 14044 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:06:08,340 DEBUG functional 13284 14044 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:06:08,340 DEBUG functional 13284 14044 
def debug_task(self):
    return 1

2023-06-27 13:06:08,341 DEBUG functional 13284 14044 
def xstarmap(task, it):
    return 1

2023-06-27 13:06:08,341 DEBUG functional 13284 14044 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:06:08,342 DEBUG functional 13284 14044 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:06:08,342 DEBUG functional 13284 14044 
def chunks(task, it, n):
    return 1

2023-06-27 13:06:13,240 DEBUG core 14876 16172 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:06:13,240 DEBUG core 14876 16172 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:06:13,907 DEBUG core 14876 16172 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:06:13,908 DEBUG core 14876 16172 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:06:14,363 DEBUG core 14876 16172 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:06:14,364 DEBUG core 14876 16172 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:06:29,253 DEBUG core 14876 16172 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:06:29,253 DEBUG core 14876 16172 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:06:29,689 DEBUG core 14876 16172 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:06:29,689 DEBUG core 14876 16172 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:06:30,063 DEBUG core 14876 16172 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:06:30,063 DEBUG core 14876 16172 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:06:30,569 DEBUG core 14876 16172 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:06:30,570 DEBUG core 14876 16172 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:09:23,148 INFO autoreload 14876 9668 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-27 13:09:24,699 INFO autoreload 15916 10148 Watching for file changes with StatReloader
2023-06-27 13:09:26,867 INFO autoreload 15916 10148 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-27 13:09:28,473 INFO autoreload 18424 952 Watching for file changes with StatReloader
2023-06-27 13:09:36,978 INFO autoreload 7444 10064 Watching for file changes with StatReloader
2023-06-27 13:09:51,389 DEBUG functional 8104 17768 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:09:51,389 DEBUG functional 8104 17768 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:09:51,389 DEBUG functional 8104 17768 
def chunks(task, it, n):
    return 1

2023-06-27 13:09:51,390 DEBUG functional 8104 17768 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:09:51,390 DEBUG functional 8104 17768 
def backend_cleanup():
    return 1

2023-06-27 13:09:51,391 DEBUG functional 8104 17768 
def debug_task(self):
    return 1

2023-06-27 13:09:51,391 DEBUG functional 8104 17768 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:09:51,391 DEBUG functional 8104 17768 
def xmap(task, it):
    return 1

2023-06-27 13:09:51,392 DEBUG functional 8104 17768 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:09:51,392 DEBUG functional 8104 17768 
def xstarmap(task, it):
    return 1

2023-06-27 13:09:51,392 DEBUG functional 8104 17768 
def db_update_task():
    return 1

2023-06-27 13:09:51,393 DEBUG functional 8104 17768 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:09:54,815 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:09:54,815 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:09:55,380 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:09:55,380 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:06,080 DEBUG functional 5016 11256 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:10:06,081 DEBUG functional 5016 11256 
def backend_cleanup():
    return 1

2023-06-27 13:10:06,081 DEBUG functional 5016 11256 
def db_update_task():
    return 1

2023-06-27 13:10:06,081 DEBUG functional 5016 11256 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:10:06,082 DEBUG functional 5016 11256 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:10:06,082 DEBUG functional 5016 11256 
def xmap(task, it):
    return 1

2023-06-27 13:10:06,082 DEBUG functional 5016 11256 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:10:06,082 DEBUG functional 5016 11256 
def debug_task(self):
    return 1

2023-06-27 13:10:06,083 DEBUG functional 5016 11256 
def xstarmap(task, it):
    return 1

2023-06-27 13:10:06,083 DEBUG functional 5016 11256 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:10:06,083 DEBUG functional 5016 11256 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:10:06,084 DEBUG functional 5016 11256 
def chunks(task, it, n):
    return 1

2023-06-27 13:10:10,997 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:10,997 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:13,122 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:13,122 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:13,883 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:13,883 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:25,326 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:25,326 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:27,454 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:27,454 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:29,241 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:29,241 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:33,511 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:33,511 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:34,129 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:34,129 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:34,645 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:34,645 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:35,268 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:35,269 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:37,413 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:37,413 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:37,963 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:37,963 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:40,983 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:40,983 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:41,475 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:41,475 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:42,309 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:42,309 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:42,884 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:42,885 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:43,346 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:43,346 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:43,747 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:43,748 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:44,342 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:44,342 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:44,805 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:44,806 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:45,124 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:45,125 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:45,427 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:45,427 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:45,513 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:45,513 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:45,654 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:45,654 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:46,165 DEBUG core 7444 5440 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:46,165 DEBUG core 7444 5440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:46,220 WARNING log 7444 5440 Not Found: /favicon.ico
2023-06-27 13:10:49,586 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:49,587 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:50,113 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:50,113 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:50,536 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:50,536 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:50,965 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:50,965 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:51,349 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:51,349 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:51,711 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:51,711 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:52,214 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:52,215 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:56,811 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:56,811 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:57,479 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:57,479 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:58,084 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:58,084 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:10:58,876 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:10:58,876 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:03,771 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:03,772 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:05,534 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:05,535 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:07,597 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:07,597 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:08,215 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:08,215 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:08,824 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:08,824 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:09,316 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:09,316 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:09,709 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:09,709 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:10,121 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:10,122 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:10,551 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:10,551 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:10,992 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:10,992 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:11,364 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:11,364 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:11,739 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:11,739 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:12,168 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:12,168 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:12,560 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:12,560 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:12,934 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:12,934 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:13,369 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:13,369 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:13,697 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:13,697 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:13,895 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:13,895 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:14,044 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:14,045 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:14,199 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:14,200 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:38,513 DEBUG core 7444 952 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:38,513 DEBUG core 7444 952 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:38,604 WARNING log 7444 952 Not Found: /favicon.ico
2023-06-27 13:11:39,789 DEBUG core 7444 11916 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:39,789 DEBUG core 7444 11916 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:39,851 WARNING log 7444 11916 Not Found: /favicon.ico
2023-06-27 13:11:40,175 DEBUG core 7444 2908 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:40,175 DEBUG core 7444 2908 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:40,376 DEBUG core 7444 2908 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:40,376 DEBUG core 7444 2908 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:40,571 DEBUG core 7444 2908 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:40,571 DEBUG core 7444 2908 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:40,738 DEBUG core 7444 2908 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:40,738 DEBUG core 7444 2908 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:40,907 DEBUG core 7444 2908 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:40,907 DEBUG core 7444 2908 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:41,079 DEBUG core 7444 2908 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:41,080 DEBUG core 7444 2908 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:41,373 DEBUG core 7444 2908 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:41,374 DEBUG core 7444 2908 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:46,192 DEBUG core 7444 2908 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:46,192 DEBUG core 7444 2908 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:46,655 DEBUG core 7444 2908 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:46,655 DEBUG core 7444 2908 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:47,008 DEBUG core 7444 2908 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:47,008 DEBUG core 7444 2908 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:47,222 DEBUG core 7444 2908 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:47,222 DEBUG core 7444 2908 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:47,832 DEBUG core 7444 2908 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:47,832 DEBUG core 7444 2908 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:48,433 DEBUG core 7444 2908 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:48,434 DEBUG core 7444 2908 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:50,310 DEBUG core 7444 2908 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:50,310 DEBUG core 7444 2908 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:50,820 DEBUG core 7444 2908 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:50,821 DEBUG core 7444 2908 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:11:51,527 DEBUG core 7444 2908 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:11:51,528 DEBUG core 7444 2908 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:12:02,845 DEBUG core 7444 2908 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:12:02,845 DEBUG core 7444 2908 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:25:34,968 INFO autoreload 20032 17276 Watching for file changes with StatReloader
2023-06-27 13:25:47,020 DEBUG core 20032 17764 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:25:47,020 DEBUG core 20032 17764 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:25:47,108 WARNING log 20032 17764 Not Found: /favicon.ico
2023-06-27 13:25:47,667 DEBUG core 20032 4628 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:25:47,667 DEBUG core 20032 4628 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:25:52,389 DEBUG core 20032 4628 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:25:52,389 DEBUG core 20032 4628 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:26:01,894 DEBUG functional 1676 12928 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:26:01,894 DEBUG functional 1676 12928 
def chunks(task, it, n):
    return 1

2023-06-27 13:26:01,895 DEBUG functional 1676 12928 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:26:01,895 DEBUG functional 1676 12928 
def backend_cleanup():
    return 1

2023-06-27 13:26:01,896 DEBUG functional 1676 12928 
def debug_task(self):
    return 1

2023-06-27 13:26:01,896 DEBUG functional 1676 12928 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:26:01,897 DEBUG functional 1676 12928 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:26:01,897 DEBUG functional 1676 12928 
def xmap(task, it):
    return 1

2023-06-27 13:26:01,897 DEBUG functional 1676 12928 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:26:01,898 DEBUG functional 1676 12928 
def db_update_task():
    return 1

2023-06-27 13:26:01,898 DEBUG functional 1676 12928 
def xstarmap(task, it):
    return 1

2023-06-27 13:26:01,898 DEBUG functional 1676 12928 
def close_position_task(*args, **kwds):
    return 1

2023-06-27 13:26:01,899 DEBUG functional 1676 12928 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:26:16,341 DEBUG functional 20032 14020 
def xstarmap(task, it):
    return 1

2023-06-27 13:26:16,343 DEBUG functional 20032 14020 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:26:16,343 DEBUG functional 20032 14020 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:26:16,343 DEBUG functional 20032 14020 
def db_update_task():
    return 1

2023-06-27 13:26:16,344 DEBUG functional 20032 14020 
def chunks(task, it, n):
    return 1

2023-06-27 13:26:16,344 DEBUG functional 20032 14020 
def debug_task(self):
    return 1

2023-06-27 13:26:16,344 DEBUG functional 20032 14020 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:26:16,345 DEBUG functional 20032 14020 
def close_position_task(*args, **kwds):
    return 1

2023-06-27 13:26:16,345 DEBUG functional 20032 14020 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:26:16,345 DEBUG functional 20032 14020 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:26:16,346 DEBUG functional 20032 14020 
def xmap(task, it):
    return 1

2023-06-27 13:26:16,346 DEBUG functional 20032 14020 
def backend_cleanup():
    return 1

2023-06-27 13:26:16,346 DEBUG functional 20032 14020 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:26:18,308 DEBUG core 20032 4628 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:26:18,308 DEBUG core 20032 4628 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:27:03,477 DEBUG core 20032 4628 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:27:03,477 DEBUG core 20032 4628 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:27:04,169 DEBUG core 20032 4628 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:27:04,169 DEBUG core 20032 4628 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:27:04,691 DEBUG core 20032 4628 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:27:04,691 DEBUG core 20032 4628 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:27:05,218 DEBUG core 20032 4628 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:27:05,218 DEBUG core 20032 4628 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:30:25,572 INFO autoreload 20032 17276 C:\Users\Evert\Desktop\Django\monreal\accounts\views.py changed, reloading.
2023-06-27 13:30:27,318 INFO autoreload 19480 10960 Watching for file changes with StatReloader
2023-06-27 13:31:27,227 INFO autoreload 9108 9396 Watching for file changes with StatReloader
2023-06-27 13:31:44,324 DEBUG core 9108 19268 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:31:44,324 DEBUG core 9108 19268 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:31:45,039 DEBUG core 9108 20044 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:31:45,039 DEBUG core 9108 20044 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:32:09,393 DEBUG functional 7040 14020 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:32:09,393 DEBUG functional 7040 14020 
def backend_cleanup():
    return 1

2023-06-27 13:32:09,394 DEBUG functional 7040 14020 
def close_position_task(*args, **kwds):
    return 1

2023-06-27 13:32:09,394 DEBUG functional 7040 14020 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:32:09,395 DEBUG functional 7040 14020 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:32:09,395 DEBUG functional 7040 14020 
def xmap(task, it):
    return 1

2023-06-27 13:32:09,396 DEBUG functional 7040 14020 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:32:09,396 DEBUG functional 7040 14020 
def debug_task(self):
    return 1

2023-06-27 13:32:09,396 DEBUG functional 7040 14020 
def xstarmap(task, it):
    return 1

2023-06-27 13:32:09,397 DEBUG functional 7040 14020 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:32:09,397 DEBUG functional 7040 14020 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:32:09,397 DEBUG functional 7040 14020 
def chunks(task, it, n):
    return 1

2023-06-27 13:32:09,398 DEBUG functional 7040 14020 
def db_update_task():
    return 1

2023-06-27 13:32:22,188 DEBUG functional 11816 1204 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:32:22,189 DEBUG functional 11816 1204 
def chunks(task, it, n):
    return 1

2023-06-27 13:32:22,189 DEBUG functional 11816 1204 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:32:22,190 DEBUG functional 11816 1204 
def backend_cleanup():
    return 1

2023-06-27 13:32:22,190 DEBUG functional 11816 1204 
def debug_task(self):
    return 1

2023-06-27 13:32:22,191 DEBUG functional 11816 1204 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:32:22,191 DEBUG functional 11816 1204 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:32:22,191 DEBUG functional 11816 1204 
def xmap(task, it):
    return 1

2023-06-27 13:32:22,192 DEBUG functional 11816 1204 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:32:22,192 DEBUG functional 11816 1204 
def db_update_task():
    return 1

2023-06-27 13:32:22,192 DEBUG functional 11816 1204 
def xstarmap(task, it):
    return 1

2023-06-27 13:32:22,193 DEBUG functional 11816 1204 
def close_position_task(*args, **kwds):
    return 1

2023-06-27 13:32:22,193 DEBUG functional 11816 1204 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:32:30,117 DEBUG core 9108 20044 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:32:30,117 DEBUG core 9108 20044 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:32:30,903 DEBUG core 9108 20044 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:32:30,903 DEBUG core 9108 20044 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:32:31,999 DEBUG core 9108 20044 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:32:31,999 DEBUG core 9108 20044 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:32:32,643 DEBUG core 9108 20044 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:32:32,644 DEBUG core 9108 20044 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:32:33,143 DEBUG core 9108 20044 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:32:33,143 DEBUG core 9108 20044 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:33:15,275 DEBUG functional 9108 21020 
def xstarmap(task, it):
    return 1

2023-06-27 13:33:15,277 DEBUG functional 9108 21020 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:33:15,277 DEBUG functional 9108 21020 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:33:15,278 DEBUG functional 9108 21020 
def chunks(task, it, n):
    return 1

2023-06-27 13:33:15,278 DEBUG functional 9108 21020 
def debug_task(self):
    return 1

2023-06-27 13:33:15,278 DEBUG functional 9108 21020 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:33:15,279 DEBUG functional 9108 21020 
def db_update_task():
    return 1

2023-06-27 13:33:15,279 DEBUG functional 9108 21020 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:33:15,279 DEBUG functional 9108 21020 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:33:15,280 DEBUG functional 9108 21020 
def close_position_task(*args, **kwds):
    return 1

2023-06-27 13:33:15,280 DEBUG functional 9108 21020 
def xmap(task, it):
    return 1

2023-06-27 13:33:15,280 DEBUG functional 9108 21020 
def backend_cleanup():
    return 1

2023-06-27 13:33:15,281 DEBUG functional 9108 21020 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:33:17,667 DEBUG core 9108 20044 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:33:17,667 DEBUG core 9108 20044 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:33:18,300 DEBUG core 9108 20044 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:33:18,300 DEBUG core 9108 20044 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:33:18,665 DEBUG core 9108 20044 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:33:18,665 DEBUG core 9108 20044 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:33:38,579 INFO autoreload 9108 9396 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-27 13:33:40,424 INFO autoreload 14868 11244 Watching for file changes with StatReloader
2023-06-27 13:33:44,429 DEBUG functional 14868 19816 
def xstarmap(task, it):
    return 1

2023-06-27 13:33:44,431 DEBUG functional 14868 19816 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:33:44,431 DEBUG functional 14868 19816 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:33:44,431 DEBUG functional 14868 19816 
def chunks(task, it, n):
    return 1

2023-06-27 13:33:44,432 DEBUG functional 14868 19816 
def debug_task(self):
    return 1

2023-06-27 13:33:44,432 DEBUG functional 14868 19816 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:33:44,432 DEBUG functional 14868 19816 
def db_update_task():
    return 1

2023-06-27 13:33:44,433 DEBUG functional 14868 19816 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:33:44,433 DEBUG functional 14868 19816 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:33:44,433 DEBUG functional 14868 19816 
def close_position_task(*args, **kwds):
    return 1

2023-06-27 13:33:44,434 DEBUG functional 14868 19816 
def xmap(task, it):
    return 1

2023-06-27 13:33:44,434 DEBUG functional 14868 19816 
def backend_cleanup():
    return 1

2023-06-27 13:33:44,434 DEBUG functional 14868 19816 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:34:21,880 DEBUG core 14868 11940 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:34:21,880 DEBUG core 14868 11940 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:34:22,578 DEBUG core 14868 11940 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:34:22,579 DEBUG core 14868 11940 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:36:58,107 INFO autoreload 14868 11244 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-27 13:36:59,705 INFO autoreload 15028 6636 Watching for file changes with StatReloader
2023-06-27 13:37:05,152 INFO autoreload 15028 6636 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-27 13:37:06,671 INFO autoreload 2952 9068 Watching for file changes with StatReloader
2023-06-27 13:37:35,166 INFO autoreload 8808 18808 Watching for file changes with StatReloader
2023-06-27 13:37:49,437 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:37:49,438 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:37:50,187 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:37:50,187 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:37:56,468 DEBUG functional 6624 6116 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:37:56,469 DEBUG functional 6624 6116 
def chunks(task, it, n):
    return 1

2023-06-27 13:37:56,469 DEBUG functional 6624 6116 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:37:56,470 DEBUG functional 6624 6116 
def backend_cleanup():
    return 1

2023-06-27 13:37:56,470 DEBUG functional 6624 6116 
def debug_task(self):
    return 1

2023-06-27 13:37:56,470 DEBUG functional 6624 6116 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:37:56,471 DEBUG functional 6624 6116 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:37:56,471 DEBUG functional 6624 6116 
def xmap(task, it):
    return 1

2023-06-27 13:37:56,472 DEBUG functional 6624 6116 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:37:56,472 DEBUG functional 6624 6116 
def db_update_task():
    return 1

2023-06-27 13:37:56,472 DEBUG functional 6624 6116 
def xstarmap(task, it):
    return 1

2023-06-27 13:37:56,473 DEBUG functional 6624 6116 
def close_position_task(*args, **kwds):
    return 1

2023-06-27 13:37:56,473 DEBUG functional 6624 6116 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:38:04,168 DEBUG functional 7608 18616 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:38:04,168 DEBUG functional 7608 18616 
def backend_cleanup():
    return 1

2023-06-27 13:38:04,168 DEBUG functional 7608 18616 
def close_position_task(*args, **kwds):
    return 1

2023-06-27 13:38:04,169 DEBUG functional 7608 18616 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:38:04,169 DEBUG functional 7608 18616 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:38:04,169 DEBUG functional 7608 18616 
def xmap(task, it):
    return 1

2023-06-27 13:38:04,170 DEBUG functional 7608 18616 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:38:04,170 DEBUG functional 7608 18616 
def debug_task(self):
    return 1

2023-06-27 13:38:04,170 DEBUG functional 7608 18616 
def xstarmap(task, it):
    return 1

2023-06-27 13:38:04,171 DEBUG functional 7608 18616 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:38:04,171 DEBUG functional 7608 18616 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:38:04,172 DEBUG functional 7608 18616 
def chunks(task, it, n):
    return 1

2023-06-27 13:38:04,172 DEBUG functional 7608 18616 
def db_update_task():
    return 1

2023-06-27 13:38:06,894 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:38:06,894 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:38:07,457 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:38:07,457 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:38:07,940 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:38:07,941 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:38:08,277 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:38:08,278 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:38:08,514 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:38:08,514 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:38:08,684 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:38:08,684 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:38:08,834 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:38:08,834 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:38:08,993 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:38:08,993 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:38:09,156 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:38:09,156 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:38:09,332 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:38:09,332 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:38:24,680 DEBUG functional 8808 12748 
def xstarmap(task, it):
    return 1

2023-06-27 13:38:24,682 DEBUG functional 8808 12748 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:38:24,682 DEBUG functional 8808 12748 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:38:24,682 DEBUG functional 8808 12748 
def chunks(task, it, n):
    return 1

2023-06-27 13:38:24,683 DEBUG functional 8808 12748 
def debug_task(self):
    return 1

2023-06-27 13:38:24,683 DEBUG functional 8808 12748 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:38:24,684 DEBUG functional 8808 12748 
def db_update_task():
    return 1

2023-06-27 13:38:24,684 DEBUG functional 8808 12748 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:38:24,684 DEBUG functional 8808 12748 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:38:24,684 DEBUG functional 8808 12748 
def close_position_task(*args, **kwds):
    return 1

2023-06-27 13:38:24,685 DEBUG functional 8808 12748 
def xmap(task, it):
    return 1

2023-06-27 13:38:24,685 DEBUG functional 8808 12748 
def backend_cleanup():
    return 1

2023-06-27 13:38:24,685 DEBUG functional 8808 12748 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:38:26,538 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:38:26,538 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:38:50,997 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:38:50,997 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:38:51,889 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:38:51,889 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:38:53,040 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:38:53,040 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:38:53,428 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:38:53,429 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:38:53,594 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:38:53,594 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:38:53,787 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:38:53,787 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:38:53,943 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:38:53,943 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:38:54,092 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:38:54,093 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:39:13,856 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:39:13,856 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:39:15,269 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:39:15,269 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:39:23,506 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:39:23,506 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:39:31,816 DEBUG core 8808 10252 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:39:31,816 DEBUG core 8808 10252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:41:29,498 INFO autoreload 17628 17600 Watching for file changes with StatReloader
2023-06-27 13:45:31,745 INFO autoreload 10424 12808 Watching for file changes with StatReloader
2023-06-27 13:45:46,530 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:45:46,530 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:45:46,860 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:45:46,860 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:45:48,402 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:45:48,402 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:45:56,444 DEBUG functional 16708 968 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:45:56,444 DEBUG functional 16708 968 
def chunks(task, it, n):
    return 1

2023-06-27 13:45:56,444 DEBUG functional 16708 968 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:45:56,445 DEBUG functional 16708 968 
def backend_cleanup():
    return 1

2023-06-27 13:45:56,445 DEBUG functional 16708 968 
def debug_task(self):
    return 1

2023-06-27 13:45:56,445 DEBUG functional 16708 968 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:45:56,446 DEBUG functional 16708 968 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:45:56,446 DEBUG functional 16708 968 
def xmap(task, it):
    return 1

2023-06-27 13:45:56,447 DEBUG functional 16708 968 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:45:56,447 DEBUG functional 16708 968 
def db_update_task():
    return 1

2023-06-27 13:45:56,447 DEBUG functional 16708 968 
def xstarmap(task, it):
    return 1

2023-06-27 13:45:56,448 DEBUG functional 16708 968 
def close_position_task(*args, **kwds):
    return 1

2023-06-27 13:45:56,448 DEBUG functional 16708 968 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:46:06,167 DEBUG functional 4632 15172 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:46:06,168 DEBUG functional 4632 15172 
def backend_cleanup():
    return 1

2023-06-27 13:46:06,168 DEBUG functional 4632 15172 
def close_position_task(*args, **kwds):
    return 1

2023-06-27 13:46:06,169 DEBUG functional 4632 15172 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:46:06,169 DEBUG functional 4632 15172 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:46:06,169 DEBUG functional 4632 15172 
def xmap(task, it):
    return 1

2023-06-27 13:46:06,170 DEBUG functional 4632 15172 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:46:06,170 DEBUG functional 4632 15172 
def debug_task(self):
    return 1

2023-06-27 13:46:06,170 DEBUG functional 4632 15172 
def xstarmap(task, it):
    return 1

2023-06-27 13:46:06,170 DEBUG functional 4632 15172 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:46:06,171 DEBUG functional 4632 15172 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:46:06,171 DEBUG functional 4632 15172 
def chunks(task, it, n):
    return 1

2023-06-27 13:46:06,172 DEBUG functional 4632 15172 
def db_update_task():
    return 1

2023-06-27 13:46:21,099 DEBUG functional 10424 4496 
def xstarmap(task, it):
    return 1

2023-06-27 13:46:21,101 DEBUG functional 10424 4496 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:46:21,102 DEBUG functional 10424 4496 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:46:21,102 DEBUG functional 10424 4496 
def chunks(task, it, n):
    return 1

2023-06-27 13:46:21,102 DEBUG functional 10424 4496 
def debug_task(self):
    return 1

2023-06-27 13:46:21,103 DEBUG functional 10424 4496 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:46:21,103 DEBUG functional 10424 4496 
def db_update_task():
    return 1

2023-06-27 13:46:21,103 DEBUG functional 10424 4496 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:46:21,104 DEBUG functional 10424 4496 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:46:21,104 DEBUG functional 10424 4496 
def close_position_task(*args, **kwds):
    return 1

2023-06-27 13:46:21,104 DEBUG functional 10424 4496 
def xmap(task, it):
    return 1

2023-06-27 13:46:21,105 DEBUG functional 10424 4496 
def backend_cleanup():
    return 1

2023-06-27 13:46:21,105 DEBUG functional 10424 4496 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:46:22,808 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:46:22,808 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:46:23,869 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:46:23,869 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:46:24,463 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:46:24,463 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:46:24,622 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:46:24,622 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:46:24,803 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:46:24,803 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:46:25,004 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:46:25,004 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:46:25,799 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:46:25,799 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:46:26,100 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:46:26,100 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:46:26,602 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:46:26,602 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:46:29,364 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:46:29,364 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:46:29,907 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:46:29,907 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:46:31,675 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:46:31,676 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:46:32,207 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:46:32,207 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:46:32,642 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:46:32,642 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:46:33,075 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:46:33,075 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:46:33,505 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:46:33,505 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:46:35,568 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:46:35,568 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:46:36,149 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:46:36,149 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:46:42,144 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:46:42,145 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:46:43,130 DEBUG core 10424 9980 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:46:43,131 DEBUG core 10424 9980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:47:26,336 INFO autoreload 10424 12808 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-27 13:47:27,906 INFO autoreload 15500 20264 Watching for file changes with StatReloader
2023-06-27 13:47:32,307 INFO autoreload 15500 20264 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-27 13:47:33,988 INFO autoreload 11732 12748 Watching for file changes with StatReloader
2023-06-27 13:47:40,135 DEBUG functional 3308 10352 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:47:40,135 DEBUG functional 3308 10352 
def chunks(task, it, n):
    return 1

2023-06-27 13:47:40,136 DEBUG functional 3308 10352 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:47:40,136 DEBUG functional 3308 10352 
def backend_cleanup():
    return 1

2023-06-27 13:47:40,137 DEBUG functional 3308 10352 
def debug_task(self):
    return 1

2023-06-27 13:47:40,137 DEBUG functional 3308 10352 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:47:40,138 DEBUG functional 3308 10352 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:47:40,138 DEBUG functional 3308 10352 
def xmap(task, it):
    return 1

2023-06-27 13:47:40,138 DEBUG functional 3308 10352 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:47:40,139 DEBUG functional 3308 10352 
def db_update_task():
    return 1

2023-06-27 13:47:40,139 DEBUG functional 3308 10352 
def xstarmap(task, it):
    return 1

2023-06-27 13:47:40,139 DEBUG functional 3308 10352 
def close_position_task(*args, **kwds):
    return 1

2023-06-27 13:47:40,140 DEBUG functional 3308 10352 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:47:45,985 DEBUG functional 16332 14772 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:47:45,986 DEBUG functional 16332 14772 
def backend_cleanup():
    return 1

2023-06-27 13:47:45,986 DEBUG functional 16332 14772 
def close_position_task(*args, **kwds):
    return 1

2023-06-27 13:47:45,987 DEBUG functional 16332 14772 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:47:45,987 DEBUG functional 16332 14772 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:47:45,987 DEBUG functional 16332 14772 
def xmap(task, it):
    return 1

2023-06-27 13:47:45,988 DEBUG functional 16332 14772 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:47:45,988 DEBUG functional 16332 14772 
def debug_task(self):
    return 1

2023-06-27 13:47:45,988 DEBUG functional 16332 14772 
def xstarmap(task, it):
    return 1

2023-06-27 13:47:45,989 DEBUG functional 16332 14772 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:47:45,989 DEBUG functional 16332 14772 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:47:45,989 DEBUG functional 16332 14772 
def chunks(task, it, n):
    return 1

2023-06-27 13:47:45,990 DEBUG functional 16332 14772 
def db_update_task():
    return 1

2023-06-27 13:47:49,107 DEBUG core 11732 21368 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:47:49,108 DEBUG core 11732 21368 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:47:49,673 DEBUG core 11732 21368 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:47:49,674 DEBUG core 11732 21368 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:47:50,236 DEBUG core 11732 21368 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:47:50,236 DEBUG core 11732 21368 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:47:50,413 DEBUG core 11732 21368 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:47:50,413 DEBUG core 11732 21368 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:47:50,669 DEBUG core 11732 21368 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:47:50,669 DEBUG core 11732 21368 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:47:50,922 DEBUG core 11732 21368 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:47:50,922 DEBUG core 11732 21368 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:47:51,141 DEBUG core 11732 21368 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:47:51,142 DEBUG core 11732 21368 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:47:53,182 DEBUG core 11732 21368 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:47:53,183 DEBUG core 11732 21368 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:47:58,883 DEBUG core 11732 21368 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:47:58,883 DEBUG core 11732 21368 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:48:01,146 DEBUG core 11732 21368 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:48:01,146 DEBUG core 11732 21368 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:48:06,565 DEBUG core 11732 21368 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:48:06,565 DEBUG core 11732 21368 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:48:07,449 DEBUG core 11732 21368 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:48:07,449 DEBUG core 11732 21368 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:48:10,604 DEBUG functional 11732 5144 
def xstarmap(task, it):
    return 1

2023-06-27 13:48:10,606 DEBUG functional 11732 5144 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:48:10,606 DEBUG functional 11732 5144 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:48:10,606 DEBUG functional 11732 5144 
def chunks(task, it, n):
    return 1

2023-06-27 13:48:10,607 DEBUG functional 11732 5144 
def debug_task(self):
    return 1

2023-06-27 13:48:10,607 DEBUG functional 11732 5144 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:48:10,608 DEBUG functional 11732 5144 
def db_update_task():
    return 1

2023-06-27 13:48:10,608 DEBUG functional 11732 5144 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:48:10,608 DEBUG functional 11732 5144 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:48:10,609 DEBUG functional 11732 5144 
def close_position_task(*args, **kwds):
    return 1

2023-06-27 13:48:10,609 DEBUG functional 11732 5144 
def xmap(task, it):
    return 1

2023-06-27 13:48:10,609 DEBUG functional 11732 5144 
def backend_cleanup():
    return 1

2023-06-27 13:48:10,610 DEBUG functional 11732 5144 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:48:45,365 DEBUG core 11732 21368 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:48:45,366 DEBUG core 11732 21368 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:48:46,438 DEBUG core 11732 21368 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:48:46,438 DEBUG core 11732 21368 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:48:47,345 DEBUG core 11732 21368 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:48:47,345 DEBUG core 11732 21368 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:49:30,907 DEBUG core 11732 21368 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:49:30,907 DEBUG core 11732 21368 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:52:32,483 INFO autoreload 19880 12732 Watching for file changes with StatReloader
2023-06-27 13:52:49,152 DEBUG functional 3404 14836 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:52:49,152 DEBUG functional 3404 14836 
def chunks(task, it, n):
    return 1

2023-06-27 13:52:49,153 DEBUG functional 3404 14836 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:52:49,153 DEBUG functional 3404 14836 
def backend_cleanup():
    return 1

2023-06-27 13:52:49,153 DEBUG functional 3404 14836 
def debug_task(self):
    return 1

2023-06-27 13:52:49,154 DEBUG functional 3404 14836 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:52:49,154 DEBUG functional 3404 14836 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:52:49,155 DEBUG functional 3404 14836 
def xmap(task, it):
    return 1

2023-06-27 13:52:49,155 DEBUG functional 3404 14836 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:52:49,155 DEBUG functional 3404 14836 
def db_update_task():
    return 1

2023-06-27 13:52:49,156 DEBUG functional 3404 14836 
def xstarmap(task, it):
    return 1

2023-06-27 13:52:49,156 DEBUG functional 3404 14836 
def close_position_task(*args, **kwds):
    return 1

2023-06-27 13:52:49,156 DEBUG functional 3404 14836 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:52:58,386 DEBUG functional 5100 10396 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:52:58,386 DEBUG functional 5100 10396 
def backend_cleanup():
    return 1

2023-06-27 13:52:58,387 DEBUG functional 5100 10396 
def close_position_task(*args, **kwds):
    return 1

2023-06-27 13:52:58,387 DEBUG functional 5100 10396 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:52:58,387 DEBUG functional 5100 10396 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:52:58,388 DEBUG functional 5100 10396 
def xmap(task, it):
    return 1

2023-06-27 13:52:58,388 DEBUG functional 5100 10396 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:52:58,388 DEBUG functional 5100 10396 
def debug_task(self):
    return 1

2023-06-27 13:52:58,389 DEBUG functional 5100 10396 
def xstarmap(task, it):
    return 1

2023-06-27 13:52:58,389 DEBUG functional 5100 10396 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:52:58,390 DEBUG functional 5100 10396 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:52:58,390 DEBUG functional 5100 10396 
def chunks(task, it, n):
    return 1

2023-06-27 13:52:58,390 DEBUG functional 5100 10396 
def db_update_task():
    return 1

2023-06-27 13:53:06,819 DEBUG core 19880 12576 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:53:06,819 DEBUG core 19880 12576 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:53:07,301 DEBUG core 19880 1012 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:53:07,301 DEBUG core 19880 1012 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:53:18,491 DEBUG core 19880 1012 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:53:18,491 DEBUG core 19880 1012 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:53:36,148 DEBUG functional 19880 20304 
def xstarmap(task, it):
    return 1

2023-06-27 13:53:36,150 DEBUG functional 19880 20304 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 13:53:36,150 DEBUG functional 19880 20304 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 13:53:36,151 DEBUG functional 19880 20304 
def chunks(task, it, n):
    return 1

2023-06-27 13:53:36,151 DEBUG functional 19880 20304 
def debug_task(self):
    return 1

2023-06-27 13:53:36,151 DEBUG functional 19880 20304 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 13:53:36,152 DEBUG functional 19880 20304 
def db_update_task():
    return 1

2023-06-27 13:53:36,152 DEBUG functional 19880 20304 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 13:53:36,152 DEBUG functional 19880 20304 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 13:53:36,153 DEBUG functional 19880 20304 
def close_position_task(*args, **kwds):
    return 1

2023-06-27 13:53:36,153 DEBUG functional 19880 20304 
def xmap(task, it):
    return 1

2023-06-27 13:53:36,153 DEBUG functional 19880 20304 
def backend_cleanup():
    return 1

2023-06-27 13:53:36,154 DEBUG functional 19880 20304 
def chain(*args, **kwargs):
    return 1

2023-06-27 13:53:39,412 DEBUG core 19880 1012 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:53:39,412 DEBUG core 19880 1012 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:53:47,169 DEBUG core 19880 1012 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:53:47,169 DEBUG core 19880 1012 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 13:54:16,405 DEBUG core 19880 1012 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 13:54:16,405 DEBUG core 19880 1012 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 20:51:55,091 INFO autoreload 12544 7364 Watching for file changes with StatReloader
2023-06-27 20:52:23,138 DEBUG core 12544 18304 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 20:52:23,139 DEBUG core 12544 18304 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 20:52:23,352 WARNING log 12544 2664 Not Found: /favicon.ico
2023-06-27 20:52:32,032 WARNING log 12544 14048 Bad Request: /api/login/
2023-06-27 20:52:36,215 WARNING log 12544 14048 Bad Request: /api/login/
2023-06-27 20:53:32,814 DEBUG functional 3968 8688 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 20:53:32,815 DEBUG functional 3968 8688 
def chunks(task, it, n):
    return 1

2023-06-27 20:53:32,815 DEBUG functional 3968 8688 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 20:53:32,816 DEBUG functional 3968 8688 
def backend_cleanup():
    return 1

2023-06-27 20:53:32,816 DEBUG functional 3968 8688 
def debug_task(self):
    return 1

2023-06-27 20:53:32,817 DEBUG functional 3968 8688 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 20:53:32,817 DEBUG functional 3968 8688 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 20:53:32,817 DEBUG functional 3968 8688 
def xmap(task, it):
    return 1

2023-06-27 20:53:32,818 DEBUG functional 3968 8688 
def chain(*args, **kwargs):
    return 1

2023-06-27 20:53:32,818 DEBUG functional 3968 8688 
def db_update_task():
    return 1

2023-06-27 20:53:32,818 DEBUG functional 3968 8688 
def xstarmap(task, it):
    return 1

2023-06-27 20:53:32,819 DEBUG functional 3968 8688 
def close_position_task(*args, **kwds):
    return 1

2023-06-27 20:53:32,819 DEBUG functional 3968 8688 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 20:53:50,643 DEBUG functional 18628 19684 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 20:53:50,644 DEBUG functional 18628 19684 
def backend_cleanup():
    return 1

2023-06-27 20:53:50,644 DEBUG functional 18628 19684 
def close_position_task(*args, **kwds):
    return 1

2023-06-27 20:53:50,645 DEBUG functional 18628 19684 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 20:53:50,645 DEBUG functional 18628 19684 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 20:53:50,645 DEBUG functional 18628 19684 
def xmap(task, it):
    return 1

2023-06-27 20:53:50,646 DEBUG functional 18628 19684 
def chain(*args, **kwargs):
    return 1

2023-06-27 20:53:50,646 DEBUG functional 18628 19684 
def debug_task(self):
    return 1

2023-06-27 20:53:50,647 DEBUG functional 18628 19684 
def xstarmap(task, it):
    return 1

2023-06-27 20:53:50,647 DEBUG functional 18628 19684 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 20:53:50,648 DEBUG functional 18628 19684 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 20:53:50,648 DEBUG functional 18628 19684 
def chunks(task, it, n):
    return 1

2023-06-27 20:53:50,648 DEBUG functional 18628 19684 
def db_update_task():
    return 1

2023-06-27 20:54:07,951 DEBUG functional 12544 14048 
def xstarmap(task, it):
    return 1

2023-06-27 20:54:07,953 DEBUG functional 12544 14048 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-27 20:54:07,953 DEBUG functional 12544 14048 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-27 20:54:07,953 DEBUG functional 12544 14048 
def chunks(task, it, n):
    return 1

2023-06-27 20:54:07,954 DEBUG functional 12544 14048 
def debug_task(self):
    return 1

2023-06-27 20:54:07,954 DEBUG functional 12544 14048 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-27 20:54:07,955 DEBUG functional 12544 14048 
def db_update_task():
    return 1

2023-06-27 20:54:07,955 DEBUG functional 12544 14048 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-27 20:54:07,955 DEBUG functional 12544 14048 
def place_order_task(*args, **kwds):
    return 1

2023-06-27 20:54:07,956 DEBUG functional 12544 14048 
def close_position_task(*args, **kwds):
    return 1

2023-06-27 20:54:07,956 DEBUG functional 12544 14048 
def xmap(task, it):
    return 1

2023-06-27 20:54:07,956 DEBUG functional 12544 14048 
def backend_cleanup():
    return 1

2023-06-27 20:54:07,957 DEBUG functional 12544 14048 
def chain(*args, **kwargs):
    return 1

2023-06-27 20:54:11,681 DEBUG core 12544 6560 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 20:54:11,681 DEBUG core 12544 6560 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 20:54:11,740 WARNING log 12544 6560 Not Found: /favicon.ico
2023-06-27 20:56:01,066 DEBUG core 12544 7696 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 20:56:01,066 DEBUG core 12544 7696 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 20:56:22,776 DEBUG core 12544 7696 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 20:56:22,776 DEBUG core 12544 7696 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 20:56:53,840 DEBUG core 12544 7696 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 20:56:53,840 DEBUG core 12544 7696 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 20:57:06,408 DEBUG core 12544 7696 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 20:57:06,408 DEBUG core 12544 7696 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-27 20:57:19,658 DEBUG core 12544 7696 Successfully imported extension module "markdown.extensions.toc".
2023-06-27 20:57:19,658 DEBUG core 12544 7696 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-28 17:59:25,043 INFO autoreload 17468 17096 Watching for file changes with StatReloader
2023-06-28 18:13:37,202 INFO autoreload 1860 10148 Watching for file changes with StatReloader
2023-06-28 18:14:19,140 DEBUG functional 5376 7920 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:14:19,141 DEBUG functional 5376 7920 
def chunks(task, it, n):
    return 1

2023-06-28 18:14:19,141 DEBUG functional 5376 7920 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:14:19,142 DEBUG functional 5376 7920 
def backend_cleanup():
    return 1

2023-06-28 18:14:19,142 DEBUG functional 5376 7920 
def debug_task(self):
    return 1

2023-06-28 18:14:19,142 DEBUG functional 5376 7920 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:14:19,143 DEBUG functional 5376 7920 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:14:19,143 DEBUG functional 5376 7920 
def xmap(task, it):
    return 1

2023-06-28 18:14:19,144 DEBUG functional 5376 7920 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:14:19,144 DEBUG functional 5376 7920 
def db_update_task():
    return 1

2023-06-28 18:14:19,144 DEBUG functional 5376 7920 
def xstarmap(task, it):
    return 1

2023-06-28 18:14:19,145 DEBUG functional 5376 7920 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:14:19,145 DEBUG functional 5376 7920 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:14:34,848 DEBUG functional 8480 11308 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:14:34,849 DEBUG functional 8480 11308 
def backend_cleanup():
    return 1

2023-06-28 18:14:34,849 DEBUG functional 8480 11308 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:14:34,849 DEBUG functional 8480 11308 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:14:34,850 DEBUG functional 8480 11308 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:14:34,850 DEBUG functional 8480 11308 
def xmap(task, it):
    return 1

2023-06-28 18:14:34,850 DEBUG functional 8480 11308 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:14:34,851 DEBUG functional 8480 11308 
def debug_task(self):
    return 1

2023-06-28 18:14:34,851 DEBUG functional 8480 11308 
def xstarmap(task, it):
    return 1

2023-06-28 18:14:34,851 DEBUG functional 8480 11308 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:14:34,852 DEBUG functional 8480 11308 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:14:34,852 DEBUG functional 8480 11308 
def chunks(task, it, n):
    return 1

2023-06-28 18:14:34,853 DEBUG functional 8480 11308 
def db_update_task():
    return 1

2023-06-28 18:14:43,490 WARNING log 1860 11872 Not Found: /
2023-06-28 18:14:43,557 WARNING log 1860 11872 Not Found: /favicon.ico
2023-06-28 18:14:46,897 DEBUG core 1860 5680 Successfully imported extension module "markdown.extensions.toc".
2023-06-28 18:14:46,897 DEBUG core 1860 5680 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-28 18:14:47,634 DEBUG core 1860 19660 Successfully imported extension module "markdown.extensions.toc".
2023-06-28 18:14:47,634 DEBUG core 1860 19660 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-28 18:15:01,452 DEBUG functional 1860 3376 
def xstarmap(task, it):
    return 1

2023-06-28 18:15:01,454 DEBUG functional 1860 3376 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:15:01,454 DEBUG functional 1860 3376 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:15:01,455 DEBUG functional 1860 3376 
def chunks(task, it, n):
    return 1

2023-06-28 18:15:01,455 DEBUG functional 1860 3376 
def debug_task(self):
    return 1

2023-06-28 18:15:01,456 DEBUG functional 1860 3376 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:15:01,456 DEBUG functional 1860 3376 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:15:01,456 DEBUG functional 1860 3376 
def xmap(task, it):
    return 1

2023-06-28 18:15:01,457 DEBUG functional 1860 3376 
def backend_cleanup():
    return 1

2023-06-28 18:15:01,457 DEBUG functional 1860 3376 
def db_update_task():
    return 1

2023-06-28 18:15:01,457 DEBUG functional 1860 3376 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:15:01,458 DEBUG functional 1860 3376 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:15:01,458 DEBUG functional 1860 3376 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:15:03,429 DEBUG core 1860 19660 Successfully imported extension module "markdown.extensions.toc".
2023-06-28 18:15:03,429 DEBUG core 1860 19660 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-28 18:15:04,303 DEBUG core 1860 19660 Successfully imported extension module "markdown.extensions.toc".
2023-06-28 18:15:04,303 DEBUG core 1860 19660 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-28 18:16:00,170 DEBUG core 1860 19660 Successfully imported extension module "markdown.extensions.toc".
2023-06-28 18:16:00,170 DEBUG core 1860 19660 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-28 18:22:04,813 INFO autoreload 21100 18408 Watching for file changes with StatReloader
2023-06-28 18:22:39,725 DEBUG functional 6528 10940 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:22:39,725 DEBUG functional 6528 10940 
def chunks(task, it, n):
    return 1

2023-06-28 18:22:39,726 DEBUG functional 6528 10940 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:22:39,726 DEBUG functional 6528 10940 
def backend_cleanup():
    return 1

2023-06-28 18:22:39,726 DEBUG functional 6528 10940 
def debug_task(self):
    return 1

2023-06-28 18:22:39,727 DEBUG functional 6528 10940 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:22:39,727 DEBUG functional 6528 10940 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:22:39,727 DEBUG functional 6528 10940 
def xmap(task, it):
    return 1

2023-06-28 18:22:39,728 DEBUG functional 6528 10940 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:22:39,728 DEBUG functional 6528 10940 
def db_update_task():
    return 1

2023-06-28 18:22:39,728 DEBUG functional 6528 10940 
def xstarmap(task, it):
    return 1

2023-06-28 18:22:39,729 DEBUG functional 6528 10940 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:22:39,729 DEBUG functional 6528 10940 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:22:48,099 DEBUG functional 4040 3508 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:22:48,100 DEBUG functional 4040 3508 
def backend_cleanup():
    return 1

2023-06-28 18:22:48,100 DEBUG functional 4040 3508 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:22:48,100 DEBUG functional 4040 3508 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:22:48,101 DEBUG functional 4040 3508 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:22:48,101 DEBUG functional 4040 3508 
def xmap(task, it):
    return 1

2023-06-28 18:22:48,102 DEBUG functional 4040 3508 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:22:48,102 DEBUG functional 4040 3508 
def debug_task(self):
    return 1

2023-06-28 18:22:48,102 DEBUG functional 4040 3508 
def xstarmap(task, it):
    return 1

2023-06-28 18:22:48,103 DEBUG functional 4040 3508 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:22:48,103 DEBUG functional 4040 3508 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:22:48,104 DEBUG functional 4040 3508 
def chunks(task, it, n):
    return 1

2023-06-28 18:22:48,104 DEBUG functional 4040 3508 
def db_update_task():
    return 1

2023-06-28 18:22:59,431 DEBUG functional 21100 17564 
def xstarmap(task, it):
    return 1

2023-06-28 18:22:59,433 DEBUG functional 21100 17564 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:22:59,433 DEBUG functional 21100 17564 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:22:59,433 DEBUG functional 21100 17564 
def chunks(task, it, n):
    return 1

2023-06-28 18:22:59,434 DEBUG functional 21100 17564 
def debug_task(self):
    return 1

2023-06-28 18:22:59,434 DEBUG functional 21100 17564 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:22:59,434 DEBUG functional 21100 17564 
def db_update_task():
    return 1

2023-06-28 18:22:59,435 DEBUG functional 21100 17564 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:22:59,435 DEBUG functional 21100 17564 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:22:59,435 DEBUG functional 21100 17564 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:22:59,436 DEBUG functional 21100 17564 
def xmap(task, it):
    return 1

2023-06-28 18:22:59,436 DEBUG functional 21100 17564 
def backend_cleanup():
    return 1

2023-06-28 18:22:59,437 DEBUG functional 21100 17564 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:23:26,547 INFO autoreload 21100 18408 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-28 18:23:28,130 INFO autoreload 19716 5104 Watching for file changes with StatReloader
2023-06-28 18:23:37,364 DEBUG functional 16700 16012 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:23:37,365 DEBUG functional 16700 16012 
def chunks(task, it, n):
    return 1

2023-06-28 18:23:37,366 DEBUG functional 16700 16012 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:23:37,366 DEBUG functional 16700 16012 
def backend_cleanup():
    return 1

2023-06-28 18:23:37,366 DEBUG functional 16700 16012 
def debug_task(self):
    return 1

2023-06-28 18:23:37,367 DEBUG functional 16700 16012 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:23:37,367 DEBUG functional 16700 16012 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:23:37,367 DEBUG functional 16700 16012 
def xmap(task, it):
    return 1

2023-06-28 18:23:37,368 DEBUG functional 16700 16012 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:23:37,368 DEBUG functional 16700 16012 
def db_update_task():
    return 1

2023-06-28 18:23:37,368 DEBUG functional 16700 16012 
def xstarmap(task, it):
    return 1

2023-06-28 18:23:37,369 DEBUG functional 16700 16012 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:23:37,369 DEBUG functional 16700 16012 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:23:43,306 DEBUG functional 6540 8776 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:23:43,307 DEBUG functional 6540 8776 
def backend_cleanup():
    return 1

2023-06-28 18:23:43,307 DEBUG functional 6540 8776 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:23:43,308 DEBUG functional 6540 8776 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:23:43,308 DEBUG functional 6540 8776 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:23:43,308 DEBUG functional 6540 8776 
def xmap(task, it):
    return 1

2023-06-28 18:23:43,309 DEBUG functional 6540 8776 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:23:43,309 DEBUG functional 6540 8776 
def debug_task(self):
    return 1

2023-06-28 18:23:43,309 DEBUG functional 6540 8776 
def xstarmap(task, it):
    return 1

2023-06-28 18:23:43,310 DEBUG functional 6540 8776 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:23:43,310 DEBUG functional 6540 8776 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:23:43,311 DEBUG functional 6540 8776 
def chunks(task, it, n):
    return 1

2023-06-28 18:23:43,311 DEBUG functional 6540 8776 
def db_update_task():
    return 1

2023-06-28 18:23:49,228 DEBUG functional 19716 15464 
def xstarmap(task, it):
    return 1

2023-06-28 18:23:49,229 DEBUG functional 19716 15464 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:23:49,230 DEBUG functional 19716 15464 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:23:49,230 DEBUG functional 19716 15464 
def chunks(task, it, n):
    return 1

2023-06-28 18:23:49,231 DEBUG functional 19716 15464 
def debug_task(self):
    return 1

2023-06-28 18:23:49,231 DEBUG functional 19716 15464 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:23:49,231 DEBUG functional 19716 15464 
def db_update_task():
    return 1

2023-06-28 18:23:49,232 DEBUG functional 19716 15464 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:23:49,232 DEBUG functional 19716 15464 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:23:49,232 DEBUG functional 19716 15464 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:23:49,233 DEBUG functional 19716 15464 
def xmap(task, it):
    return 1

2023-06-28 18:23:49,233 DEBUG functional 19716 15464 
def backend_cleanup():
    return 1

2023-06-28 18:23:49,233 DEBUG functional 19716 15464 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:24:52,977 INFO autoreload 14756 13624 Watching for file changes with StatReloader
2023-06-28 18:25:23,696 DEBUG functional 15460 5896 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:25:23,697 DEBUG functional 15460 5896 
def chunks(task, it, n):
    return 1

2023-06-28 18:25:23,697 DEBUG functional 15460 5896 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:25:23,697 DEBUG functional 15460 5896 
def backend_cleanup():
    return 1

2023-06-28 18:25:23,698 DEBUG functional 15460 5896 
def debug_task(self):
    return 1

2023-06-28 18:25:23,698 DEBUG functional 15460 5896 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:25:23,699 DEBUG functional 15460 5896 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:25:23,699 DEBUG functional 15460 5896 
def xmap(task, it):
    return 1

2023-06-28 18:25:23,699 DEBUG functional 15460 5896 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:25:23,700 DEBUG functional 15460 5896 
def db_update_task():
    return 1

2023-06-28 18:25:23,700 DEBUG functional 15460 5896 
def xstarmap(task, it):
    return 1

2023-06-28 18:25:23,700 DEBUG functional 15460 5896 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:25:23,701 DEBUG functional 15460 5896 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:25:34,264 DEBUG functional 6000 16640 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:25:34,264 DEBUG functional 6000 16640 
def backend_cleanup():
    return 1

2023-06-28 18:25:34,265 DEBUG functional 6000 16640 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:25:34,265 DEBUG functional 6000 16640 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:25:34,265 DEBUG functional 6000 16640 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:25:34,266 DEBUG functional 6000 16640 
def xmap(task, it):
    return 1

2023-06-28 18:25:34,266 DEBUG functional 6000 16640 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:25:34,266 DEBUG functional 6000 16640 
def debug_task(self):
    return 1

2023-06-28 18:25:34,267 DEBUG functional 6000 16640 
def xstarmap(task, it):
    return 1

2023-06-28 18:25:34,267 DEBUG functional 6000 16640 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:25:34,268 DEBUG functional 6000 16640 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:25:34,268 DEBUG functional 6000 16640 
def chunks(task, it, n):
    return 1

2023-06-28 18:25:34,268 DEBUG functional 6000 16640 
def db_update_task():
    return 1

2023-06-28 18:25:42,983 DEBUG functional 14756 10192 
def xstarmap(task, it):
    return 1

2023-06-28 18:25:42,985 DEBUG functional 14756 10192 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:25:42,985 DEBUG functional 14756 10192 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:25:42,986 DEBUG functional 14756 10192 
def chunks(task, it, n):
    return 1

2023-06-28 18:25:42,986 DEBUG functional 14756 10192 
def debug_task(self):
    return 1

2023-06-28 18:25:42,986 DEBUG functional 14756 10192 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:25:42,987 DEBUG functional 14756 10192 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:25:42,987 DEBUG functional 14756 10192 
def xmap(task, it):
    return 1

2023-06-28 18:25:42,987 DEBUG functional 14756 10192 
def backend_cleanup():
    return 1

2023-06-28 18:25:42,988 DEBUG functional 14756 10192 
def db_update_task():
    return 1

2023-06-28 18:25:42,988 DEBUG functional 14756 10192 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:25:42,988 DEBUG functional 14756 10192 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:25:42,989 DEBUG functional 14756 10192 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:27:02,827 INFO autoreload 16300 1140 Watching for file changes with StatReloader
2023-06-28 18:27:21,824 DEBUG functional 7508 6748 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:27:21,824 DEBUG functional 7508 6748 
def chunks(task, it, n):
    return 1

2023-06-28 18:27:21,825 DEBUG functional 7508 6748 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:27:21,825 DEBUG functional 7508 6748 
def backend_cleanup():
    return 1

2023-06-28 18:27:21,826 DEBUG functional 7508 6748 
def debug_task(self):
    return 1

2023-06-28 18:27:21,826 DEBUG functional 7508 6748 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:27:21,826 DEBUG functional 7508 6748 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:27:21,827 DEBUG functional 7508 6748 
def xmap(task, it):
    return 1

2023-06-28 18:27:21,827 DEBUG functional 7508 6748 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:27:21,827 DEBUG functional 7508 6748 
def db_update_task():
    return 1

2023-06-28 18:27:21,828 DEBUG functional 7508 6748 
def xstarmap(task, it):
    return 1

2023-06-28 18:27:21,828 DEBUG functional 7508 6748 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:27:21,828 DEBUG functional 7508 6748 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:27:33,521 DEBUG functional 16300 20044 
def xstarmap(task, it):
    return 1

2023-06-28 18:27:33,523 DEBUG functional 16300 20044 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:27:33,524 DEBUG functional 16300 20044 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:27:33,524 DEBUG functional 16300 20044 
def chunks(task, it, n):
    return 1

2023-06-28 18:27:33,524 DEBUG functional 16300 20044 
def debug_task(self):
    return 1

2023-06-28 18:27:33,525 DEBUG functional 16300 20044 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:27:33,525 DEBUG functional 16300 20044 
def db_update_task():
    return 1

2023-06-28 18:27:33,525 DEBUG functional 16300 20044 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:27:33,526 DEBUG functional 16300 20044 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:27:33,526 DEBUG functional 16300 20044 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:27:33,526 DEBUG functional 16300 20044 
def xmap(task, it):
    return 1

2023-06-28 18:27:33,527 DEBUG functional 16300 20044 
def backend_cleanup():
    return 1

2023-06-28 18:27:33,527 DEBUG functional 16300 20044 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:37:25,411 DEBUG functional 19240 20032 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:37:25,412 DEBUG functional 19240 20032 
def chunks(task, it, n):
    return 1

2023-06-28 18:37:25,412 DEBUG functional 19240 20032 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:37:25,412 DEBUG functional 19240 20032 
def backend_cleanup():
    return 1

2023-06-28 18:37:25,413 DEBUG functional 19240 20032 
def debug_task(self):
    return 1

2023-06-28 18:37:25,413 DEBUG functional 19240 20032 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:37:25,414 DEBUG functional 19240 20032 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:37:25,414 DEBUG functional 19240 20032 
def xmap(task, it):
    return 1

2023-06-28 18:37:25,414 DEBUG functional 19240 20032 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:37:25,415 DEBUG functional 19240 20032 
def db_update_task():
    return 1

2023-06-28 18:37:25,415 DEBUG functional 19240 20032 
def xstarmap(task, it):
    return 1

2023-06-28 18:37:25,415 DEBUG functional 19240 20032 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:37:25,416 DEBUG functional 19240 20032 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:39:20,440 DEBUG functional 19352 16500 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:39:20,440 DEBUG functional 19352 16500 
def chunks(task, it, n):
    return 1

2023-06-28 18:39:20,441 DEBUG functional 19352 16500 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:39:20,441 DEBUG functional 19352 16500 
def backend_cleanup():
    return 1

2023-06-28 18:39:20,442 DEBUG functional 19352 16500 
def debug_task(self):
    return 1

2023-06-28 18:39:20,442 DEBUG functional 19352 16500 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:39:20,442 DEBUG functional 19352 16500 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:39:20,443 DEBUG functional 19352 16500 
def xmap(task, it):
    return 1

2023-06-28 18:39:20,443 DEBUG functional 19352 16500 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:39:20,443 DEBUG functional 19352 16500 
def db_update_task():
    return 1

2023-06-28 18:39:20,444 DEBUG functional 19352 16500 
def xstarmap(task, it):
    return 1

2023-06-28 18:39:20,444 DEBUG functional 19352 16500 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:39:20,444 DEBUG functional 19352 16500 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:43:04,965 INFO autoreload 5148 19652 Watching for file changes with StatReloader
2023-06-28 18:43:34,171 DEBUG functional 20528 9792 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:43:34,172 DEBUG functional 20528 9792 
def chunks(task, it, n):
    return 1

2023-06-28 18:43:34,172 DEBUG functional 20528 9792 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:43:34,172 DEBUG functional 20528 9792 
def backend_cleanup():
    return 1

2023-06-28 18:43:34,173 DEBUG functional 20528 9792 
def debug_task(self):
    return 1

2023-06-28 18:43:34,173 DEBUG functional 20528 9792 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:43:34,174 DEBUG functional 20528 9792 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:43:34,174 DEBUG functional 20528 9792 
def xmap(task, it):
    return 1

2023-06-28 18:43:34,174 DEBUG functional 20528 9792 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:43:34,175 DEBUG functional 20528 9792 
def db_update_task():
    return 1

2023-06-28 18:43:34,175 DEBUG functional 20528 9792 
def xstarmap(task, it):
    return 1

2023-06-28 18:43:34,175 DEBUG functional 20528 9792 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:43:34,176 DEBUG functional 20528 9792 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:43:47,715 DEBUG functional 5148 1928 
def xstarmap(task, it):
    return 1

2023-06-28 18:43:47,717 DEBUG functional 5148 1928 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:43:47,718 DEBUG functional 5148 1928 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:43:47,718 DEBUG functional 5148 1928 
def chunks(task, it, n):
    return 1

2023-06-28 18:43:47,718 DEBUG functional 5148 1928 
def debug_task(self):
    return 1

2023-06-28 18:43:47,719 DEBUG functional 5148 1928 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:43:47,719 DEBUG functional 5148 1928 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:43:47,720 DEBUG functional 5148 1928 
def xmap(task, it):
    return 1

2023-06-28 18:43:47,720 DEBUG functional 5148 1928 
def backend_cleanup():
    return 1

2023-06-28 18:43:47,720 DEBUG functional 5148 1928 
def db_update_task():
    return 1

2023-06-28 18:43:47,721 DEBUG functional 5148 1928 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:43:47,721 DEBUG functional 5148 1928 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:43:47,721 DEBUG functional 5148 1928 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:46:51,728 INFO autoreload 4180 9420 Watching for file changes with StatReloader
2023-06-28 18:47:35,238 DEBUG functional 15552 10380 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:47:35,239 DEBUG functional 15552 10380 
def chunks(task, it, n):
    return 1

2023-06-28 18:47:35,239 DEBUG functional 15552 10380 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:47:35,240 DEBUG functional 15552 10380 
def backend_cleanup():
    return 1

2023-06-28 18:47:35,240 DEBUG functional 15552 10380 
def debug_task(self):
    return 1

2023-06-28 18:47:35,240 DEBUG functional 15552 10380 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:47:35,241 DEBUG functional 15552 10380 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:47:35,241 DEBUG functional 15552 10380 
def xmap(task, it):
    return 1

2023-06-28 18:47:35,241 DEBUG functional 15552 10380 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:47:35,242 DEBUG functional 15552 10380 
def db_update_task():
    return 1

2023-06-28 18:47:35,242 DEBUG functional 15552 10380 
def xstarmap(task, it):
    return 1

2023-06-28 18:47:35,242 DEBUG functional 15552 10380 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:47:35,243 DEBUG functional 15552 10380 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:47:43,319 DEBUG functional 4180 10908 
def xstarmap(task, it):
    return 1

2023-06-28 18:47:43,321 DEBUG functional 4180 10908 
def db_update_task():
    return 1

2023-06-28 18:47:43,321 DEBUG functional 4180 10908 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:47:43,322 DEBUG functional 4180 10908 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:47:43,322 DEBUG functional 4180 10908 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:47:43,322 DEBUG functional 4180 10908 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:47:43,323 DEBUG functional 4180 10908 
def chunks(task, it, n):
    return 1

2023-06-28 18:47:43,323 DEBUG functional 4180 10908 
def debug_task(self):
    return 1

2023-06-28 18:47:43,324 DEBUG functional 4180 10908 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:47:43,324 DEBUG functional 4180 10908 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:47:43,324 DEBUG functional 4180 10908 
def xmap(task, it):
    return 1

2023-06-28 18:47:43,325 DEBUG functional 4180 10908 
def backend_cleanup():
    return 1

2023-06-28 18:47:43,325 DEBUG functional 4180 10908 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:47:57,964 DEBUG core 4180 1172 Successfully imported extension module "markdown.extensions.toc".
2023-06-28 18:47:57,965 DEBUG core 4180 1172 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-28 18:47:58,753 DEBUG core 4180 19752 Successfully imported extension module "markdown.extensions.toc".
2023-06-28 18:47:58,753 DEBUG core 4180 19752 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-28 18:51:32,413 INFO autoreload 4180 9420 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-28 18:53:13,060 INFO autoreload 9388 15972 Watching for file changes with StatReloader
2023-06-28 18:54:45,620 DEBUG functional 16636 11872 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:54:45,621 DEBUG functional 16636 11872 
def chunks(task, it, n):
    return 1

2023-06-28 18:54:45,621 DEBUG functional 16636 11872 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:54:45,622 DEBUG functional 16636 11872 
def backend_cleanup():
    return 1

2023-06-28 18:54:45,622 DEBUG functional 16636 11872 
def debug_task(self):
    return 1

2023-06-28 18:54:45,622 DEBUG functional 16636 11872 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:54:45,623 DEBUG functional 16636 11872 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:54:45,623 DEBUG functional 16636 11872 
def xmap(task, it):
    return 1

2023-06-28 18:54:45,623 DEBUG functional 16636 11872 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:54:45,624 DEBUG functional 16636 11872 
def db_update_task():
    return 1

2023-06-28 18:54:45,624 DEBUG functional 16636 11872 
def xstarmap(task, it):
    return 1

2023-06-28 18:54:45,624 DEBUG functional 16636 11872 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:54:45,625 DEBUG functional 16636 11872 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:54:54,571 DEBUG functional 9388 14316 
def xstarmap(task, it):
    return 1

2023-06-28 18:54:54,572 DEBUG functional 9388 14316 
def db_update_task():
    return 1

2023-06-28 18:54:54,573 DEBUG functional 9388 14316 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:54:54,573 DEBUG functional 9388 14316 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:54:54,574 DEBUG functional 9388 14316 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:54:54,574 DEBUG functional 9388 14316 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:54:54,574 DEBUG functional 9388 14316 
def chunks(task, it, n):
    return 1

2023-06-28 18:54:54,575 DEBUG functional 9388 14316 
def debug_task(self):
    return 1

2023-06-28 18:54:54,575 DEBUG functional 9388 14316 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:54:54,575 DEBUG functional 9388 14316 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:54:54,576 DEBUG functional 9388 14316 
def xmap(task, it):
    return 1

2023-06-28 18:54:54,576 DEBUG functional 9388 14316 
def backend_cleanup():
    return 1

2023-06-28 18:54:54,576 DEBUG functional 9388 14316 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:58:49,117 INFO autoreload 9388 15972 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-28 18:58:50,801 INFO autoreload 8676 20380 Watching for file changes with StatReloader
2023-06-28 18:58:52,982 INFO autoreload 8676 20380 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-28 18:58:59,603 INFO autoreload 20636 15324 Watching for file changes with StatReloader
2023-06-28 18:59:26,070 DEBUG functional 17832 14908 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:59:26,070 DEBUG functional 17832 14908 
def chunks(task, it, n):
    return 1

2023-06-28 18:59:26,071 DEBUG functional 17832 14908 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:59:26,071 DEBUG functional 17832 14908 
def backend_cleanup():
    return 1

2023-06-28 18:59:26,071 DEBUG functional 17832 14908 
def debug_task(self):
    return 1

2023-06-28 18:59:26,072 DEBUG functional 17832 14908 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:59:26,072 DEBUG functional 17832 14908 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:59:26,073 DEBUG functional 17832 14908 
def xmap(task, it):
    return 1

2023-06-28 18:59:26,073 DEBUG functional 17832 14908 
def chain(*args, **kwargs):
    return 1

2023-06-28 18:59:26,073 DEBUG functional 17832 14908 
def db_update_task():
    return 1

2023-06-28 18:59:26,074 DEBUG functional 17832 14908 
def xstarmap(task, it):
    return 1

2023-06-28 18:59:26,074 DEBUG functional 17832 14908 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:59:26,074 DEBUG functional 17832 14908 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:59:42,760 DEBUG functional 20636 4248 
def xstarmap(task, it):
    return 1

2023-06-28 18:59:42,761 DEBUG functional 20636 4248 
def db_update_task():
    return 1

2023-06-28 18:59:42,762 DEBUG functional 20636 4248 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 18:59:42,762 DEBUG functional 20636 4248 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 18:59:42,762 DEBUG functional 20636 4248 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 18:59:42,763 DEBUG functional 20636 4248 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 18:59:42,763 DEBUG functional 20636 4248 
def chunks(task, it, n):
    return 1

2023-06-28 18:59:42,763 DEBUG functional 20636 4248 
def debug_task(self):
    return 1

2023-06-28 18:59:42,764 DEBUG functional 20636 4248 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 18:59:42,764 DEBUG functional 20636 4248 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 18:59:42,765 DEBUG functional 20636 4248 
def xmap(task, it):
    return 1

2023-06-28 18:59:42,765 DEBUG functional 20636 4248 
def backend_cleanup():
    return 1

2023-06-28 18:59:42,765 DEBUG functional 20636 4248 
def chain(*args, **kwargs):
    return 1

2023-06-28 21:03:22,107 INFO autoreload 17292 21064 Watching for file changes with StatReloader
2023-06-28 21:03:54,487 DEBUG functional 18884 14648 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 21:03:54,487 DEBUG functional 18884 14648 
def chunks(task, it, n):
    return 1

2023-06-28 21:03:54,488 DEBUG functional 18884 14648 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 21:03:54,488 DEBUG functional 18884 14648 
def backend_cleanup():
    return 1

2023-06-28 21:03:54,488 DEBUG functional 18884 14648 
def debug_task(self):
    return 1

2023-06-28 21:03:54,489 DEBUG functional 18884 14648 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 21:03:54,489 DEBUG functional 18884 14648 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 21:03:54,490 DEBUG functional 18884 14648 
def xmap(task, it):
    return 1

2023-06-28 21:03:54,490 DEBUG functional 18884 14648 
def chain(*args, **kwargs):
    return 1

2023-06-28 21:03:54,490 DEBUG functional 18884 14648 
def db_update_task():
    return 1

2023-06-28 21:03:54,491 DEBUG functional 18884 14648 
def xstarmap(task, it):
    return 1

2023-06-28 21:03:54,491 DEBUG functional 18884 14648 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 21:03:54,491 DEBUG functional 18884 14648 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 21:04:04,735 DEBUG functional 17292 10016 
def xstarmap(task, it):
    return 1

2023-06-28 21:04:04,737 DEBUG functional 17292 10016 
def db_update_task():
    return 1

2023-06-28 21:04:04,737 DEBUG functional 17292 10016 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 21:04:04,738 DEBUG functional 17292 10016 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 21:04:04,738 DEBUG functional 17292 10016 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 21:04:04,739 DEBUG functional 17292 10016 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 21:04:04,739 DEBUG functional 17292 10016 
def chunks(task, it, n):
    return 1

2023-06-28 21:04:04,739 DEBUG functional 17292 10016 
def debug_task(self):
    return 1

2023-06-28 21:04:04,740 DEBUG functional 17292 10016 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 21:04:04,740 DEBUG functional 17292 10016 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 21:04:04,740 DEBUG functional 17292 10016 
def xmap(task, it):
    return 1

2023-06-28 21:04:04,741 DEBUG functional 17292 10016 
def backend_cleanup():
    return 1

2023-06-28 21:04:04,741 DEBUG functional 17292 10016 
def chain(*args, **kwargs):
    return 1

2023-06-28 21:12:54,118 INFO autoreload 13784 2768 Watching for file changes with StatReloader
2023-06-28 21:13:23,512 DEBUG functional 20488 14712 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 21:13:23,512 DEBUG functional 20488 14712 
def chunks(task, it, n):
    return 1

2023-06-28 21:13:23,513 DEBUG functional 20488 14712 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 21:13:23,513 DEBUG functional 20488 14712 
def backend_cleanup():
    return 1

2023-06-28 21:13:23,513 DEBUG functional 20488 14712 
def debug_task(self):
    return 1

2023-06-28 21:13:23,514 DEBUG functional 20488 14712 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 21:13:23,514 DEBUG functional 20488 14712 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 21:13:23,514 DEBUG functional 20488 14712 
def xmap(task, it):
    return 1

2023-06-28 21:13:23,515 DEBUG functional 20488 14712 
def chain(*args, **kwargs):
    return 1

2023-06-28 21:13:23,515 DEBUG functional 20488 14712 
def db_update_task():
    return 1

2023-06-28 21:13:23,515 DEBUG functional 20488 14712 
def xstarmap(task, it):
    return 1

2023-06-28 21:13:23,516 DEBUG functional 20488 14712 
def close_position_task(*args, **kwds):
    return 1

2023-06-28 21:13:23,516 DEBUG functional 20488 14712 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 21:13:28,652 WARNING log 13784 16896 Bad Request: /api/login/
2023-06-28 21:13:36,828 DEBUG functional 13784 16896 
def xstarmap(task, it):
    return 1

2023-06-28 21:13:36,830 DEBUG functional 13784 16896 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-28 21:13:36,831 DEBUG functional 13784 16896 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-28 21:13:36,831 DEBUG functional 13784 16896 
def chunks(task, it, n):
    return 1

2023-06-28 21:13:36,831 DEBUG functional 13784 16896 
def debug_task(self):
    return 1

2023-06-28 21:13:36,832 DEBUG functional 13784 16896 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-28 21:13:36,832 DEBUG functional 13784 16896 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-28 21:13:36,833 DEBUG functional 13784 16896 
def xmap(task, it):
    return 1

2023-06-28 21:13:36,833 DEBUG functional 13784 16896 
def backend_cleanup():
    return 1

2023-06-28 21:13:36,833 DEBUG functional 13784 16896 
def db_update_task():
    return 1

2023-06-28 21:13:36,834 DEBUG functional 13784 16896 
def chain(*args, **kwargs):
    return 1

2023-06-28 21:13:36,834 DEBUG functional 13784 16896 
def place_order_task(*args, **kwds):
    return 1

2023-06-28 21:13:36,834 DEBUG functional 13784 16896 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:22:34,801 INFO autoreload 14912 10400 Watching for file changes with StatReloader
2023-06-29 13:23:16,824 DEBUG functional 15844 5056 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 13:23:16,825 DEBUG functional 15844 5056 
def db_update_task():
    return 1

2023-06-29 13:23:16,825 DEBUG functional 15844 5056 
def chunks(task, it, n):
    return 1

2023-06-29 13:23:16,826 DEBUG functional 15844 5056 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:23:16,826 DEBUG functional 15844 5056 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 13:23:16,826 DEBUG functional 15844 5056 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 13:23:16,827 DEBUG functional 15844 5056 
def backend_cleanup():
    return 1

2023-06-29 13:23:16,827 DEBUG functional 15844 5056 
def debug_task(self):
    return 1

2023-06-29 13:23:16,828 DEBUG functional 15844 5056 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 13:23:16,828 DEBUG functional 15844 5056 
def xmap(task, it):
    return 1

2023-06-29 13:23:16,828 DEBUG functional 15844 5056 
def chain(*args, **kwargs):
    return 1

2023-06-29 13:23:16,829 DEBUG functional 15844 5056 
def xstarmap(task, it):
    return 1

2023-06-29 13:23:16,829 DEBUG functional 15844 5056 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 13:23:26,958 DEBUG functional 14912 17072 
def xstarmap(task, it):
    return 1

2023-06-29 13:23:26,960 DEBUG functional 14912 17072 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 13:23:26,960 DEBUG functional 14912 17072 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 13:23:26,960 DEBUG functional 14912 17072 
def chunks(task, it, n):
    return 1

2023-06-29 13:23:26,961 DEBUG functional 14912 17072 
def debug_task(self):
    return 1

2023-06-29 13:23:26,961 DEBUG functional 14912 17072 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 13:23:26,962 DEBUG functional 14912 17072 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 13:23:26,962 DEBUG functional 14912 17072 
def db_update_task():
    return 1

2023-06-29 13:23:26,962 DEBUG functional 14912 17072 
def xmap(task, it):
    return 1

2023-06-29 13:23:26,963 DEBUG functional 14912 17072 
def backend_cleanup():
    return 1

2023-06-29 13:23:26,963 DEBUG functional 14912 17072 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 13:23:26,963 DEBUG functional 14912 17072 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:23:26,964 DEBUG functional 14912 17072 
def chain(*args, **kwargs):
    return 1

2023-06-29 13:24:59,853 INFO autoreload 3200 9816 Watching for file changes with StatReloader
2023-06-29 13:25:19,922 DEBUG functional 18428 17260 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 13:25:19,923 DEBUG functional 18428 17260 
def db_update_task():
    return 1

2023-06-29 13:25:19,923 DEBUG functional 18428 17260 
def chunks(task, it, n):
    return 1

2023-06-29 13:25:19,923 DEBUG functional 18428 17260 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:25:19,924 DEBUG functional 18428 17260 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 13:25:19,924 DEBUG functional 18428 17260 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 13:25:19,925 DEBUG functional 18428 17260 
def backend_cleanup():
    return 1

2023-06-29 13:25:19,925 DEBUG functional 18428 17260 
def debug_task(self):
    return 1

2023-06-29 13:25:19,925 DEBUG functional 18428 17260 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 13:25:19,926 DEBUG functional 18428 17260 
def xmap(task, it):
    return 1

2023-06-29 13:25:19,926 DEBUG functional 18428 17260 
def chain(*args, **kwargs):
    return 1

2023-06-29 13:25:19,926 DEBUG functional 18428 17260 
def xstarmap(task, it):
    return 1

2023-06-29 13:25:19,927 DEBUG functional 18428 17260 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 13:25:33,316 DEBUG functional 3200 13424 
def xstarmap(task, it):
    return 1

2023-06-29 13:25:33,318 DEBUG functional 3200 13424 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 13:25:33,319 DEBUG functional 3200 13424 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 13:25:33,319 DEBUG functional 3200 13424 
def chunks(task, it, n):
    return 1

2023-06-29 13:25:33,319 DEBUG functional 3200 13424 
def debug_task(self):
    return 1

2023-06-29 13:25:33,320 DEBUG functional 3200 13424 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 13:25:33,320 DEBUG functional 3200 13424 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 13:25:33,320 DEBUG functional 3200 13424 
def db_update_task():
    return 1

2023-06-29 13:25:33,321 DEBUG functional 3200 13424 
def xmap(task, it):
    return 1

2023-06-29 13:25:33,321 DEBUG functional 3200 13424 
def backend_cleanup():
    return 1

2023-06-29 13:25:33,321 DEBUG functional 3200 13424 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 13:25:33,322 DEBUG functional 3200 13424 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:25:33,322 DEBUG functional 3200 13424 
def chain(*args, **kwargs):
    return 1

2023-06-29 13:26:03,396 INFO autoreload 3200 9816 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 13:26:05,122 INFO autoreload 6032 17960 Watching for file changes with StatReloader
2023-06-29 13:26:24,163 DEBUG functional 7856 13300 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 13:26:24,164 DEBUG functional 7856 13300 
def db_update_task():
    return 1

2023-06-29 13:26:24,164 DEBUG functional 7856 13300 
def chunks(task, it, n):
    return 1

2023-06-29 13:26:24,164 DEBUG functional 7856 13300 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:26:24,165 DEBUG functional 7856 13300 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 13:26:24,165 DEBUG functional 7856 13300 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 13:26:24,166 DEBUG functional 7856 13300 
def backend_cleanup():
    return 1

2023-06-29 13:26:24,166 DEBUG functional 7856 13300 
def debug_task(self):
    return 1

2023-06-29 13:26:24,166 DEBUG functional 7856 13300 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 13:26:24,167 DEBUG functional 7856 13300 
def xmap(task, it):
    return 1

2023-06-29 13:26:24,167 DEBUG functional 7856 13300 
def chain(*args, **kwargs):
    return 1

2023-06-29 13:26:24,167 DEBUG functional 7856 13300 
def xstarmap(task, it):
    return 1

2023-06-29 13:26:24,168 DEBUG functional 7856 13300 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 13:26:30,600 DEBUG functional 6032 20852 
def xstarmap(task, it):
    return 1

2023-06-29 13:26:30,602 DEBUG functional 6032 20852 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 13:26:30,602 DEBUG functional 6032 20852 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 13:26:30,603 DEBUG functional 6032 20852 
def chunks(task, it, n):
    return 1

2023-06-29 13:26:30,603 DEBUG functional 6032 20852 
def debug_task(self):
    return 1

2023-06-29 13:26:30,604 DEBUG functional 6032 20852 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 13:26:30,604 DEBUG functional 6032 20852 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 13:26:30,604 DEBUG functional 6032 20852 
def db_update_task():
    return 1

2023-06-29 13:26:30,605 DEBUG functional 6032 20852 
def xmap(task, it):
    return 1

2023-06-29 13:26:30,605 DEBUG functional 6032 20852 
def backend_cleanup():
    return 1

2023-06-29 13:26:30,605 DEBUG functional 6032 20852 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 13:26:30,606 DEBUG functional 6032 20852 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:26:30,606 DEBUG functional 6032 20852 
def chain(*args, **kwargs):
    return 1

2023-06-29 13:27:39,236 INFO autoreload 6032 17960 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 13:27:40,939 INFO autoreload 9652 1576 Watching for file changes with StatReloader
2023-06-29 13:28:14,291 DEBUG functional 18128 16468 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 13:28:14,291 DEBUG functional 18128 16468 
def db_update_task():
    return 1

2023-06-29 13:28:14,292 DEBUG functional 18128 16468 
def chunks(task, it, n):
    return 1

2023-06-29 13:28:14,292 DEBUG functional 18128 16468 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:28:14,292 DEBUG functional 18128 16468 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 13:28:14,293 DEBUG functional 18128 16468 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 13:28:14,294 DEBUG functional 18128 16468 
def backend_cleanup():
    return 1

2023-06-29 13:28:14,294 DEBUG functional 18128 16468 
def debug_task(self):
    return 1

2023-06-29 13:28:14,294 DEBUG functional 18128 16468 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 13:28:14,295 DEBUG functional 18128 16468 
def xmap(task, it):
    return 1

2023-06-29 13:28:14,295 DEBUG functional 18128 16468 
def chain(*args, **kwargs):
    return 1

2023-06-29 13:28:14,295 DEBUG functional 18128 16468 
def xstarmap(task, it):
    return 1

2023-06-29 13:28:14,296 DEBUG functional 18128 16468 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 13:28:25,145 DEBUG functional 9652 16064 
def xstarmap(task, it):
    return 1

2023-06-29 13:28:25,147 DEBUG functional 9652 16064 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 13:28:25,147 DEBUG functional 9652 16064 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 13:28:25,148 DEBUG functional 9652 16064 
def chunks(task, it, n):
    return 1

2023-06-29 13:28:25,148 DEBUG functional 9652 16064 
def debug_task(self):
    return 1

2023-06-29 13:28:25,148 DEBUG functional 9652 16064 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 13:28:25,149 DEBUG functional 9652 16064 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 13:28:25,149 DEBUG functional 9652 16064 
def db_update_task():
    return 1

2023-06-29 13:28:25,150 DEBUG functional 9652 16064 
def xmap(task, it):
    return 1

2023-06-29 13:28:25,150 DEBUG functional 9652 16064 
def backend_cleanup():
    return 1

2023-06-29 13:28:25,150 DEBUG functional 9652 16064 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 13:28:25,151 DEBUG functional 9652 16064 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:28:25,151 DEBUG functional 9652 16064 
def chain(*args, **kwargs):
    return 1

2023-06-29 13:29:07,717 INFO autoreload 9652 1576 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 13:29:09,330 INFO autoreload 11204 3684 Watching for file changes with StatReloader
2023-06-29 13:29:11,923 DEBUG functional 12624 19200 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 13:29:11,923 DEBUG functional 12624 19200 
def db_update_task():
    return 1

2023-06-29 13:29:11,923 DEBUG functional 12624 19200 
def chunks(task, it, n):
    return 1

2023-06-29 13:29:11,924 DEBUG functional 12624 19200 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:29:11,924 DEBUG functional 12624 19200 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 13:29:11,925 DEBUG functional 12624 19200 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 13:29:11,925 DEBUG functional 12624 19200 
def backend_cleanup():
    return 1

2023-06-29 13:29:11,926 DEBUG functional 12624 19200 
def debug_task(self):
    return 1

2023-06-29 13:29:11,926 DEBUG functional 12624 19200 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 13:29:11,926 DEBUG functional 12624 19200 
def xmap(task, it):
    return 1

2023-06-29 13:29:11,927 DEBUG functional 12624 19200 
def chain(*args, **kwargs):
    return 1

2023-06-29 13:29:11,927 DEBUG functional 12624 19200 
def xstarmap(task, it):
    return 1

2023-06-29 13:29:11,927 DEBUG functional 12624 19200 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 13:29:17,258 DEBUG functional 11204 4432 
def xstarmap(task, it):
    return 1

2023-06-29 13:29:17,260 DEBUG functional 11204 4432 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 13:29:17,260 DEBUG functional 11204 4432 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 13:29:17,261 DEBUG functional 11204 4432 
def chunks(task, it, n):
    return 1

2023-06-29 13:29:17,261 DEBUG functional 11204 4432 
def debug_task(self):
    return 1

2023-06-29 13:29:17,261 DEBUG functional 11204 4432 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 13:29:17,262 DEBUG functional 11204 4432 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 13:29:17,262 DEBUG functional 11204 4432 
def db_update_task():
    return 1

2023-06-29 13:29:17,263 DEBUG functional 11204 4432 
def xmap(task, it):
    return 1

2023-06-29 13:29:17,263 DEBUG functional 11204 4432 
def backend_cleanup():
    return 1

2023-06-29 13:29:17,263 DEBUG functional 11204 4432 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 13:29:17,263 DEBUG functional 11204 4432 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:29:17,264 DEBUG functional 11204 4432 
def chain(*args, **kwargs):
    return 1

2023-06-29 13:36:07,660 DEBUG functional 4868 20040 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 13:36:07,660 DEBUG functional 4868 20040 
def db_update_task():
    return 1

2023-06-29 13:36:07,661 DEBUG functional 4868 20040 
def chunks(task, it, n):
    return 1

2023-06-29 13:36:07,661 DEBUG functional 4868 20040 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:36:07,661 DEBUG functional 4868 20040 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 13:36:07,662 DEBUG functional 4868 20040 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 13:36:07,662 DEBUG functional 4868 20040 
def backend_cleanup():
    return 1

2023-06-29 13:36:07,663 DEBUG functional 4868 20040 
def debug_task(self):
    return 1

2023-06-29 13:36:07,663 DEBUG functional 4868 20040 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 13:36:07,663 DEBUG functional 4868 20040 
def xmap(task, it):
    return 1

2023-06-29 13:36:07,664 DEBUG functional 4868 20040 
def chain(*args, **kwargs):
    return 1

2023-06-29 13:36:07,664 DEBUG functional 4868 20040 
def xstarmap(task, it):
    return 1

2023-06-29 13:36:07,664 DEBUG functional 4868 20040 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 13:36:34,904 INFO autoreload 11204 3684 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 13:36:36,617 INFO autoreload 11140 14436 Watching for file changes with StatReloader
2023-06-29 13:36:40,293 DEBUG functional 20208 1016 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 13:36:40,293 DEBUG functional 20208 1016 
def db_update_task():
    return 1

2023-06-29 13:36:40,293 DEBUG functional 20208 1016 
def chunks(task, it, n):
    return 1

2023-06-29 13:36:40,294 DEBUG functional 20208 1016 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:36:40,294 DEBUG functional 20208 1016 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 13:36:40,295 DEBUG functional 20208 1016 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 13:36:40,295 DEBUG functional 20208 1016 
def backend_cleanup():
    return 1

2023-06-29 13:36:40,295 DEBUG functional 20208 1016 
def debug_task(self):
    return 1

2023-06-29 13:36:40,296 DEBUG functional 20208 1016 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 13:36:40,296 DEBUG functional 20208 1016 
def xmap(task, it):
    return 1

2023-06-29 13:36:40,297 DEBUG functional 20208 1016 
def chain(*args, **kwargs):
    return 1

2023-06-29 13:36:40,297 DEBUG functional 20208 1016 
def xstarmap(task, it):
    return 1

2023-06-29 13:36:40,297 DEBUG functional 20208 1016 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 13:36:45,551 DEBUG functional 11140 3692 
def xstarmap(task, it):
    return 1

2023-06-29 13:36:45,553 DEBUG functional 11140 3692 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 13:36:45,553 DEBUG functional 11140 3692 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 13:36:45,553 DEBUG functional 11140 3692 
def chunks(task, it, n):
    return 1

2023-06-29 13:36:45,554 DEBUG functional 11140 3692 
def debug_task(self):
    return 1

2023-06-29 13:36:45,554 DEBUG functional 11140 3692 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 13:36:45,555 DEBUG functional 11140 3692 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 13:36:45,555 DEBUG functional 11140 3692 
def db_update_task():
    return 1

2023-06-29 13:36:45,555 DEBUG functional 11140 3692 
def xmap(task, it):
    return 1

2023-06-29 13:36:45,556 DEBUG functional 11140 3692 
def backend_cleanup():
    return 1

2023-06-29 13:36:45,556 DEBUG functional 11140 3692 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 13:36:45,556 DEBUG functional 11140 3692 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:36:45,557 DEBUG functional 11140 3692 
def chain(*args, **kwargs):
    return 1

2023-06-29 13:48:52,166 DEBUG functional 16072 16668 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 13:48:52,166 DEBUG functional 16072 16668 
def db_update_task():
    return 1

2023-06-29 13:48:52,167 DEBUG functional 16072 16668 
def chunks(task, it, n):
    return 1

2023-06-29 13:48:52,167 DEBUG functional 16072 16668 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:48:52,167 DEBUG functional 16072 16668 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 13:48:52,168 DEBUG functional 16072 16668 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 13:48:52,169 DEBUG functional 16072 16668 
def backend_cleanup():
    return 1

2023-06-29 13:48:52,169 DEBUG functional 16072 16668 
def debug_task(self):
    return 1

2023-06-29 13:48:52,169 DEBUG functional 16072 16668 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 13:48:52,170 DEBUG functional 16072 16668 
def xmap(task, it):
    return 1

2023-06-29 13:48:52,171 DEBUG functional 16072 16668 
def chain(*args, **kwargs):
    return 1

2023-06-29 13:48:52,171 DEBUG functional 16072 16668 
def xstarmap(task, it):
    return 1

2023-06-29 13:48:52,171 DEBUG functional 16072 16668 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 13:54:20,057 INFO autoreload 11140 14436 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 13:54:21,716 INFO autoreload 20308 9652 Watching for file changes with StatReloader
2023-06-29 13:56:02,928 INFO autoreload 20308 9652 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 13:56:04,472 INFO autoreload 8964 21028 Watching for file changes with StatReloader
2023-06-29 13:56:24,933 INFO autoreload 8964 21028 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 13:56:26,522 INFO autoreload 16440 18300 Watching for file changes with StatReloader
2023-06-29 13:56:31,848 DEBUG functional 4660 10044 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 13:56:31,849 DEBUG functional 4660 10044 
def db_update_task():
    return 1

2023-06-29 13:56:31,849 DEBUG functional 4660 10044 
def chunks(task, it, n):
    return 1

2023-06-29 13:56:31,849 DEBUG functional 4660 10044 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:56:31,850 DEBUG functional 4660 10044 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 13:56:31,850 DEBUG functional 4660 10044 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 13:56:31,851 DEBUG functional 4660 10044 
def backend_cleanup():
    return 1

2023-06-29 13:56:31,851 DEBUG functional 4660 10044 
def debug_task(self):
    return 1

2023-06-29 13:56:31,852 DEBUG functional 4660 10044 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 13:56:31,852 DEBUG functional 4660 10044 
def xmap(task, it):
    return 1

2023-06-29 13:56:31,852 DEBUG functional 4660 10044 
def chain(*args, **kwargs):
    return 1

2023-06-29 13:56:31,852 DEBUG functional 4660 10044 
def xstarmap(task, it):
    return 1

2023-06-29 13:56:31,853 DEBUG functional 4660 10044 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 13:56:40,834 DEBUG functional 16440 8148 
def xstarmap(task, it):
    return 1

2023-06-29 13:56:40,836 DEBUG functional 16440 8148 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 13:56:40,836 DEBUG functional 16440 8148 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 13:56:40,837 DEBUG functional 16440 8148 
def chunks(task, it, n):
    return 1

2023-06-29 13:56:40,837 DEBUG functional 16440 8148 
def debug_task(self):
    return 1

2023-06-29 13:56:40,837 DEBUG functional 16440 8148 
def db_update_task():
    return 1

2023-06-29 13:56:40,838 DEBUG functional 16440 8148 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 13:56:40,838 DEBUG functional 16440 8148 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 13:56:40,838 DEBUG functional 16440 8148 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:56:40,839 DEBUG functional 16440 8148 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 13:56:40,839 DEBUG functional 16440 8148 
def xmap(task, it):
    return 1

2023-06-29 13:56:40,839 DEBUG functional 16440 8148 
def backend_cleanup():
    return 1

2023-06-29 13:56:40,840 DEBUG functional 16440 8148 
def chain(*args, **kwargs):
    return 1

2023-06-29 13:58:06,025 INFO autoreload 16440 18300 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 13:58:07,601 INFO autoreload 13488 8656 Watching for file changes with StatReloader
2023-06-29 13:58:17,754 DEBUG functional 15664 8244 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 13:58:17,755 DEBUG functional 15664 8244 
def db_update_task():
    return 1

2023-06-29 13:58:17,755 DEBUG functional 15664 8244 
def chunks(task, it, n):
    return 1

2023-06-29 13:58:17,755 DEBUG functional 15664 8244 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:58:17,756 DEBUG functional 15664 8244 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 13:58:17,756 DEBUG functional 15664 8244 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 13:58:17,757 DEBUG functional 15664 8244 
def backend_cleanup():
    return 1

2023-06-29 13:58:17,757 DEBUG functional 15664 8244 
def debug_task(self):
    return 1

2023-06-29 13:58:17,757 DEBUG functional 15664 8244 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 13:58:17,758 DEBUG functional 15664 8244 
def xmap(task, it):
    return 1

2023-06-29 13:58:17,758 DEBUG functional 15664 8244 
def chain(*args, **kwargs):
    return 1

2023-06-29 13:58:17,758 DEBUG functional 15664 8244 
def xstarmap(task, it):
    return 1

2023-06-29 13:58:17,759 DEBUG functional 15664 8244 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 13:58:24,687 DEBUG functional 13488 11888 
def xstarmap(task, it):
    return 1

2023-06-29 13:58:24,688 DEBUG functional 13488 11888 
def db_update_task():
    return 1

2023-06-29 13:58:24,689 DEBUG functional 13488 11888 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 13:58:24,689 DEBUG functional 13488 11888 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 13:58:24,690 DEBUG functional 13488 11888 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 13:58:24,690 DEBUG functional 13488 11888 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:58:24,690 DEBUG functional 13488 11888 
def chunks(task, it, n):
    return 1

2023-06-29 13:58:24,691 DEBUG functional 13488 11888 
def debug_task(self):
    return 1

2023-06-29 13:58:24,691 DEBUG functional 13488 11888 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 13:58:24,691 DEBUG functional 13488 11888 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 13:58:24,692 DEBUG functional 13488 11888 
def xmap(task, it):
    return 1

2023-06-29 13:58:24,692 DEBUG functional 13488 11888 
def backend_cleanup():
    return 1

2023-06-29 13:58:24,692 DEBUG functional 13488 11888 
def chain(*args, **kwargs):
    return 1

2023-06-29 13:58:50,043 INFO autoreload 13488 8656 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 13:58:51,763 INFO autoreload 15156 11928 Watching for file changes with StatReloader
2023-06-29 13:58:54,887 DEBUG functional 844 17836 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 13:58:54,888 DEBUG functional 844 17836 
def db_update_task():
    return 1

2023-06-29 13:58:54,888 DEBUG functional 844 17836 
def chunks(task, it, n):
    return 1

2023-06-29 13:58:54,888 DEBUG functional 844 17836 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:58:54,889 DEBUG functional 844 17836 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 13:58:54,889 DEBUG functional 844 17836 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 13:58:54,890 DEBUG functional 844 17836 
def backend_cleanup():
    return 1

2023-06-29 13:58:54,890 DEBUG functional 844 17836 
def debug_task(self):
    return 1

2023-06-29 13:58:54,890 DEBUG functional 844 17836 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 13:58:54,891 DEBUG functional 844 17836 
def xmap(task, it):
    return 1

2023-06-29 13:58:54,891 DEBUG functional 844 17836 
def chain(*args, **kwargs):
    return 1

2023-06-29 13:58:54,891 DEBUG functional 844 17836 
def xstarmap(task, it):
    return 1

2023-06-29 13:58:54,892 DEBUG functional 844 17836 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 13:59:01,954 DEBUG functional 15156 8188 
def xstarmap(task, it):
    return 1

2023-06-29 13:59:01,956 DEBUG functional 15156 8188 
def db_update_task():
    return 1

2023-06-29 13:59:01,956 DEBUG functional 15156 8188 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 13:59:01,957 DEBUG functional 15156 8188 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 13:59:01,957 DEBUG functional 15156 8188 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 13:59:01,957 DEBUG functional 15156 8188 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:59:01,958 DEBUG functional 15156 8188 
def chunks(task, it, n):
    return 1

2023-06-29 13:59:01,958 DEBUG functional 15156 8188 
def debug_task(self):
    return 1

2023-06-29 13:59:01,959 DEBUG functional 15156 8188 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 13:59:01,959 DEBUG functional 15156 8188 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 13:59:01,959 DEBUG functional 15156 8188 
def xmap(task, it):
    return 1

2023-06-29 13:59:01,960 DEBUG functional 15156 8188 
def backend_cleanup():
    return 1

2023-06-29 13:59:01,960 DEBUG functional 15156 8188 
def chain(*args, **kwargs):
    return 1

2023-06-29 13:59:48,164 INFO autoreload 15156 11928 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 13:59:49,783 INFO autoreload 9776 14668 Watching for file changes with StatReloader
2023-06-29 13:59:57,700 DEBUG functional 9776 1788 
def xstarmap(task, it):
    return 1

2023-06-29 13:59:57,702 DEBUG functional 9776 1788 
def db_update_task():
    return 1

2023-06-29 13:59:57,702 DEBUG functional 9776 1788 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 13:59:57,703 DEBUG functional 9776 1788 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 13:59:57,703 DEBUG functional 9776 1788 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 13:59:57,703 DEBUG functional 9776 1788 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 13:59:57,704 DEBUG functional 9776 1788 
def chunks(task, it, n):
    return 1

2023-06-29 13:59:57,704 DEBUG functional 9776 1788 
def debug_task(self):
    return 1

2023-06-29 13:59:57,704 DEBUG functional 9776 1788 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 13:59:57,705 DEBUG functional 9776 1788 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 13:59:57,705 DEBUG functional 9776 1788 
def xmap(task, it):
    return 1

2023-06-29 13:59:57,705 DEBUG functional 9776 1788 
def backend_cleanup():
    return 1

2023-06-29 13:59:57,706 DEBUG functional 9776 1788 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:00:11,697 INFO autoreload 9776 14668 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:00:13,301 INFO autoreload 7216 8804 Watching for file changes with StatReloader
2023-06-29 14:00:31,603 INFO autoreload 7216 8804 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:00:33,289 INFO autoreload 19872 19196 Watching for file changes with StatReloader
2023-06-29 14:00:42,240 DEBUG functional 19872 16776 
def xstarmap(task, it):
    return 1

2023-06-29 14:00:42,242 DEBUG functional 19872 16776 
def db_update_task():
    return 1

2023-06-29 14:00:42,242 DEBUG functional 19872 16776 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:00:42,242 DEBUG functional 19872 16776 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:00:42,243 DEBUG functional 19872 16776 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:00:42,243 DEBUG functional 19872 16776 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:00:42,244 DEBUG functional 19872 16776 
def chunks(task, it, n):
    return 1

2023-06-29 14:00:42,244 DEBUG functional 19872 16776 
def debug_task(self):
    return 1

2023-06-29 14:00:42,244 DEBUG functional 19872 16776 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:00:42,245 DEBUG functional 19872 16776 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:00:42,245 DEBUG functional 19872 16776 
def xmap(task, it):
    return 1

2023-06-29 14:00:42,246 DEBUG functional 19872 16776 
def backend_cleanup():
    return 1

2023-06-29 14:00:42,246 DEBUG functional 19872 16776 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:01:11,812 DEBUG functional 7736 8756 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:01:11,812 DEBUG functional 7736 8756 
def db_update_task():
    return 1

2023-06-29 14:01:11,812 DEBUG functional 7736 8756 
def chunks(task, it, n):
    return 1

2023-06-29 14:01:11,813 DEBUG functional 7736 8756 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:01:11,813 DEBUG functional 7736 8756 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:01:11,813 DEBUG functional 7736 8756 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:01:11,814 DEBUG functional 7736 8756 
def backend_cleanup():
    return 1

2023-06-29 14:01:11,814 DEBUG functional 7736 8756 
def debug_task(self):
    return 1

2023-06-29 14:01:11,815 DEBUG functional 7736 8756 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:01:11,815 DEBUG functional 7736 8756 
def xmap(task, it):
    return 1

2023-06-29 14:01:11,815 DEBUG functional 7736 8756 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:01:11,816 DEBUG functional 7736 8756 
def xstarmap(task, it):
    return 1

2023-06-29 14:01:11,816 DEBUG functional 7736 8756 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:01:39,467 INFO autoreload 19872 19196 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:01:41,127 INFO autoreload 17340 15952 Watching for file changes with StatReloader
2023-06-29 14:01:52,965 INFO autoreload 17340 15952 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:01:54,614 INFO autoreload 11864 15616 Watching for file changes with StatReloader
2023-06-29 14:01:57,492 DEBUG functional 2208 15016 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:01:57,493 DEBUG functional 2208 15016 
def db_update_task():
    return 1

2023-06-29 14:01:57,493 DEBUG functional 2208 15016 
def chunks(task, it, n):
    return 1

2023-06-29 14:01:57,494 DEBUG functional 2208 15016 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:01:57,494 DEBUG functional 2208 15016 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:01:57,495 DEBUG functional 2208 15016 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:01:57,495 DEBUG functional 2208 15016 
def backend_cleanup():
    return 1

2023-06-29 14:01:57,496 DEBUG functional 2208 15016 
def debug_task(self):
    return 1

2023-06-29 14:01:57,496 DEBUG functional 2208 15016 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:01:57,496 DEBUG functional 2208 15016 
def xmap(task, it):
    return 1

2023-06-29 14:01:57,497 DEBUG functional 2208 15016 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:01:57,497 DEBUG functional 2208 15016 
def xstarmap(task, it):
    return 1

2023-06-29 14:01:57,497 DEBUG functional 2208 15016 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:02:00,728 DEBUG functional 11864 8456 
def xstarmap(task, it):
    return 1

2023-06-29 14:02:00,730 DEBUG functional 11864 8456 
def db_update_task():
    return 1

2023-06-29 14:02:00,730 DEBUG functional 11864 8456 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:02:00,730 DEBUG functional 11864 8456 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:02:00,731 DEBUG functional 11864 8456 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:02:00,731 DEBUG functional 11864 8456 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:02:00,731 DEBUG functional 11864 8456 
def chunks(task, it, n):
    return 1

2023-06-29 14:02:00,732 DEBUG functional 11864 8456 
def debug_task(self):
    return 1

2023-06-29 14:02:00,732 DEBUG functional 11864 8456 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:02:00,732 DEBUG functional 11864 8456 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:02:00,733 DEBUG functional 11864 8456 
def xmap(task, it):
    return 1

2023-06-29 14:02:00,733 DEBUG functional 11864 8456 
def backend_cleanup():
    return 1

2023-06-29 14:02:00,733 DEBUG functional 11864 8456 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:02:36,073 INFO autoreload 11864 15616 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:02:37,701 INFO autoreload 14200 3572 Watching for file changes with StatReloader
2023-06-29 14:02:43,940 DEBUG functional 14200 3692 
def xstarmap(task, it):
    return 1

2023-06-29 14:02:43,942 DEBUG functional 14200 3692 
def db_update_task():
    return 1

2023-06-29 14:02:43,942 DEBUG functional 14200 3692 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:02:43,943 DEBUG functional 14200 3692 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:02:43,943 DEBUG functional 14200 3692 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:02:43,943 DEBUG functional 14200 3692 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:02:43,944 DEBUG functional 14200 3692 
def chunks(task, it, n):
    return 1

2023-06-29 14:02:43,944 DEBUG functional 14200 3692 
def debug_task(self):
    return 1

2023-06-29 14:02:43,945 DEBUG functional 14200 3692 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:02:43,945 DEBUG functional 14200 3692 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:02:43,945 DEBUG functional 14200 3692 
def xmap(task, it):
    return 1

2023-06-29 14:02:43,946 DEBUG functional 14200 3692 
def backend_cleanup():
    return 1

2023-06-29 14:02:43,946 DEBUG functional 14200 3692 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:02:54,765 DEBUG functional 19064 16996 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:02:54,766 DEBUG functional 19064 16996 
def db_update_task():
    return 1

2023-06-29 14:02:54,766 DEBUG functional 19064 16996 
def chunks(task, it, n):
    return 1

2023-06-29 14:02:54,766 DEBUG functional 19064 16996 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:02:54,767 DEBUG functional 19064 16996 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:02:54,767 DEBUG functional 19064 16996 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:02:54,768 DEBUG functional 19064 16996 
def backend_cleanup():
    return 1

2023-06-29 14:02:54,768 DEBUG functional 19064 16996 
def debug_task(self):
    return 1

2023-06-29 14:02:54,769 DEBUG functional 19064 16996 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:02:54,769 DEBUG functional 19064 16996 
def xmap(task, it):
    return 1

2023-06-29 14:02:54,769 DEBUG functional 19064 16996 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:02:54,770 DEBUG functional 19064 16996 
def xstarmap(task, it):
    return 1

2023-06-29 14:02:54,770 DEBUG functional 19064 16996 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:03:38,491 INFO autoreload 14200 3572 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:03:40,130 INFO autoreload 16304 5660 Watching for file changes with StatReloader
2023-06-29 14:03:44,826 DEBUG functional 2792 12680 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:03:44,827 DEBUG functional 2792 12680 
def db_update_task():
    return 1

2023-06-29 14:03:44,827 DEBUG functional 2792 12680 
def chunks(task, it, n):
    return 1

2023-06-29 14:03:44,827 DEBUG functional 2792 12680 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:03:44,827 DEBUG functional 2792 12680 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:03:44,828 DEBUG functional 2792 12680 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:03:44,829 DEBUG functional 2792 12680 
def backend_cleanup():
    return 1

2023-06-29 14:03:44,829 DEBUG functional 2792 12680 
def debug_task(self):
    return 1

2023-06-29 14:03:44,829 DEBUG functional 2792 12680 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:03:44,830 DEBUG functional 2792 12680 
def xmap(task, it):
    return 1

2023-06-29 14:03:44,830 DEBUG functional 2792 12680 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:03:44,830 DEBUG functional 2792 12680 
def xstarmap(task, it):
    return 1

2023-06-29 14:03:44,831 DEBUG functional 2792 12680 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:03:50,574 DEBUG functional 16304 9776 
def xstarmap(task, it):
    return 1

2023-06-29 14:03:50,576 DEBUG functional 16304 9776 
def db_update_task():
    return 1

2023-06-29 14:03:50,576 DEBUG functional 16304 9776 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:03:50,577 DEBUG functional 16304 9776 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:03:50,577 DEBUG functional 16304 9776 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:03:50,577 DEBUG functional 16304 9776 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:03:50,578 DEBUG functional 16304 9776 
def chunks(task, it, n):
    return 1

2023-06-29 14:03:50,578 DEBUG functional 16304 9776 
def debug_task(self):
    return 1

2023-06-29 14:03:50,578 DEBUG functional 16304 9776 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:03:50,579 DEBUG functional 16304 9776 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:03:50,579 DEBUG functional 16304 9776 
def xmap(task, it):
    return 1

2023-06-29 14:03:50,579 DEBUG functional 16304 9776 
def backend_cleanup():
    return 1

2023-06-29 14:03:50,580 DEBUG functional 16304 9776 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:04:01,056 INFO autoreload 16304 5660 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:04:02,656 INFO autoreload 4204 2076 Watching for file changes with StatReloader
2023-06-29 14:04:06,643 DEBUG functional 4940 20432 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:04:06,643 DEBUG functional 4940 20432 
def db_update_task():
    return 1

2023-06-29 14:04:06,643 DEBUG functional 4940 20432 
def chunks(task, it, n):
    return 1

2023-06-29 14:04:06,644 DEBUG functional 4940 20432 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:04:06,644 DEBUG functional 4940 20432 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:04:06,645 DEBUG functional 4940 20432 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:04:06,645 DEBUG functional 4940 20432 
def backend_cleanup():
    return 1

2023-06-29 14:04:06,646 DEBUG functional 4940 20432 
def debug_task(self):
    return 1

2023-06-29 14:04:06,646 DEBUG functional 4940 20432 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:04:06,646 DEBUG functional 4940 20432 
def xmap(task, it):
    return 1

2023-06-29 14:04:06,647 DEBUG functional 4940 20432 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:04:06,647 DEBUG functional 4940 20432 
def xstarmap(task, it):
    return 1

2023-06-29 14:04:06,647 DEBUG functional 4940 20432 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:04:10,804 DEBUG functional 4204 11224 
def xstarmap(task, it):
    return 1

2023-06-29 14:04:10,805 DEBUG functional 4204 11224 
def db_update_task():
    return 1

2023-06-29 14:04:10,806 DEBUG functional 4204 11224 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:04:10,806 DEBUG functional 4204 11224 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:04:10,806 DEBUG functional 4204 11224 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:04:10,807 DEBUG functional 4204 11224 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:04:10,807 DEBUG functional 4204 11224 
def chunks(task, it, n):
    return 1

2023-06-29 14:04:10,807 DEBUG functional 4204 11224 
def debug_task(self):
    return 1

2023-06-29 14:04:10,808 DEBUG functional 4204 11224 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:04:10,808 DEBUG functional 4204 11224 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:04:10,808 DEBUG functional 4204 11224 
def xmap(task, it):
    return 1

2023-06-29 14:04:10,809 DEBUG functional 4204 11224 
def backend_cleanup():
    return 1

2023-06-29 14:04:10,809 DEBUG functional 4204 11224 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:04:33,259 INFO autoreload 4204 2076 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:04:34,823 INFO autoreload 1168 19876 Watching for file changes with StatReloader
2023-06-29 14:04:53,082 INFO autoreload 1168 19876 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:04:54,643 INFO autoreload 20268 1892 Watching for file changes with StatReloader
2023-06-29 14:05:02,488 DEBUG functional 13424 2476 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:05:02,488 DEBUG functional 13424 2476 
def chunks(task, it, n):
    return 1

2023-06-29 14:05:02,489 DEBUG functional 13424 2476 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:05:02,489 DEBUG functional 13424 2476 
def backend_cleanup():
    return 1

2023-06-29 14:05:02,490 DEBUG functional 13424 2476 
def debug_task(self):
    return 1

2023-06-29 14:05:02,490 DEBUG functional 13424 2476 
def db_update_task():
    return 1

2023-06-29 14:05:02,491 DEBUG functional 13424 2476 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:05:02,491 DEBUG functional 13424 2476 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:05:02,491 DEBUG functional 13424 2476 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:05:02,492 DEBUG functional 13424 2476 
def xmap(task, it):
    return 1

2023-06-29 14:05:02,492 DEBUG functional 13424 2476 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:05:02,492 DEBUG functional 13424 2476 
def xstarmap(task, it):
    return 1

2023-06-29 14:05:02,493 DEBUG functional 13424 2476 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:05:11,434 DEBUG functional 20268 13720 
def xstarmap(task, it):
    return 1

2023-06-29 14:05:11,436 DEBUG functional 20268 13720 
def db_update_task():
    return 1

2023-06-29 14:05:11,437 DEBUG functional 20268 13720 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:05:11,437 DEBUG functional 20268 13720 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:05:11,437 DEBUG functional 20268 13720 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:05:11,438 DEBUG functional 20268 13720 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:05:11,438 DEBUG functional 20268 13720 
def chunks(task, it, n):
    return 1

2023-06-29 14:05:11,438 DEBUG functional 20268 13720 
def debug_task(self):
    return 1

2023-06-29 14:05:11,439 DEBUG functional 20268 13720 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:05:11,439 DEBUG functional 20268 13720 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:05:11,440 DEBUG functional 20268 13720 
def xmap(task, it):
    return 1

2023-06-29 14:05:11,440 DEBUG functional 20268 13720 
def backend_cleanup():
    return 1

2023-06-29 14:05:11,440 DEBUG functional 20268 13720 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:06:51,425 INFO autoreload 20268 1892 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:06:53,151 INFO autoreload 1824 1576 Watching for file changes with StatReloader
2023-06-29 14:06:59,620 DEBUG functional 19844 18248 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:06:59,620 DEBUG functional 19844 18248 
def db_update_task():
    return 1

2023-06-29 14:06:59,620 DEBUG functional 19844 18248 
def chunks(task, it, n):
    return 1

2023-06-29 14:06:59,621 DEBUG functional 19844 18248 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:06:59,621 DEBUG functional 19844 18248 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:06:59,622 DEBUG functional 19844 18248 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:06:59,622 DEBUG functional 19844 18248 
def backend_cleanup():
    return 1

2023-06-29 14:06:59,622 DEBUG functional 19844 18248 
def debug_task(self):
    return 1

2023-06-29 14:06:59,623 DEBUG functional 19844 18248 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:06:59,623 DEBUG functional 19844 18248 
def xmap(task, it):
    return 1

2023-06-29 14:06:59,624 DEBUG functional 19844 18248 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:06:59,624 DEBUG functional 19844 18248 
def xstarmap(task, it):
    return 1

2023-06-29 14:06:59,624 DEBUG functional 19844 18248 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:07:06,067 DEBUG functional 1824 2652 
def xstarmap(task, it):
    return 1

2023-06-29 14:07:06,069 DEBUG functional 1824 2652 
def db_update_task():
    return 1

2023-06-29 14:07:06,069 DEBUG functional 1824 2652 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:07:06,069 DEBUG functional 1824 2652 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:07:06,070 DEBUG functional 1824 2652 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:07:06,070 DEBUG functional 1824 2652 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:07:06,070 DEBUG functional 1824 2652 
def chunks(task, it, n):
    return 1

2023-06-29 14:07:06,071 DEBUG functional 1824 2652 
def debug_task(self):
    return 1

2023-06-29 14:07:06,071 DEBUG functional 1824 2652 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:07:06,071 DEBUG functional 1824 2652 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:07:06,072 DEBUG functional 1824 2652 
def xmap(task, it):
    return 1

2023-06-29 14:07:06,072 DEBUG functional 1824 2652 
def backend_cleanup():
    return 1

2023-06-29 14:07:06,072 DEBUG functional 1824 2652 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:08:02,008 INFO autoreload 1824 1576 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:08:03,692 INFO autoreload 9884 16340 Watching for file changes with StatReloader
2023-06-29 14:08:07,042 DEBUG functional 10760 20432 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:08:07,043 DEBUG functional 10760 20432 
def db_update_task():
    return 1

2023-06-29 14:08:07,043 DEBUG functional 10760 20432 
def chunks(task, it, n):
    return 1

2023-06-29 14:08:07,044 DEBUG functional 10760 20432 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:08:07,044 DEBUG functional 10760 20432 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:08:07,044 DEBUG functional 10760 20432 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:08:07,045 DEBUG functional 10760 20432 
def backend_cleanup():
    return 1

2023-06-29 14:08:07,045 DEBUG functional 10760 20432 
def debug_task(self):
    return 1

2023-06-29 14:08:07,046 DEBUG functional 10760 20432 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:08:07,046 DEBUG functional 10760 20432 
def xmap(task, it):
    return 1

2023-06-29 14:08:07,046 DEBUG functional 10760 20432 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:08:07,047 DEBUG functional 10760 20432 
def xstarmap(task, it):
    return 1

2023-06-29 14:08:07,047 DEBUG functional 10760 20432 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:08:15,508 DEBUG functional 9884 12180 
def xstarmap(task, it):
    return 1

2023-06-29 14:08:15,510 DEBUG functional 9884 12180 
def db_update_task():
    return 1

2023-06-29 14:08:15,510 DEBUG functional 9884 12180 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:08:15,510 DEBUG functional 9884 12180 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:08:15,511 DEBUG functional 9884 12180 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:08:15,511 DEBUG functional 9884 12180 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:08:15,511 DEBUG functional 9884 12180 
def chunks(task, it, n):
    return 1

2023-06-29 14:08:15,512 DEBUG functional 9884 12180 
def debug_task(self):
    return 1

2023-06-29 14:08:15,512 DEBUG functional 9884 12180 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:08:15,513 DEBUG functional 9884 12180 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:08:15,513 DEBUG functional 9884 12180 
def xmap(task, it):
    return 1

2023-06-29 14:08:15,513 DEBUG functional 9884 12180 
def backend_cleanup():
    return 1

2023-06-29 14:08:15,513 DEBUG functional 9884 12180 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:12:37,309 INFO autoreload 9884 16340 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:12:39,020 INFO autoreload 3436 7776 Watching for file changes with StatReloader
2023-06-29 14:12:45,724 DEBUG functional 10452 4724 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:12:45,724 DEBUG functional 10452 4724 
def db_update_task():
    return 1

2023-06-29 14:12:45,725 DEBUG functional 10452 4724 
def chunks(task, it, n):
    return 1

2023-06-29 14:12:45,725 DEBUG functional 10452 4724 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:12:45,725 DEBUG functional 10452 4724 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:12:45,726 DEBUG functional 10452 4724 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:12:45,726 DEBUG functional 10452 4724 
def backend_cleanup():
    return 1

2023-06-29 14:12:45,727 DEBUG functional 10452 4724 
def debug_task(self):
    return 1

2023-06-29 14:12:45,727 DEBUG functional 10452 4724 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:12:45,727 DEBUG functional 10452 4724 
def xmap(task, it):
    return 1

2023-06-29 14:12:45,728 DEBUG functional 10452 4724 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:12:45,728 DEBUG functional 10452 4724 
def xstarmap(task, it):
    return 1

2023-06-29 14:12:45,728 DEBUG functional 10452 4724 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:12:58,220 DEBUG functional 3436 12180 
def xstarmap(task, it):
    return 1

2023-06-29 14:12:58,222 DEBUG functional 3436 12180 
def db_update_task():
    return 1

2023-06-29 14:12:58,222 DEBUG functional 3436 12180 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:12:58,222 DEBUG functional 3436 12180 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:12:58,223 DEBUG functional 3436 12180 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:12:58,223 DEBUG functional 3436 12180 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:12:58,223 DEBUG functional 3436 12180 
def chunks(task, it, n):
    return 1

2023-06-29 14:12:58,224 DEBUG functional 3436 12180 
def debug_task(self):
    return 1

2023-06-29 14:12:58,224 DEBUG functional 3436 12180 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:12:58,224 DEBUG functional 3436 12180 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:12:58,225 DEBUG functional 3436 12180 
def xmap(task, it):
    return 1

2023-06-29 14:12:58,225 DEBUG functional 3436 12180 
def backend_cleanup():
    return 1

2023-06-29 14:12:58,225 DEBUG functional 3436 12180 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:13:40,889 INFO autoreload 3436 7776 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:13:42,438 INFO autoreload 9568 10312 Watching for file changes with StatReloader
2023-06-29 14:13:52,137 INFO autoreload 9568 10312 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:13:53,858 INFO autoreload 5544 1476 Watching for file changes with StatReloader
2023-06-29 14:14:00,341 DEBUG functional 9956 15512 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:14:00,342 DEBUG functional 9956 15512 
def db_update_task():
    return 1

2023-06-29 14:14:00,342 DEBUG functional 9956 15512 
def chunks(task, it, n):
    return 1

2023-06-29 14:14:00,342 DEBUG functional 9956 15512 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:14:00,343 DEBUG functional 9956 15512 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:14:00,343 DEBUG functional 9956 15512 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:14:00,344 DEBUG functional 9956 15512 
def backend_cleanup():
    return 1

2023-06-29 14:14:00,344 DEBUG functional 9956 15512 
def debug_task(self):
    return 1

2023-06-29 14:14:00,345 DEBUG functional 9956 15512 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:14:00,345 DEBUG functional 9956 15512 
def xmap(task, it):
    return 1

2023-06-29 14:14:00,345 DEBUG functional 9956 15512 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:14:00,346 DEBUG functional 9956 15512 
def xstarmap(task, it):
    return 1

2023-06-29 14:14:00,346 DEBUG functional 9956 15512 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:14:07,988 DEBUG functional 5544 11648 
def xstarmap(task, it):
    return 1

2023-06-29 14:14:07,990 DEBUG functional 5544 11648 
def db_update_task():
    return 1

2023-06-29 14:14:07,991 DEBUG functional 5544 11648 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:14:07,991 DEBUG functional 5544 11648 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:14:07,991 DEBUG functional 5544 11648 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:14:07,992 DEBUG functional 5544 11648 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:14:07,992 DEBUG functional 5544 11648 
def chunks(task, it, n):
    return 1

2023-06-29 14:14:07,992 DEBUG functional 5544 11648 
def debug_task(self):
    return 1

2023-06-29 14:14:07,993 DEBUG functional 5544 11648 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:14:07,993 DEBUG functional 5544 11648 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:14:07,994 DEBUG functional 5544 11648 
def xmap(task, it):
    return 1

2023-06-29 14:14:07,994 DEBUG functional 5544 11648 
def backend_cleanup():
    return 1

2023-06-29 14:14:07,994 DEBUG functional 5544 11648 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:14:34,088 INFO autoreload 5544 1476 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:14:35,789 INFO autoreload 2688 8748 Watching for file changes with StatReloader
2023-06-29 14:14:55,215 INFO autoreload 2688 8748 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:14:56,904 INFO autoreload 18364 20268 Watching for file changes with StatReloader
2023-06-29 14:15:02,780 DEBUG functional 18364 17996 
def xstarmap(task, it):
    return 1

2023-06-29 14:15:02,782 DEBUG functional 18364 17996 
def db_update_task():
    return 1

2023-06-29 14:15:02,782 DEBUG functional 18364 17996 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:15:02,782 DEBUG functional 18364 17996 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:15:02,783 DEBUG functional 18364 17996 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:15:02,783 DEBUG functional 18364 17996 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:15:02,783 DEBUG functional 18364 17996 
def chunks(task, it, n):
    return 1

2023-06-29 14:15:02,784 DEBUG functional 18364 17996 
def debug_task(self):
    return 1

2023-06-29 14:15:02,784 DEBUG functional 18364 17996 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:15:02,784 DEBUG functional 18364 17996 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:15:02,785 DEBUG functional 18364 17996 
def xmap(task, it):
    return 1

2023-06-29 14:15:02,785 DEBUG functional 18364 17996 
def backend_cleanup():
    return 1

2023-06-29 14:15:02,786 DEBUG functional 18364 17996 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:15:10,008 DEBUG functional 4892 2440 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:15:10,009 DEBUG functional 4892 2440 
def db_update_task():
    return 1

2023-06-29 14:15:10,009 DEBUG functional 4892 2440 
def chunks(task, it, n):
    return 1

2023-06-29 14:15:10,010 DEBUG functional 4892 2440 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:15:10,010 DEBUG functional 4892 2440 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:15:10,011 DEBUG functional 4892 2440 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:15:10,011 DEBUG functional 4892 2440 
def backend_cleanup():
    return 1

2023-06-29 14:15:10,011 DEBUG functional 4892 2440 
def debug_task(self):
    return 1

2023-06-29 14:15:10,012 DEBUG functional 4892 2440 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:15:10,012 DEBUG functional 4892 2440 
def xmap(task, it):
    return 1

2023-06-29 14:15:10,012 DEBUG functional 4892 2440 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:15:10,013 DEBUG functional 4892 2440 
def xstarmap(task, it):
    return 1

2023-06-29 14:15:10,013 DEBUG functional 4892 2440 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:15:25,540 INFO autoreload 18364 20268 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:15:27,273 INFO autoreload 10668 4992 Watching for file changes with StatReloader
2023-06-29 14:17:34,462 INFO autoreload 10668 4992 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:17:35,965 INFO autoreload 4220 14644 Watching for file changes with StatReloader
2023-06-29 14:17:41,424 DEBUG functional 20804 8012 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:17:41,425 DEBUG functional 20804 8012 
def chunks(task, it, n):
    return 1

2023-06-29 14:17:41,425 DEBUG functional 20804 8012 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:17:41,426 DEBUG functional 20804 8012 
def backend_cleanup():
    return 1

2023-06-29 14:17:41,426 DEBUG functional 20804 8012 
def debug_task(self):
    return 1

2023-06-29 14:17:41,427 DEBUG functional 20804 8012 
def db_update_task():
    return 1

2023-06-29 14:17:41,427 DEBUG functional 20804 8012 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:17:41,427 DEBUG functional 20804 8012 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:17:41,428 DEBUG functional 20804 8012 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:17:41,428 DEBUG functional 20804 8012 
def xmap(task, it):
    return 1

2023-06-29 14:17:41,428 DEBUG functional 20804 8012 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:17:41,429 DEBUG functional 20804 8012 
def xstarmap(task, it):
    return 1

2023-06-29 14:17:41,429 DEBUG functional 20804 8012 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:17:45,683 DEBUG functional 4220 18300 
def xstarmap(task, it):
    return 1

2023-06-29 14:17:45,684 DEBUG functional 4220 18300 
def db_update_task():
    return 1

2023-06-29 14:17:45,685 DEBUG functional 4220 18300 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:17:45,685 DEBUG functional 4220 18300 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:17:45,685 DEBUG functional 4220 18300 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:17:45,686 DEBUG functional 4220 18300 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:17:45,686 DEBUG functional 4220 18300 
def chunks(task, it, n):
    return 1

2023-06-29 14:17:45,686 DEBUG functional 4220 18300 
def debug_task(self):
    return 1

2023-06-29 14:17:45,687 DEBUG functional 4220 18300 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:17:45,687 DEBUG functional 4220 18300 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:17:45,687 DEBUG functional 4220 18300 
def xmap(task, it):
    return 1

2023-06-29 14:17:45,688 DEBUG functional 4220 18300 
def backend_cleanup():
    return 1

2023-06-29 14:17:45,688 DEBUG functional 4220 18300 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:23:17,636 INFO autoreload 8544 11864 Watching for file changes with StatReloader
2023-06-29 14:23:27,105 DEBUG functional 15284 17708 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:23:27,105 DEBUG functional 15284 17708 
def chunks(task, it, n):
    return 1

2023-06-29 14:23:27,106 DEBUG functional 15284 17708 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:23:27,106 DEBUG functional 15284 17708 
def backend_cleanup():
    return 1

2023-06-29 14:23:27,106 DEBUG functional 15284 17708 
def debug_task(self):
    return 1

2023-06-29 14:23:27,107 DEBUG functional 15284 17708 
def db_update_task():
    return 1

2023-06-29 14:23:27,107 DEBUG functional 15284 17708 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:23:27,108 DEBUG functional 15284 17708 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:23:27,108 DEBUG functional 15284 17708 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:23:27,108 DEBUG functional 15284 17708 
def xmap(task, it):
    return 1

2023-06-29 14:23:27,109 DEBUG functional 15284 17708 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:23:27,109 DEBUG functional 15284 17708 
def xstarmap(task, it):
    return 1

2023-06-29 14:23:27,109 DEBUG functional 15284 17708 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:23:42,502 DEBUG functional 8544 12148 
def xstarmap(task, it):
    return 1

2023-06-29 14:23:42,503 DEBUG functional 8544 12148 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:23:42,504 DEBUG functional 8544 12148 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:23:42,504 DEBUG functional 8544 12148 
def chunks(task, it, n):
    return 1

2023-06-29 14:23:42,505 DEBUG functional 8544 12148 
def debug_task(self):
    return 1

2023-06-29 14:23:42,505 DEBUG functional 8544 12148 
def db_update_task():
    return 1

2023-06-29 14:23:42,506 DEBUG functional 8544 12148 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:23:42,506 DEBUG functional 8544 12148 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:23:42,506 DEBUG functional 8544 12148 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:23:42,507 DEBUG functional 8544 12148 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:23:42,507 DEBUG functional 8544 12148 
def xmap(task, it):
    return 1

2023-06-29 14:23:42,507 DEBUG functional 8544 12148 
def backend_cleanup():
    return 1

2023-06-29 14:23:42,508 DEBUG functional 8544 12148 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:24:18,838 INFO autoreload 8544 11864 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:24:20,446 INFO autoreload 14904 1452 Watching for file changes with StatReloader
2023-06-29 14:24:25,963 DEBUG functional 10000 14016 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:24:25,963 DEBUG functional 10000 14016 
def db_update_task():
    return 1

2023-06-29 14:24:25,964 DEBUG functional 10000 14016 
def chunks(task, it, n):
    return 1

2023-06-29 14:24:25,964 DEBUG functional 10000 14016 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:24:25,964 DEBUG functional 10000 14016 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:24:25,965 DEBUG functional 10000 14016 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:24:25,966 DEBUG functional 10000 14016 
def backend_cleanup():
    return 1

2023-06-29 14:24:25,966 DEBUG functional 10000 14016 
def debug_task(self):
    return 1

2023-06-29 14:24:25,966 DEBUG functional 10000 14016 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:24:25,967 DEBUG functional 10000 14016 
def xmap(task, it):
    return 1

2023-06-29 14:24:25,967 DEBUG functional 10000 14016 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:24:25,967 DEBUG functional 10000 14016 
def xstarmap(task, it):
    return 1

2023-06-29 14:24:25,968 DEBUG functional 10000 14016 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:24:32,388 DEBUG functional 14904 11740 
def xstarmap(task, it):
    return 1

2023-06-29 14:24:32,390 DEBUG functional 14904 11740 
def db_update_task():
    return 1

2023-06-29 14:24:32,391 DEBUG functional 14904 11740 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:24:32,391 DEBUG functional 14904 11740 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:24:32,391 DEBUG functional 14904 11740 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:24:32,392 DEBUG functional 14904 11740 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:24:32,392 DEBUG functional 14904 11740 
def chunks(task, it, n):
    return 1

2023-06-29 14:24:32,392 DEBUG functional 14904 11740 
def debug_task(self):
    return 1

2023-06-29 14:24:32,393 DEBUG functional 14904 11740 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:24:32,393 DEBUG functional 14904 11740 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:24:32,393 DEBUG functional 14904 11740 
def xmap(task, it):
    return 1

2023-06-29 14:24:32,394 DEBUG functional 14904 11740 
def backend_cleanup():
    return 1

2023-06-29 14:24:32,394 DEBUG functional 14904 11740 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:45:33,480 DEBUG functional 3204 1648 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:45:33,480 DEBUG functional 3204 1648 
def db_update_task():
    return 1

2023-06-29 14:45:33,481 DEBUG functional 3204 1648 
def chunks(task, it, n):
    return 1

2023-06-29 14:45:33,481 DEBUG functional 3204 1648 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:45:33,481 DEBUG functional 3204 1648 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:45:33,482 DEBUG functional 3204 1648 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:45:33,482 DEBUG functional 3204 1648 
def backend_cleanup():
    return 1

2023-06-29 14:45:33,483 DEBUG functional 3204 1648 
def debug_task(self):
    return 1

2023-06-29 14:45:33,483 DEBUG functional 3204 1648 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:45:33,483 DEBUG functional 3204 1648 
def xmap(task, it):
    return 1

2023-06-29 14:45:33,484 DEBUG functional 3204 1648 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:45:33,484 DEBUG functional 3204 1648 
def xstarmap(task, it):
    return 1

2023-06-29 14:45:33,484 DEBUG functional 3204 1648 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:46:26,621 INFO autoreload 14904 1452 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:46:28,154 INFO autoreload 14436 3004 Watching for file changes with StatReloader
2023-06-29 14:46:57,205 INFO autoreload 14436 3004 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:46:58,876 INFO autoreload 10668 5664 Watching for file changes with StatReloader
2023-06-29 14:47:08,013 DEBUG functional 18000 15064 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:47:08,013 DEBUG functional 18000 15064 
def chunks(task, it, n):
    return 1

2023-06-29 14:47:08,013 DEBUG functional 18000 15064 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:47:08,014 DEBUG functional 18000 15064 
def backend_cleanup():
    return 1

2023-06-29 14:47:08,014 DEBUG functional 18000 15064 
def debug_task(self):
    return 1

2023-06-29 14:47:08,014 DEBUG functional 18000 15064 
def db_update_task():
    return 1

2023-06-29 14:47:08,015 DEBUG functional 18000 15064 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:47:08,015 DEBUG functional 18000 15064 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:47:08,016 DEBUG functional 18000 15064 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:47:08,016 DEBUG functional 18000 15064 
def xmap(task, it):
    return 1

2023-06-29 14:47:08,016 DEBUG functional 18000 15064 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:47:08,017 DEBUG functional 18000 15064 
def xstarmap(task, it):
    return 1

2023-06-29 14:47:08,017 DEBUG functional 18000 15064 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:47:14,985 DEBUG functional 10668 20916 
def xstarmap(task, it):
    return 1

2023-06-29 14:47:14,987 DEBUG functional 10668 20916 
def db_update_task():
    return 1

2023-06-29 14:47:14,987 DEBUG functional 10668 20916 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:47:14,988 DEBUG functional 10668 20916 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:47:14,988 DEBUG functional 10668 20916 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:47:14,988 DEBUG functional 10668 20916 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:47:14,989 DEBUG functional 10668 20916 
def chunks(task, it, n):
    return 1

2023-06-29 14:47:14,989 DEBUG functional 10668 20916 
def debug_task(self):
    return 1

2023-06-29 14:47:14,989 DEBUG functional 10668 20916 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:47:14,990 DEBUG functional 10668 20916 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:47:14,990 DEBUG functional 10668 20916 
def xmap(task, it):
    return 1

2023-06-29 14:47:14,990 DEBUG functional 10668 20916 
def backend_cleanup():
    return 1

2023-06-29 14:47:14,991 DEBUG functional 10668 20916 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:47:47,137 INFO autoreload 10668 5664 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:47:48,791 INFO autoreload 21016 5712 Watching for file changes with StatReloader
2023-06-29 14:47:52,109 INFO autoreload 21016 5712 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:47:53,818 INFO autoreload 12724 9152 Watching for file changes with StatReloader
2023-06-29 14:47:54,716 DEBUG functional 15624 20648 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:47:54,716 DEBUG functional 15624 20648 
def db_update_task():
    return 1

2023-06-29 14:47:54,717 DEBUG functional 15624 20648 
def chunks(task, it, n):
    return 1

2023-06-29 14:47:54,717 DEBUG functional 15624 20648 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:47:54,717 DEBUG functional 15624 20648 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:47:54,718 DEBUG functional 15624 20648 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:47:54,718 DEBUG functional 15624 20648 
def backend_cleanup():
    return 1

2023-06-29 14:47:54,719 DEBUG functional 15624 20648 
def debug_task(self):
    return 1

2023-06-29 14:47:54,719 DEBUG functional 15624 20648 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:47:54,719 DEBUG functional 15624 20648 
def xmap(task, it):
    return 1

2023-06-29 14:47:54,720 DEBUG functional 15624 20648 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:47:54,720 DEBUG functional 15624 20648 
def xstarmap(task, it):
    return 1

2023-06-29 14:47:54,720 DEBUG functional 15624 20648 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:47:58,162 DEBUG functional 12724 13288 
def xstarmap(task, it):
    return 1

2023-06-29 14:47:58,164 DEBUG functional 12724 13288 
def db_update_task():
    return 1

2023-06-29 14:47:58,164 DEBUG functional 12724 13288 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:47:58,165 DEBUG functional 12724 13288 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:47:58,165 DEBUG functional 12724 13288 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:47:58,165 DEBUG functional 12724 13288 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:47:58,166 DEBUG functional 12724 13288 
def chunks(task, it, n):
    return 1

2023-06-29 14:47:58,166 DEBUG functional 12724 13288 
def debug_task(self):
    return 1

2023-06-29 14:47:58,167 DEBUG functional 12724 13288 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:47:58,167 DEBUG functional 12724 13288 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:47:58,167 DEBUG functional 12724 13288 
def xmap(task, it):
    return 1

2023-06-29 14:47:58,168 DEBUG functional 12724 13288 
def backend_cleanup():
    return 1

2023-06-29 14:47:58,168 DEBUG functional 12724 13288 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:49:17,715 INFO autoreload 12724 9152 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:49:19,427 INFO autoreload 2420 11840 Watching for file changes with StatReloader
2023-06-29 14:49:21,985 DEBUG functional 6920 3780 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:49:21,985 DEBUG functional 6920 3780 
def db_update_task():
    return 1

2023-06-29 14:49:21,986 DEBUG functional 6920 3780 
def chunks(task, it, n):
    return 1

2023-06-29 14:49:21,986 DEBUG functional 6920 3780 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:49:21,986 DEBUG functional 6920 3780 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:49:21,987 DEBUG functional 6920 3780 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:49:21,987 DEBUG functional 6920 3780 
def backend_cleanup():
    return 1

2023-06-29 14:49:21,988 DEBUG functional 6920 3780 
def debug_task(self):
    return 1

2023-06-29 14:49:21,988 DEBUG functional 6920 3780 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:49:21,988 DEBUG functional 6920 3780 
def xmap(task, it):
    return 1

2023-06-29 14:49:21,989 DEBUG functional 6920 3780 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:49:21,989 DEBUG functional 6920 3780 
def xstarmap(task, it):
    return 1

2023-06-29 14:49:21,989 DEBUG functional 6920 3780 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:49:27,845 DEBUG functional 2420 10796 
def xstarmap(task, it):
    return 1

2023-06-29 14:49:27,846 DEBUG functional 2420 10796 
def db_update_task():
    return 1

2023-06-29 14:49:27,847 DEBUG functional 2420 10796 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:49:27,847 DEBUG functional 2420 10796 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:49:27,847 DEBUG functional 2420 10796 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:49:27,848 DEBUG functional 2420 10796 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:49:27,848 DEBUG functional 2420 10796 
def chunks(task, it, n):
    return 1

2023-06-29 14:49:27,848 DEBUG functional 2420 10796 
def debug_task(self):
    return 1

2023-06-29 14:49:27,849 DEBUG functional 2420 10796 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:49:27,849 DEBUG functional 2420 10796 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:49:27,849 DEBUG functional 2420 10796 
def xmap(task, it):
    return 1

2023-06-29 14:49:27,850 DEBUG functional 2420 10796 
def backend_cleanup():
    return 1

2023-06-29 14:49:27,850 DEBUG functional 2420 10796 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:53:18,140 INFO autoreload 2420 11840 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:53:19,838 INFO autoreload 9484 19124 Watching for file changes with StatReloader
2023-06-29 14:53:24,288 DEBUG functional 18616 6124 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:53:24,289 DEBUG functional 18616 6124 
def db_update_task():
    return 1

2023-06-29 14:53:24,289 DEBUG functional 18616 6124 
def chunks(task, it, n):
    return 1

2023-06-29 14:53:24,289 DEBUG functional 18616 6124 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:53:24,290 DEBUG functional 18616 6124 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:53:24,290 DEBUG functional 18616 6124 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:53:24,291 DEBUG functional 18616 6124 
def backend_cleanup():
    return 1

2023-06-29 14:53:24,291 DEBUG functional 18616 6124 
def debug_task(self):
    return 1

2023-06-29 14:53:24,291 DEBUG functional 18616 6124 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:53:24,292 DEBUG functional 18616 6124 
def xmap(task, it):
    return 1

2023-06-29 14:53:24,292 DEBUG functional 18616 6124 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:53:24,292 DEBUG functional 18616 6124 
def xstarmap(task, it):
    return 1

2023-06-29 14:53:24,293 DEBUG functional 18616 6124 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:53:28,072 DEBUG functional 9484 19712 
def xstarmap(task, it):
    return 1

2023-06-29 14:53:28,073 DEBUG functional 9484 19712 
def db_update_task():
    return 1

2023-06-29 14:53:28,074 DEBUG functional 9484 19712 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:53:28,074 DEBUG functional 9484 19712 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:53:28,074 DEBUG functional 9484 19712 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:53:28,075 DEBUG functional 9484 19712 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:53:28,075 DEBUG functional 9484 19712 
def chunks(task, it, n):
    return 1

2023-06-29 14:53:28,075 DEBUG functional 9484 19712 
def debug_task(self):
    return 1

2023-06-29 14:53:28,076 DEBUG functional 9484 19712 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:53:28,076 DEBUG functional 9484 19712 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:53:28,077 DEBUG functional 9484 19712 
def xmap(task, it):
    return 1

2023-06-29 14:53:28,077 DEBUG functional 9484 19712 
def backend_cleanup():
    return 1

2023-06-29 14:53:28,077 DEBUG functional 9484 19712 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:54:27,068 INFO autoreload 9484 19124 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:54:28,567 INFO autoreload 19592 4924 Watching for file changes with StatReloader
2023-06-29 14:56:13,041 INFO autoreload 19592 4924 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:56:14,739 INFO autoreload 6408 16440 Watching for file changes with StatReloader
2023-06-29 14:56:19,564 DEBUG functional 16068 1468 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:56:19,565 DEBUG functional 16068 1468 
def chunks(task, it, n):
    return 1

2023-06-29 14:56:19,565 DEBUG functional 16068 1468 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:56:19,566 DEBUG functional 16068 1468 
def backend_cleanup():
    return 1

2023-06-29 14:56:19,566 DEBUG functional 16068 1468 
def debug_task(self):
    return 1

2023-06-29 14:56:19,566 DEBUG functional 16068 1468 
def db_update_task():
    return 1

2023-06-29 14:56:19,567 DEBUG functional 16068 1468 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:56:19,567 DEBUG functional 16068 1468 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:56:19,568 DEBUG functional 16068 1468 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:56:19,568 DEBUG functional 16068 1468 
def xmap(task, it):
    return 1

2023-06-29 14:56:19,568 DEBUG functional 16068 1468 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:56:19,569 DEBUG functional 16068 1468 
def xstarmap(task, it):
    return 1

2023-06-29 14:56:19,569 DEBUG functional 16068 1468 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:56:26,039 DEBUG functional 6408 14364 
def xstarmap(task, it):
    return 1

2023-06-29 14:56:26,040 DEBUG functional 6408 14364 
def db_update_task():
    return 1

2023-06-29 14:56:26,041 DEBUG functional 6408 14364 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:56:26,041 DEBUG functional 6408 14364 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:56:26,041 DEBUG functional 6408 14364 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:56:26,042 DEBUG functional 6408 14364 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:56:26,042 DEBUG functional 6408 14364 
def chunks(task, it, n):
    return 1

2023-06-29 14:56:26,042 DEBUG functional 6408 14364 
def debug_task(self):
    return 1

2023-06-29 14:56:26,043 DEBUG functional 6408 14364 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:56:26,043 DEBUG functional 6408 14364 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:56:26,043 DEBUG functional 6408 14364 
def xmap(task, it):
    return 1

2023-06-29 14:56:26,044 DEBUG functional 6408 14364 
def backend_cleanup():
    return 1

2023-06-29 14:56:26,044 DEBUG functional 6408 14364 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:56:46,390 INFO autoreload 6408 16440 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:56:47,993 INFO autoreload 13716 18792 Watching for file changes with StatReloader
2023-06-29 14:56:54,205 DEBUG functional 19248 4432 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:56:54,206 DEBUG functional 19248 4432 
def db_update_task():
    return 1

2023-06-29 14:56:54,206 DEBUG functional 19248 4432 
def chunks(task, it, n):
    return 1

2023-06-29 14:56:54,206 DEBUG functional 19248 4432 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:56:54,207 DEBUG functional 19248 4432 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:56:54,207 DEBUG functional 19248 4432 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:56:54,208 DEBUG functional 19248 4432 
def backend_cleanup():
    return 1

2023-06-29 14:56:54,208 DEBUG functional 19248 4432 
def debug_task(self):
    return 1

2023-06-29 14:56:54,208 DEBUG functional 19248 4432 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:56:54,209 DEBUG functional 19248 4432 
def xmap(task, it):
    return 1

2023-06-29 14:56:54,209 DEBUG functional 19248 4432 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:56:54,209 DEBUG functional 19248 4432 
def xstarmap(task, it):
    return 1

2023-06-29 14:56:54,210 DEBUG functional 19248 4432 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:56:59,360 DEBUG functional 13716 19560 
def xstarmap(task, it):
    return 1

2023-06-29 14:56:59,362 DEBUG functional 13716 19560 
def db_update_task():
    return 1

2023-06-29 14:56:59,362 DEBUG functional 13716 19560 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:56:59,363 DEBUG functional 13716 19560 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:56:59,363 DEBUG functional 13716 19560 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:56:59,363 DEBUG functional 13716 19560 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:56:59,364 DEBUG functional 13716 19560 
def chunks(task, it, n):
    return 1

2023-06-29 14:56:59,364 DEBUG functional 13716 19560 
def debug_task(self):
    return 1

2023-06-29 14:56:59,365 DEBUG functional 13716 19560 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:56:59,365 DEBUG functional 13716 19560 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:56:59,365 DEBUG functional 13716 19560 
def xmap(task, it):
    return 1

2023-06-29 14:56:59,366 DEBUG functional 13716 19560 
def backend_cleanup():
    return 1

2023-06-29 14:56:59,366 DEBUG functional 13716 19560 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:58:06,998 INFO autoreload 13716 18792 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:58:08,663 INFO autoreload 14364 13920 Watching for file changes with StatReloader
2023-06-29 14:58:14,449 DEBUG functional 10792 11796 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:58:14,449 DEBUG functional 10792 11796 
def db_update_task():
    return 1

2023-06-29 14:58:14,449 DEBUG functional 10792 11796 
def chunks(task, it, n):
    return 1

2023-06-29 14:58:14,450 DEBUG functional 10792 11796 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:58:14,450 DEBUG functional 10792 11796 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:58:14,451 DEBUG functional 10792 11796 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:58:14,451 DEBUG functional 10792 11796 
def backend_cleanup():
    return 1

2023-06-29 14:58:14,452 DEBUG functional 10792 11796 
def debug_task(self):
    return 1

2023-06-29 14:58:14,452 DEBUG functional 10792 11796 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:58:14,452 DEBUG functional 10792 11796 
def xmap(task, it):
    return 1

2023-06-29 14:58:14,453 DEBUG functional 10792 11796 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:58:14,453 DEBUG functional 10792 11796 
def xstarmap(task, it):
    return 1

2023-06-29 14:58:14,453 DEBUG functional 10792 11796 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:58:21,788 DEBUG functional 14364 12164 
def xstarmap(task, it):
    return 1

2023-06-29 14:58:21,790 DEBUG functional 14364 12164 
def db_update_task():
    return 1

2023-06-29 14:58:21,790 DEBUG functional 14364 12164 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:58:21,790 DEBUG functional 14364 12164 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:58:21,791 DEBUG functional 14364 12164 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:58:21,791 DEBUG functional 14364 12164 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:58:21,791 DEBUG functional 14364 12164 
def chunks(task, it, n):
    return 1

2023-06-29 14:58:21,792 DEBUG functional 14364 12164 
def debug_task(self):
    return 1

2023-06-29 14:58:21,792 DEBUG functional 14364 12164 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:58:21,793 DEBUG functional 14364 12164 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:58:21,793 DEBUG functional 14364 12164 
def xmap(task, it):
    return 1

2023-06-29 14:58:21,793 DEBUG functional 14364 12164 
def backend_cleanup():
    return 1

2023-06-29 14:58:21,794 DEBUG functional 14364 12164 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:58:40,338 INFO autoreload 14364 13920 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:58:41,968 INFO autoreload 10028 7804 Watching for file changes with StatReloader
2023-06-29 14:58:48,213 DEBUG functional 18152 19256 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:58:48,213 DEBUG functional 18152 19256 
def db_update_task():
    return 1

2023-06-29 14:58:48,214 DEBUG functional 18152 19256 
def chunks(task, it, n):
    return 1

2023-06-29 14:58:48,214 DEBUG functional 18152 19256 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:58:48,214 DEBUG functional 18152 19256 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:58:48,215 DEBUG functional 18152 19256 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:58:48,215 DEBUG functional 18152 19256 
def backend_cleanup():
    return 1

2023-06-29 14:58:48,216 DEBUG functional 18152 19256 
def debug_task(self):
    return 1

2023-06-29 14:58:48,216 DEBUG functional 18152 19256 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:58:48,216 DEBUG functional 18152 19256 
def xmap(task, it):
    return 1

2023-06-29 14:58:48,217 DEBUG functional 18152 19256 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:58:48,217 DEBUG functional 18152 19256 
def xstarmap(task, it):
    return 1

2023-06-29 14:58:48,217 DEBUG functional 18152 19256 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:58:57,892 DEBUG functional 10028 7840 
def xstarmap(task, it):
    return 1

2023-06-29 14:58:57,894 DEBUG functional 10028 7840 
def db_update_task():
    return 1

2023-06-29 14:58:57,894 DEBUG functional 10028 7840 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:58:57,895 DEBUG functional 10028 7840 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:58:57,895 DEBUG functional 10028 7840 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:58:57,895 DEBUG functional 10028 7840 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:58:57,896 DEBUG functional 10028 7840 
def chunks(task, it, n):
    return 1

2023-06-29 14:58:57,896 DEBUG functional 10028 7840 
def debug_task(self):
    return 1

2023-06-29 14:58:57,896 DEBUG functional 10028 7840 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:58:57,897 DEBUG functional 10028 7840 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:58:57,897 DEBUG functional 10028 7840 
def xmap(task, it):
    return 1

2023-06-29 14:58:57,898 DEBUG functional 10028 7840 
def backend_cleanup():
    return 1

2023-06-29 14:58:57,898 DEBUG functional 10028 7840 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:59:44,852 INFO autoreload 10028 7804 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 14:59:46,562 INFO autoreload 18716 3672 Watching for file changes with StatReloader
2023-06-29 14:59:50,080 DEBUG functional 13040 19492 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:59:50,080 DEBUG functional 13040 19492 
def db_update_task():
    return 1

2023-06-29 14:59:50,081 DEBUG functional 13040 19492 
def chunks(task, it, n):
    return 1

2023-06-29 14:59:50,081 DEBUG functional 13040 19492 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:59:50,081 DEBUG functional 13040 19492 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:59:50,082 DEBUG functional 13040 19492 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:59:50,082 DEBUG functional 13040 19492 
def backend_cleanup():
    return 1

2023-06-29 14:59:50,083 DEBUG functional 13040 19492 
def debug_task(self):
    return 1

2023-06-29 14:59:50,083 DEBUG functional 13040 19492 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:59:50,083 DEBUG functional 13040 19492 
def xmap(task, it):
    return 1

2023-06-29 14:59:50,084 DEBUG functional 13040 19492 
def chain(*args, **kwargs):
    return 1

2023-06-29 14:59:50,084 DEBUG functional 13040 19492 
def xstarmap(task, it):
    return 1

2023-06-29 14:59:50,084 DEBUG functional 13040 19492 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:59:56,496 DEBUG functional 18716 16844 
def xstarmap(task, it):
    return 1

2023-06-29 14:59:56,498 DEBUG functional 18716 16844 
def db_update_task():
    return 1

2023-06-29 14:59:56,498 DEBUG functional 18716 16844 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 14:59:56,499 DEBUG functional 18716 16844 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 14:59:56,499 DEBUG functional 18716 16844 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 14:59:56,499 DEBUG functional 18716 16844 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 14:59:56,500 DEBUG functional 18716 16844 
def chunks(task, it, n):
    return 1

2023-06-29 14:59:56,500 DEBUG functional 18716 16844 
def debug_task(self):
    return 1

2023-06-29 14:59:56,500 DEBUG functional 18716 16844 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 14:59:56,501 DEBUG functional 18716 16844 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 14:59:56,501 DEBUG functional 18716 16844 
def xmap(task, it):
    return 1

2023-06-29 14:59:56,501 DEBUG functional 18716 16844 
def backend_cleanup():
    return 1

2023-06-29 14:59:56,502 DEBUG functional 18716 16844 
def chain(*args, **kwargs):
    return 1

2023-06-29 15:00:28,953 INFO autoreload 18716 3672 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 15:00:30,572 INFO autoreload 13552 16156 Watching for file changes with StatReloader
2023-06-29 15:00:35,074 DEBUG functional 3744 17708 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 15:00:35,074 DEBUG functional 3744 17708 
def db_update_task():
    return 1

2023-06-29 15:00:35,075 DEBUG functional 3744 17708 
def chunks(task, it, n):
    return 1

2023-06-29 15:00:35,075 DEBUG functional 3744 17708 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 15:00:35,075 DEBUG functional 3744 17708 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 15:00:35,076 DEBUG functional 3744 17708 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 15:00:35,076 DEBUG functional 3744 17708 
def backend_cleanup():
    return 1

2023-06-29 15:00:35,076 DEBUG functional 3744 17708 
def debug_task(self):
    return 1

2023-06-29 15:00:35,077 DEBUG functional 3744 17708 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 15:00:35,077 DEBUG functional 3744 17708 
def xmap(task, it):
    return 1

2023-06-29 15:00:35,077 DEBUG functional 3744 17708 
def chain(*args, **kwargs):
    return 1

2023-06-29 15:00:35,078 DEBUG functional 3744 17708 
def xstarmap(task, it):
    return 1

2023-06-29 15:00:35,078 DEBUG functional 3744 17708 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 15:00:41,910 DEBUG functional 13552 10880 
def xstarmap(task, it):
    return 1

2023-06-29 15:00:41,912 DEBUG functional 13552 10880 
def db_update_task():
    return 1

2023-06-29 15:00:41,912 DEBUG functional 13552 10880 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 15:00:41,912 DEBUG functional 13552 10880 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 15:00:41,913 DEBUG functional 13552 10880 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 15:00:41,913 DEBUG functional 13552 10880 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 15:00:41,913 DEBUG functional 13552 10880 
def chunks(task, it, n):
    return 1

2023-06-29 15:00:41,914 DEBUG functional 13552 10880 
def debug_task(self):
    return 1

2023-06-29 15:00:41,914 DEBUG functional 13552 10880 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 15:00:41,915 DEBUG functional 13552 10880 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 15:00:41,915 DEBUG functional 13552 10880 
def xmap(task, it):
    return 1

2023-06-29 15:00:41,915 DEBUG functional 13552 10880 
def backend_cleanup():
    return 1

2023-06-29 15:00:41,916 DEBUG functional 13552 10880 
def chain(*args, **kwargs):
    return 1

2023-06-29 15:01:02,325 INFO autoreload 13552 16156 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 15:01:03,882 INFO autoreload 21768 21772 Watching for file changes with StatReloader
2023-06-29 15:01:51,182 INFO autoreload 21768 21772 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 15:01:52,785 INFO autoreload 21912 21888 Watching for file changes with StatReloader
2023-06-29 15:02:01,670 DEBUG functional 21768 21756 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 15:02:01,670 DEBUG functional 21768 21756 
def db_update_task():
    return 1

2023-06-29 15:02:01,671 DEBUG functional 21768 21756 
def chunks(task, it, n):
    return 1

2023-06-29 15:02:01,671 DEBUG functional 21768 21756 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 15:02:01,671 DEBUG functional 21768 21756 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 15:02:01,672 DEBUG functional 21768 21756 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 15:02:01,672 DEBUG functional 21768 21756 
def backend_cleanup():
    return 1

2023-06-29 15:02:01,673 DEBUG functional 21768 21756 
def debug_task(self):
    return 1

2023-06-29 15:02:01,673 DEBUG functional 21768 21756 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 15:02:01,673 DEBUG functional 21768 21756 
def xmap(task, it):
    return 1

2023-06-29 15:02:01,674 DEBUG functional 21768 21756 
def chain(*args, **kwargs):
    return 1

2023-06-29 15:02:01,674 DEBUG functional 21768 21756 
def xstarmap(task, it):
    return 1

2023-06-29 15:02:01,674 DEBUG functional 21768 21756 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 15:02:06,259 DEBUG functional 21912 22020 
def xstarmap(task, it):
    return 1

2023-06-29 15:02:06,261 DEBUG functional 21912 22020 
def db_update_task():
    return 1

2023-06-29 15:02:06,261 DEBUG functional 21912 22020 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 15:02:06,262 DEBUG functional 21912 22020 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 15:02:06,262 DEBUG functional 21912 22020 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 15:02:06,262 DEBUG functional 21912 22020 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 15:02:06,263 DEBUG functional 21912 22020 
def chunks(task, it, n):
    return 1

2023-06-29 15:02:06,263 DEBUG functional 21912 22020 
def debug_task(self):
    return 1

2023-06-29 15:02:06,264 DEBUG functional 21912 22020 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 15:02:06,264 DEBUG functional 21912 22020 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 15:02:06,264 DEBUG functional 21912 22020 
def xmap(task, it):
    return 1

2023-06-29 15:02:06,265 DEBUG functional 21912 22020 
def backend_cleanup():
    return 1

2023-06-29 15:02:06,265 DEBUG functional 21912 22020 
def chain(*args, **kwargs):
    return 1

2023-06-29 15:02:22,373 INFO autoreload 21912 21888 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 15:02:24,100 INFO autoreload 19496 10408 Watching for file changes with StatReloader
2023-06-29 15:02:29,015 DEBUG functional 11012 7260 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 15:02:29,016 DEBUG functional 11012 7260 
def db_update_task():
    return 1

2023-06-29 15:02:29,016 DEBUG functional 11012 7260 
def chunks(task, it, n):
    return 1

2023-06-29 15:02:29,016 DEBUG functional 11012 7260 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 15:02:29,017 DEBUG functional 11012 7260 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 15:02:29,018 DEBUG functional 11012 7260 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 15:02:29,018 DEBUG functional 11012 7260 
def backend_cleanup():
    return 1

2023-06-29 15:02:29,018 DEBUG functional 11012 7260 
def debug_task(self):
    return 1

2023-06-29 15:02:29,019 DEBUG functional 11012 7260 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 15:02:29,019 DEBUG functional 11012 7260 
def xmap(task, it):
    return 1

2023-06-29 15:02:29,019 DEBUG functional 11012 7260 
def chain(*args, **kwargs):
    return 1

2023-06-29 15:02:29,020 DEBUG functional 11012 7260 
def xstarmap(task, it):
    return 1

2023-06-29 15:02:29,020 DEBUG functional 11012 7260 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 15:02:36,031 DEBUG functional 19496 12848 
def xstarmap(task, it):
    return 1

2023-06-29 15:02:36,033 DEBUG functional 19496 12848 
def db_update_task():
    return 1

2023-06-29 15:02:36,034 DEBUG functional 19496 12848 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 15:02:36,034 DEBUG functional 19496 12848 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 15:02:36,035 DEBUG functional 19496 12848 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 15:02:36,035 DEBUG functional 19496 12848 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 15:02:36,035 DEBUG functional 19496 12848 
def chunks(task, it, n):
    return 1

2023-06-29 15:02:36,036 DEBUG functional 19496 12848 
def debug_task(self):
    return 1

2023-06-29 15:02:36,036 DEBUG functional 19496 12848 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 15:02:36,037 DEBUG functional 19496 12848 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 15:02:36,037 DEBUG functional 19496 12848 
def xmap(task, it):
    return 1

2023-06-29 15:02:36,038 DEBUG functional 19496 12848 
def backend_cleanup():
    return 1

2023-06-29 15:02:36,038 DEBUG functional 19496 12848 
def chain(*args, **kwargs):
    return 1

2023-06-29 15:23:55,450 INFO autoreload 19496 10408 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 15:23:57,051 INFO autoreload 15080 15072 Watching for file changes with StatReloader
2023-06-29 15:24:53,134 DEBUG functional 21368 17480 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 15:24:53,135 DEBUG functional 21368 17480 
def chunks(task, it, n):
    return 1

2023-06-29 15:24:53,135 DEBUG functional 21368 17480 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 15:24:53,136 DEBUG functional 21368 17480 
def backend_cleanup():
    return 1

2023-06-29 15:24:53,136 DEBUG functional 21368 17480 
def debug_task(self):
    return 1

2023-06-29 15:24:53,136 DEBUG functional 21368 17480 
def db_update_task():
    return 1

2023-06-29 15:24:53,137 DEBUG functional 21368 17480 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 15:24:53,137 DEBUG functional 21368 17480 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 15:24:53,137 DEBUG functional 21368 17480 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 15:24:53,138 DEBUG functional 21368 17480 
def xmap(task, it):
    return 1

2023-06-29 15:24:53,138 DEBUG functional 21368 17480 
def chain(*args, **kwargs):
    return 1

2023-06-29 15:24:53,138 DEBUG functional 21368 17480 
def xstarmap(task, it):
    return 1

2023-06-29 15:24:53,139 DEBUG functional 21368 17480 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 15:24:57,688 DEBUG functional 15080 21604 
def xstarmap(task, it):
    return 1

2023-06-29 15:24:57,690 DEBUG functional 15080 21604 
def db_update_task():
    return 1

2023-06-29 15:24:57,690 DEBUG functional 15080 21604 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 15:24:57,691 DEBUG functional 15080 21604 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 15:24:57,691 DEBUG functional 15080 21604 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 15:24:57,691 DEBUG functional 15080 21604 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 15:24:57,692 DEBUG functional 15080 21604 
def chunks(task, it, n):
    return 1

2023-06-29 15:24:57,692 DEBUG functional 15080 21604 
def debug_task(self):
    return 1

2023-06-29 15:24:57,693 DEBUG functional 15080 21604 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 15:24:57,693 DEBUG functional 15080 21604 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 15:24:57,693 DEBUG functional 15080 21604 
def xmap(task, it):
    return 1

2023-06-29 15:24:57,694 DEBUG functional 15080 21604 
def backend_cleanup():
    return 1

2023-06-29 15:24:57,694 DEBUG functional 15080 21604 
def chain(*args, **kwargs):
    return 1

2023-06-29 15:25:24,682 INFO autoreload 15080 15072 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 15:25:26,361 INFO autoreload 22216 16196 Watching for file changes with StatReloader
2023-06-29 15:25:31,283 DEBUG functional 7776 5672 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 15:25:31,283 DEBUG functional 7776 5672 
def chunks(task, it, n):
    return 1

2023-06-29 15:25:31,284 DEBUG functional 7776 5672 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 15:25:31,284 DEBUG functional 7776 5672 
def backend_cleanup():
    return 1

2023-06-29 15:25:31,284 DEBUG functional 7776 5672 
def debug_task(self):
    return 1

2023-06-29 15:25:31,285 DEBUG functional 7776 5672 
def db_update_task():
    return 1

2023-06-29 15:25:31,285 DEBUG functional 7776 5672 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 15:25:31,286 DEBUG functional 7776 5672 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 15:25:31,286 DEBUG functional 7776 5672 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 15:25:31,286 DEBUG functional 7776 5672 
def xmap(task, it):
    return 1

2023-06-29 15:25:31,287 DEBUG functional 7776 5672 
def chain(*args, **kwargs):
    return 1

2023-06-29 15:25:31,287 DEBUG functional 7776 5672 
def xstarmap(task, it):
    return 1

2023-06-29 15:25:31,287 DEBUG functional 7776 5672 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 15:25:40,974 DEBUG functional 22216 8416 
def xstarmap(task, it):
    return 1

2023-06-29 15:25:40,976 DEBUG functional 22216 8416 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 15:25:40,977 DEBUG functional 22216 8416 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 15:25:40,977 DEBUG functional 22216 8416 
def chunks(task, it, n):
    return 1

2023-06-29 15:25:40,977 DEBUG functional 22216 8416 
def debug_task(self):
    return 1

2023-06-29 15:25:40,978 DEBUG functional 22216 8416 
def db_update_task():
    return 1

2023-06-29 15:25:40,978 DEBUG functional 22216 8416 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 15:25:40,978 DEBUG functional 22216 8416 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 15:25:40,979 DEBUG functional 22216 8416 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 15:25:40,979 DEBUG functional 22216 8416 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 15:25:40,980 DEBUG functional 22216 8416 
def xmap(task, it):
    return 1

2023-06-29 15:25:40,980 DEBUG functional 22216 8416 
def backend_cleanup():
    return 1

2023-06-29 15:25:40,980 DEBUG functional 22216 8416 
def chain(*args, **kwargs):
    return 1

2023-06-29 15:26:09,910 INFO autoreload 22216 16196 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 15:26:11,601 INFO autoreload 20432 9148 Watching for file changes with StatReloader
2023-06-29 15:26:14,989 DEBUG functional 22488 20588 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 15:26:14,989 DEBUG functional 22488 20588 
def chunks(task, it, n):
    return 1

2023-06-29 15:26:14,990 DEBUG functional 22488 20588 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 15:26:14,990 DEBUG functional 22488 20588 
def backend_cleanup():
    return 1

2023-06-29 15:26:14,990 DEBUG functional 22488 20588 
def debug_task(self):
    return 1

2023-06-29 15:26:14,991 DEBUG functional 22488 20588 
def db_update_task():
    return 1

2023-06-29 15:26:14,991 DEBUG functional 22488 20588 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 15:26:14,991 DEBUG functional 22488 20588 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 15:26:14,992 DEBUG functional 22488 20588 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 15:26:14,992 DEBUG functional 22488 20588 
def xmap(task, it):
    return 1

2023-06-29 15:26:14,992 DEBUG functional 22488 20588 
def chain(*args, **kwargs):
    return 1

2023-06-29 15:26:14,993 DEBUG functional 22488 20588 
def xstarmap(task, it):
    return 1

2023-06-29 15:26:14,993 DEBUG functional 22488 20588 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 15:26:22,871 DEBUG functional 20432 19848 
def xstarmap(task, it):
    return 1

2023-06-29 15:26:22,873 DEBUG functional 20432 19848 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 15:26:22,873 DEBUG functional 20432 19848 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 15:26:22,873 DEBUG functional 20432 19848 
def chunks(task, it, n):
    return 1

2023-06-29 15:26:22,874 DEBUG functional 20432 19848 
def debug_task(self):
    return 1

2023-06-29 15:26:22,874 DEBUG functional 20432 19848 
def db_update_task():
    return 1

2023-06-29 15:26:22,874 DEBUG functional 20432 19848 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 15:26:22,875 DEBUG functional 20432 19848 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 15:26:22,875 DEBUG functional 20432 19848 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 15:26:22,876 DEBUG functional 20432 19848 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 15:26:22,876 DEBUG functional 20432 19848 
def xmap(task, it):
    return 1

2023-06-29 15:26:22,876 DEBUG functional 20432 19848 
def backend_cleanup():
    return 1

2023-06-29 15:26:22,877 DEBUG functional 20432 19848 
def chain(*args, **kwargs):
    return 1

2023-06-29 15:26:44,299 INFO autoreload 20432 9148 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 15:26:46,002 INFO autoreload 3620 8012 Watching for file changes with StatReloader
2023-06-29 15:26:49,952 DEBUG functional 17916 1948 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 15:26:49,953 DEBUG functional 17916 1948 
def chunks(task, it, n):
    return 1

2023-06-29 15:26:49,953 DEBUG functional 17916 1948 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 15:26:49,954 DEBUG functional 17916 1948 
def backend_cleanup():
    return 1

2023-06-29 15:26:49,954 DEBUG functional 17916 1948 
def debug_task(self):
    return 1

2023-06-29 15:26:49,954 DEBUG functional 17916 1948 
def db_update_task():
    return 1

2023-06-29 15:26:49,955 DEBUG functional 17916 1948 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 15:26:49,955 DEBUG functional 17916 1948 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 15:26:49,956 DEBUG functional 17916 1948 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 15:26:49,956 DEBUG functional 17916 1948 
def xmap(task, it):
    return 1

2023-06-29 15:26:49,956 DEBUG functional 17916 1948 
def chain(*args, **kwargs):
    return 1

2023-06-29 15:26:49,956 DEBUG functional 17916 1948 
def xstarmap(task, it):
    return 1

2023-06-29 15:26:49,957 DEBUG functional 17916 1948 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 15:26:55,248 DEBUG functional 3620 5992 
def xstarmap(task, it):
    return 1

2023-06-29 15:26:55,250 DEBUG functional 3620 5992 
def db_update_task():
    return 1

2023-06-29 15:26:55,251 DEBUG functional 3620 5992 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 15:26:55,251 DEBUG functional 3620 5992 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 15:26:55,251 DEBUG functional 3620 5992 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 15:26:55,252 DEBUG functional 3620 5992 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 15:26:55,252 DEBUG functional 3620 5992 
def chunks(task, it, n):
    return 1

2023-06-29 15:26:55,252 DEBUG functional 3620 5992 
def debug_task(self):
    return 1

2023-06-29 15:26:55,253 DEBUG functional 3620 5992 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 15:26:55,253 DEBUG functional 3620 5992 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 15:26:55,253 DEBUG functional 3620 5992 
def xmap(task, it):
    return 1

2023-06-29 15:26:55,254 DEBUG functional 3620 5992 
def backend_cleanup():
    return 1

2023-06-29 15:26:55,254 DEBUG functional 3620 5992 
def chain(*args, **kwargs):
    return 1

2023-06-29 15:27:40,317 INFO autoreload 3620 8012 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 15:27:41,899 INFO autoreload 7764 12284 Watching for file changes with StatReloader
2023-06-29 15:27:44,038 INFO autoreload 7764 12284 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 15:27:45,648 INFO autoreload 2688 9884 Watching for file changes with StatReloader
2023-06-29 15:27:48,901 DEBUG functional 13644 8604 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 15:27:48,901 DEBUG functional 13644 8604 
def chunks(task, it, n):
    return 1

2023-06-29 15:27:48,902 DEBUG functional 13644 8604 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 15:27:48,902 DEBUG functional 13644 8604 
def backend_cleanup():
    return 1

2023-06-29 15:27:48,902 DEBUG functional 13644 8604 
def debug_task(self):
    return 1

2023-06-29 15:27:48,903 DEBUG functional 13644 8604 
def db_update_task():
    return 1

2023-06-29 15:27:48,903 DEBUG functional 13644 8604 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 15:27:48,903 DEBUG functional 13644 8604 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 15:27:48,904 DEBUG functional 13644 8604 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 15:27:48,904 DEBUG functional 13644 8604 
def xmap(task, it):
    return 1

2023-06-29 15:27:48,904 DEBUG functional 13644 8604 
def chain(*args, **kwargs):
    return 1

2023-06-29 15:27:48,905 DEBUG functional 13644 8604 
def xstarmap(task, it):
    return 1

2023-06-29 15:27:48,905 DEBUG functional 13644 8604 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 15:27:54,560 DEBUG functional 2688 14168 
def xstarmap(task, it):
    return 1

2023-06-29 15:27:54,562 DEBUG functional 2688 14168 
def db_update_task():
    return 1

2023-06-29 15:27:54,562 DEBUG functional 2688 14168 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 15:27:54,563 DEBUG functional 2688 14168 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 15:27:54,563 DEBUG functional 2688 14168 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 15:27:54,563 DEBUG functional 2688 14168 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 15:27:54,564 DEBUG functional 2688 14168 
def chunks(task, it, n):
    return 1

2023-06-29 15:27:54,564 DEBUG functional 2688 14168 
def debug_task(self):
    return 1

2023-06-29 15:27:54,564 DEBUG functional 2688 14168 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 15:27:54,565 DEBUG functional 2688 14168 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 15:27:54,565 DEBUG functional 2688 14168 
def xmap(task, it):
    return 1

2023-06-29 15:27:54,565 DEBUG functional 2688 14168 
def backend_cleanup():
    return 1

2023-06-29 15:27:54,566 DEBUG functional 2688 14168 
def chain(*args, **kwargs):
    return 1

2023-06-29 16:09:03,739 INFO autoreload 15832 16284 Watching for file changes with StatReloader
2023-06-29 16:09:45,203 INFO autoreload 15832 16284 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 16:09:46,815 INFO autoreload 13584 8516 Watching for file changes with StatReloader
2023-06-29 16:09:51,311 DEBUG functional 14484 14320 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 16:09:51,311 DEBUG functional 14484 14320 
def chunks(task, it, n):
    return 1

2023-06-29 16:09:51,312 DEBUG functional 14484 14320 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 16:09:51,312 DEBUG functional 14484 14320 
def backend_cleanup():
    return 1

2023-06-29 16:09:51,313 DEBUG functional 14484 14320 
def debug_task(self):
    return 1

2023-06-29 16:09:51,313 DEBUG functional 14484 14320 
def db_update_task():
    return 1

2023-06-29 16:09:51,314 DEBUG functional 14484 14320 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 16:09:51,314 DEBUG functional 14484 14320 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 16:09:51,314 DEBUG functional 14484 14320 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 16:09:51,315 DEBUG functional 14484 14320 
def xmap(task, it):
    return 1

2023-06-29 16:09:51,315 DEBUG functional 14484 14320 
def chain(*args, **kwargs):
    return 1

2023-06-29 16:09:51,315 DEBUG functional 14484 14320 
def xstarmap(task, it):
    return 1

2023-06-29 16:09:51,316 DEBUG functional 14484 14320 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 16:09:59,569 DEBUG functional 13584 9152 
def xstarmap(task, it):
    return 1

2023-06-29 16:09:59,571 DEBUG functional 13584 9152 
def db_update_task():
    return 1

2023-06-29 16:09:59,571 DEBUG functional 13584 9152 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 16:09:59,572 DEBUG functional 13584 9152 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 16:09:59,572 DEBUG functional 13584 9152 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 16:09:59,572 DEBUG functional 13584 9152 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 16:09:59,573 DEBUG functional 13584 9152 
def chunks(task, it, n):
    return 1

2023-06-29 16:09:59,573 DEBUG functional 13584 9152 
def debug_task(self):
    return 1

2023-06-29 16:09:59,573 DEBUG functional 13584 9152 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 16:09:59,574 DEBUG functional 13584 9152 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 16:09:59,574 DEBUG functional 13584 9152 
def xmap(task, it):
    return 1

2023-06-29 16:09:59,574 DEBUG functional 13584 9152 
def backend_cleanup():
    return 1

2023-06-29 16:09:59,575 DEBUG functional 13584 9152 
def chain(*args, **kwargs):
    return 1

2023-06-29 16:11:04,702 INFO autoreload 13584 8516 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 16:11:06,289 INFO autoreload 7992 21772 Watching for file changes with StatReloader
2023-06-29 16:11:10,104 DEBUG functional 7724 9192 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 16:11:10,104 DEBUG functional 7724 9192 
def chunks(task, it, n):
    return 1

2023-06-29 16:11:10,105 DEBUG functional 7724 9192 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 16:11:10,105 DEBUG functional 7724 9192 
def backend_cleanup():
    return 1

2023-06-29 16:11:10,105 DEBUG functional 7724 9192 
def debug_task(self):
    return 1

2023-06-29 16:11:10,106 DEBUG functional 7724 9192 
def db_update_task():
    return 1

2023-06-29 16:11:10,106 DEBUG functional 7724 9192 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 16:11:10,107 DEBUG functional 7724 9192 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 16:11:10,107 DEBUG functional 7724 9192 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 16:11:10,107 DEBUG functional 7724 9192 
def xmap(task, it):
    return 1

2023-06-29 16:11:10,108 DEBUG functional 7724 9192 
def chain(*args, **kwargs):
    return 1

2023-06-29 16:11:10,108 DEBUG functional 7724 9192 
def xstarmap(task, it):
    return 1

2023-06-29 16:11:10,108 DEBUG functional 7724 9192 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 16:11:15,529 DEBUG functional 7992 22164 
def xstarmap(task, it):
    return 1

2023-06-29 16:11:15,531 DEBUG functional 7992 22164 
def db_update_task():
    return 1

2023-06-29 16:11:15,531 DEBUG functional 7992 22164 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 16:11:15,532 DEBUG functional 7992 22164 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 16:11:15,532 DEBUG functional 7992 22164 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 16:11:15,532 DEBUG functional 7992 22164 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 16:11:15,533 DEBUG functional 7992 22164 
def chunks(task, it, n):
    return 1

2023-06-29 16:11:15,533 DEBUG functional 7992 22164 
def debug_task(self):
    return 1

2023-06-29 16:11:15,533 DEBUG functional 7992 22164 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 16:11:15,534 DEBUG functional 7992 22164 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 16:11:15,534 DEBUG functional 7992 22164 
def xmap(task, it):
    return 1

2023-06-29 16:11:15,535 DEBUG functional 7992 22164 
def backend_cleanup():
    return 1

2023-06-29 16:11:15,535 DEBUG functional 7992 22164 
def chain(*args, **kwargs):
    return 1

2023-06-29 21:58:54,880 INFO autoreload 9000 11620 Watching for file changes with StatReloader
2023-06-29 21:59:29,255 DEBUG functional 19444 11540 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 21:59:29,256 DEBUG functional 19444 11540 
def chunks(task, it, n):
    return 1

2023-06-29 21:59:29,256 DEBUG functional 19444 11540 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 21:59:29,257 DEBUG functional 19444 11540 
def backend_cleanup():
    return 1

2023-06-29 21:59:29,257 DEBUG functional 19444 11540 
def debug_task(self):
    return 1

2023-06-29 21:59:29,257 DEBUG functional 19444 11540 
def db_update_task():
    return 1

2023-06-29 21:59:29,258 DEBUG functional 19444 11540 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 21:59:29,258 DEBUG functional 19444 11540 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 21:59:29,258 DEBUG functional 19444 11540 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 21:59:29,259 DEBUG functional 19444 11540 
def xmap(task, it):
    return 1

2023-06-29 21:59:29,259 DEBUG functional 19444 11540 
def chain(*args, **kwargs):
    return 1

2023-06-29 21:59:29,259 DEBUG functional 19444 11540 
def xstarmap(task, it):
    return 1

2023-06-29 21:59:29,260 DEBUG functional 19444 11540 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 21:59:38,244 DEBUG functional 9000 18916 
def xstarmap(task, it):
    return 1

2023-06-29 21:59:38,246 DEBUG functional 9000 18916 
def db_update_task():
    return 1

2023-06-29 21:59:38,246 DEBUG functional 9000 18916 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 21:59:38,246 DEBUG functional 9000 18916 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 21:59:38,247 DEBUG functional 9000 18916 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 21:59:38,247 DEBUG functional 9000 18916 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 21:59:38,247 DEBUG functional 9000 18916 
def chunks(task, it, n):
    return 1

2023-06-29 21:59:38,248 DEBUG functional 9000 18916 
def debug_task(self):
    return 1

2023-06-29 21:59:38,248 DEBUG functional 9000 18916 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 21:59:38,248 DEBUG functional 9000 18916 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 21:59:38,249 DEBUG functional 9000 18916 
def xmap(task, it):
    return 1

2023-06-29 21:59:38,249 DEBUG functional 9000 18916 
def backend_cleanup():
    return 1

2023-06-29 21:59:38,249 DEBUG functional 9000 18916 
def chain(*args, **kwargs):
    return 1

2023-06-29 22:03:07,156 DEBUG functional 10284 19164 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 22:03:07,157 DEBUG functional 10284 19164 
def backend_cleanup():
    return 1

2023-06-29 22:03:07,157 DEBUG functional 10284 19164 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 22:03:07,157 DEBUG functional 10284 19164 
def db_update_task():
    return 1

2023-06-29 22:03:07,158 DEBUG functional 10284 19164 
def xmap(task, it):
    return 1

2023-06-29 22:03:07,158 DEBUG functional 10284 19164 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 22:03:07,158 DEBUG functional 10284 19164 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 22:03:07,159 DEBUG functional 10284 19164 
def chain(*args, **kwargs):
    return 1

2023-06-29 22:03:07,159 DEBUG functional 10284 19164 
def debug_task(self):
    return 1

2023-06-29 22:03:07,159 DEBUG functional 10284 19164 
def xstarmap(task, it):
    return 1

2023-06-29 22:03:07,160 DEBUG functional 10284 19164 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 22:03:07,160 DEBUG functional 10284 19164 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 22:03:07,161 DEBUG functional 10284 19164 
def chunks(task, it, n):
    return 1

2023-06-29 22:03:15,398 DEBUG functional 4256 16964 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 22:03:15,398 DEBUG functional 4256 16964 
def chunks(task, it, n):
    return 1

2023-06-29 22:03:15,399 DEBUG functional 4256 16964 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 22:03:15,399 DEBUG functional 4256 16964 
def backend_cleanup():
    return 1

2023-06-29 22:03:15,400 DEBUG functional 4256 16964 
def debug_task(self):
    return 1

2023-06-29 22:03:15,400 DEBUG functional 4256 16964 
def db_update_task():
    return 1

2023-06-29 22:03:15,400 DEBUG functional 4256 16964 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 22:03:15,401 DEBUG functional 4256 16964 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 22:03:15,401 DEBUG functional 4256 16964 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 22:03:15,401 DEBUG functional 4256 16964 
def xmap(task, it):
    return 1

2023-06-29 22:03:15,402 DEBUG functional 4256 16964 
def chain(*args, **kwargs):
    return 1

2023-06-29 22:03:15,402 DEBUG functional 4256 16964 
def xstarmap(task, it):
    return 1

2023-06-29 22:03:15,402 DEBUG functional 4256 16964 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 22:03:40,682 INFO autoreload 9000 11620 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 22:03:42,188 INFO autoreload 5632 6560 Watching for file changes with StatReloader
2023-06-29 22:03:44,316 INFO autoreload 5632 6560 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 22:03:45,817 INFO autoreload 7680 11740 Watching for file changes with StatReloader
2023-06-29 22:03:51,306 DEBUG functional 19896 15816 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 22:03:51,307 DEBUG functional 19896 15816 
def chunks(task, it, n):
    return 1

2023-06-29 22:03:51,307 DEBUG functional 19896 15816 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 22:03:51,308 DEBUG functional 19896 15816 
def backend_cleanup():
    return 1

2023-06-29 22:03:51,308 DEBUG functional 19896 15816 
def debug_task(self):
    return 1

2023-06-29 22:03:51,308 DEBUG functional 19896 15816 
def db_update_task():
    return 1

2023-06-29 22:03:51,309 DEBUG functional 19896 15816 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 22:03:51,309 DEBUG functional 19896 15816 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 22:03:51,310 DEBUG functional 19896 15816 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 22:03:51,310 DEBUG functional 19896 15816 
def xmap(task, it):
    return 1

2023-06-29 22:03:51,310 DEBUG functional 19896 15816 
def chain(*args, **kwargs):
    return 1

2023-06-29 22:03:51,311 DEBUG functional 19896 15816 
def xstarmap(task, it):
    return 1

2023-06-29 22:03:51,311 DEBUG functional 19896 15816 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 22:03:59,803 DEBUG functional 7680 6200 
def xstarmap(task, it):
    return 1

2023-06-29 22:03:59,805 DEBUG functional 7680 6200 
def db_update_task():
    return 1

2023-06-29 22:03:59,805 DEBUG functional 7680 6200 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 22:03:59,806 DEBUG functional 7680 6200 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 22:03:59,806 DEBUG functional 7680 6200 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 22:03:59,806 DEBUG functional 7680 6200 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 22:03:59,807 DEBUG functional 7680 6200 
def chunks(task, it, n):
    return 1

2023-06-29 22:03:59,807 DEBUG functional 7680 6200 
def debug_task(self):
    return 1

2023-06-29 22:03:59,807 DEBUG functional 7680 6200 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 22:03:59,808 DEBUG functional 7680 6200 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 22:03:59,808 DEBUG functional 7680 6200 
def xmap(task, it):
    return 1

2023-06-29 22:03:59,808 DEBUG functional 7680 6200 
def backend_cleanup():
    return 1

2023-06-29 22:03:59,809 DEBUG functional 7680 6200 
def chain(*args, **kwargs):
    return 1

2023-06-29 22:04:23,314 INFO autoreload 7680 11740 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 22:04:24,926 INFO autoreload 8188 13548 Watching for file changes with StatReloader
2023-06-29 22:04:27,712 DEBUG functional 8436 18916 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 22:04:27,712 DEBUG functional 8436 18916 
def db_update_task():
    return 1

2023-06-29 22:04:27,712 DEBUG functional 8436 18916 
def chunks(task, it, n):
    return 1

2023-06-29 22:04:27,713 DEBUG functional 8436 18916 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 22:04:27,713 DEBUG functional 8436 18916 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 22:04:27,714 DEBUG functional 8436 18916 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 22:04:27,714 DEBUG functional 8436 18916 
def backend_cleanup():
    return 1

2023-06-29 22:04:27,715 DEBUG functional 8436 18916 
def debug_task(self):
    return 1

2023-06-29 22:04:27,715 DEBUG functional 8436 18916 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 22:04:27,715 DEBUG functional 8436 18916 
def xmap(task, it):
    return 1

2023-06-29 22:04:27,716 DEBUG functional 8436 18916 
def chain(*args, **kwargs):
    return 1

2023-06-29 22:04:27,716 DEBUG functional 8436 18916 
def xstarmap(task, it):
    return 1

2023-06-29 22:04:27,716 DEBUG functional 8436 18916 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 22:04:35,014 DEBUG functional 8188 9696 
def xstarmap(task, it):
    return 1

2023-06-29 22:04:35,016 DEBUG functional 8188 9696 
def db_update_task():
    return 1

2023-06-29 22:04:35,016 DEBUG functional 8188 9696 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 22:04:35,016 DEBUG functional 8188 9696 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 22:04:35,017 DEBUG functional 8188 9696 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 22:04:35,017 DEBUG functional 8188 9696 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 22:04:35,017 DEBUG functional 8188 9696 
def chunks(task, it, n):
    return 1

2023-06-29 22:04:35,018 DEBUG functional 8188 9696 
def debug_task(self):
    return 1

2023-06-29 22:04:35,018 DEBUG functional 8188 9696 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 22:04:35,019 DEBUG functional 8188 9696 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 22:04:35,019 DEBUG functional 8188 9696 
def xmap(task, it):
    return 1

2023-06-29 22:04:35,019 DEBUG functional 8188 9696 
def backend_cleanup():
    return 1

2023-06-29 22:04:35,020 DEBUG functional 8188 9696 
def chain(*args, **kwargs):
    return 1

2023-06-29 22:05:12,716 INFO autoreload 8188 13548 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 22:05:14,352 INFO autoreload 11088 15128 Watching for file changes with StatReloader
2023-06-29 22:05:18,718 DEBUG functional 8152 14508 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 22:05:18,718 DEBUG functional 8152 14508 
def db_update_task():
    return 1

2023-06-29 22:05:18,718 DEBUG functional 8152 14508 
def chunks(task, it, n):
    return 1

2023-06-29 22:05:18,719 DEBUG functional 8152 14508 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 22:05:18,719 DEBUG functional 8152 14508 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 22:05:18,720 DEBUG functional 8152 14508 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 22:05:18,720 DEBUG functional 8152 14508 
def backend_cleanup():
    return 1

2023-06-29 22:05:18,721 DEBUG functional 8152 14508 
def debug_task(self):
    return 1

2023-06-29 22:05:18,721 DEBUG functional 8152 14508 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 22:05:18,721 DEBUG functional 8152 14508 
def xmap(task, it):
    return 1

2023-06-29 22:05:18,722 DEBUG functional 8152 14508 
def chain(*args, **kwargs):
    return 1

2023-06-29 22:05:18,722 DEBUG functional 8152 14508 
def xstarmap(task, it):
    return 1

2023-06-29 22:05:18,722 DEBUG functional 8152 14508 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 22:05:24,450 DEBUG functional 11088 10808 
def xstarmap(task, it):
    return 1

2023-06-29 22:05:24,451 DEBUG functional 11088 10808 
def db_update_task():
    return 1

2023-06-29 22:05:24,452 DEBUG functional 11088 10808 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 22:05:24,452 DEBUG functional 11088 10808 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 22:05:24,452 DEBUG functional 11088 10808 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 22:05:24,453 DEBUG functional 11088 10808 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 22:05:24,453 DEBUG functional 11088 10808 
def chunks(task, it, n):
    return 1

2023-06-29 22:05:24,453 DEBUG functional 11088 10808 
def debug_task(self):
    return 1

2023-06-29 22:05:24,454 DEBUG functional 11088 10808 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 22:05:24,454 DEBUG functional 11088 10808 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 22:05:24,455 DEBUG functional 11088 10808 
def xmap(task, it):
    return 1

2023-06-29 22:05:24,455 DEBUG functional 11088 10808 
def backend_cleanup():
    return 1

2023-06-29 22:05:24,456 DEBUG functional 11088 10808 
def chain(*args, **kwargs):
    return 1

2023-06-29 22:05:49,336 INFO autoreload 11088 15128 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-29 22:05:51,034 INFO autoreload 15276 5784 Watching for file changes with StatReloader
2023-06-29 22:05:55,460 DEBUG functional 8680 20460 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 22:05:55,461 DEBUG functional 8680 20460 
def db_update_task():
    return 1

2023-06-29 22:05:55,461 DEBUG functional 8680 20460 
def chunks(task, it, n):
    return 1

2023-06-29 22:05:55,462 DEBUG functional 8680 20460 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 22:05:55,462 DEBUG functional 8680 20460 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 22:05:55,462 DEBUG functional 8680 20460 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 22:05:55,463 DEBUG functional 8680 20460 
def backend_cleanup():
    return 1

2023-06-29 22:05:55,463 DEBUG functional 8680 20460 
def debug_task(self):
    return 1

2023-06-29 22:05:55,464 DEBUG functional 8680 20460 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 22:05:55,464 DEBUG functional 8680 20460 
def xmap(task, it):
    return 1

2023-06-29 22:05:55,464 DEBUG functional 8680 20460 
def chain(*args, **kwargs):
    return 1

2023-06-29 22:05:55,465 DEBUG functional 8680 20460 
def xstarmap(task, it):
    return 1

2023-06-29 22:05:55,465 DEBUG functional 8680 20460 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 22:05:59,875 DEBUG functional 15276 7248 
def xstarmap(task, it):
    return 1

2023-06-29 22:05:59,877 DEBUG functional 15276 7248 
def db_update_task():
    return 1

2023-06-29 22:05:59,877 DEBUG functional 15276 7248 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 22:05:59,877 DEBUG functional 15276 7248 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 22:05:59,878 DEBUG functional 15276 7248 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 22:05:59,878 DEBUG functional 15276 7248 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 22:05:59,878 DEBUG functional 15276 7248 
def chunks(task, it, n):
    return 1

2023-06-29 22:05:59,879 DEBUG functional 15276 7248 
def debug_task(self):
    return 1

2023-06-29 22:05:59,879 DEBUG functional 15276 7248 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 22:05:59,880 DEBUG functional 15276 7248 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 22:05:59,880 DEBUG functional 15276 7248 
def xmap(task, it):
    return 1

2023-06-29 22:05:59,880 DEBUG functional 15276 7248 
def backend_cleanup():
    return 1

2023-06-29 22:05:59,881 DEBUG functional 15276 7248 
def chain(*args, **kwargs):
    return 1

2023-06-29 22:24:34,967 INFO autoreload 15416 22480 Watching for file changes with StatReloader
2023-06-29 22:25:10,731 DEBUG functional 16824 19792 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 22:25:10,732 DEBUG functional 16824 19792 
def db_update_task():
    return 1

2023-06-29 22:25:10,732 DEBUG functional 16824 19792 
def chunks(task, it, n):
    return 1

2023-06-29 22:25:10,732 DEBUG functional 16824 19792 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 22:25:10,733 DEBUG functional 16824 19792 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 22:25:10,733 DEBUG functional 16824 19792 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 22:25:10,734 DEBUG functional 16824 19792 
def backend_cleanup():
    return 1

2023-06-29 22:25:10,734 DEBUG functional 16824 19792 
def debug_task(self):
    return 1

2023-06-29 22:25:10,735 DEBUG functional 16824 19792 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 22:25:10,735 DEBUG functional 16824 19792 
def xmap(task, it):
    return 1

2023-06-29 22:25:10,735 DEBUG functional 16824 19792 
def chain(*args, **kwargs):
    return 1

2023-06-29 22:25:10,736 DEBUG functional 16824 19792 
def xstarmap(task, it):
    return 1

2023-06-29 22:25:10,736 DEBUG functional 16824 19792 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 22:25:15,790 DEBUG functional 15416 17720 
def xstarmap(task, it):
    return 1

2023-06-29 22:25:15,791 DEBUG functional 15416 17720 
def db_update_task():
    return 1

2023-06-29 22:25:15,792 DEBUG functional 15416 17720 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-29 22:25:15,792 DEBUG functional 15416 17720 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-29 22:25:15,793 DEBUG functional 15416 17720 
def place_order_task(*args, **kwds):
    return 1

2023-06-29 22:25:15,793 DEBUG functional 15416 17720 
def close_position_task(*args, **kwds):
    return 1

2023-06-29 22:25:15,793 DEBUG functional 15416 17720 
def chunks(task, it, n):
    return 1

2023-06-29 22:25:15,794 DEBUG functional 15416 17720 
def debug_task(self):
    return 1

2023-06-29 22:25:15,794 DEBUG functional 15416 17720 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-29 22:25:15,794 DEBUG functional 15416 17720 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-29 22:25:15,795 DEBUG functional 15416 17720 
def xmap(task, it):
    return 1

2023-06-29 22:25:15,795 DEBUG functional 15416 17720 
def backend_cleanup():
    return 1

2023-06-29 22:25:15,795 DEBUG functional 15416 17720 
def chain(*args, **kwargs):
    return 1

2023-06-30 11:24:05,529 INFO autoreload 4028 17892 Watching for file changes with StatReloader
2023-06-30 11:24:28,407 DEBUG functional 21144 22112 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 11:24:28,407 DEBUG functional 21144 22112 
def db_update_task():
    return 1

2023-06-30 11:24:28,408 DEBUG functional 21144 22112 
def chunks(task, it, n):
    return 1

2023-06-30 11:24:28,408 DEBUG functional 21144 22112 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 11:24:28,408 DEBUG functional 21144 22112 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 11:24:28,409 DEBUG functional 21144 22112 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 11:24:28,409 DEBUG functional 21144 22112 
def backend_cleanup():
    return 1

2023-06-30 11:24:28,410 DEBUG functional 21144 22112 
def debug_task(self):
    return 1

2023-06-30 11:24:28,410 DEBUG functional 21144 22112 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 11:24:28,410 DEBUG functional 21144 22112 
def xmap(task, it):
    return 1

2023-06-30 11:24:28,411 DEBUG functional 21144 22112 
def chain(*args, **kwargs):
    return 1

2023-06-30 11:24:28,411 DEBUG functional 21144 22112 
def xstarmap(task, it):
    return 1

2023-06-30 11:24:28,411 DEBUG functional 21144 22112 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 11:24:41,158 DEBUG functional 4028 16644 
def xstarmap(task, it):
    return 1

2023-06-30 11:24:41,160 DEBUG functional 4028 16644 
def db_update_task():
    return 1

2023-06-30 11:24:41,160 DEBUG functional 4028 16644 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 11:24:41,160 DEBUG functional 4028 16644 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 11:24:41,161 DEBUG functional 4028 16644 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 11:24:41,161 DEBUG functional 4028 16644 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 11:24:41,161 DEBUG functional 4028 16644 
def chunks(task, it, n):
    return 1

2023-06-30 11:24:41,162 DEBUG functional 4028 16644 
def debug_task(self):
    return 1

2023-06-30 11:24:41,162 DEBUG functional 4028 16644 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 11:24:41,163 DEBUG functional 4028 16644 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 11:24:41,163 DEBUG functional 4028 16644 
def xmap(task, it):
    return 1

2023-06-30 11:24:41,163 DEBUG functional 4028 16644 
def backend_cleanup():
    return 1

2023-06-30 11:24:41,163 DEBUG functional 4028 16644 
def chain(*args, **kwargs):
    return 1

2023-06-30 11:26:50,471 INFO autoreload 4028 17892 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 11:26:52,266 INFO autoreload 3088 16684 Watching for file changes with StatReloader
2023-06-30 11:26:57,027 DEBUG functional 17720 21500 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 11:26:57,028 DEBUG functional 17720 21500 
def db_update_task():
    return 1

2023-06-30 11:26:57,029 DEBUG functional 17720 21500 
def chunks(task, it, n):
    return 1

2023-06-30 11:26:57,029 DEBUG functional 17720 21500 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 11:26:57,030 DEBUG functional 17720 21500 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 11:26:57,030 DEBUG functional 17720 21500 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 11:26:57,030 DEBUG functional 17720 21500 
def backend_cleanup():
    return 1

2023-06-30 11:26:57,031 DEBUG functional 17720 21500 
def debug_task(self):
    return 1

2023-06-30 11:26:57,031 DEBUG functional 17720 21500 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 11:26:57,032 DEBUG functional 17720 21500 
def xmap(task, it):
    return 1

2023-06-30 11:26:57,032 DEBUG functional 17720 21500 
def chain(*args, **kwargs):
    return 1

2023-06-30 11:26:57,033 DEBUG functional 17720 21500 
def xstarmap(task, it):
    return 1

2023-06-30 11:26:57,034 DEBUG functional 17720 21500 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 11:27:04,464 DEBUG functional 3088 7372 
def xstarmap(task, it):
    return 1

2023-06-30 11:27:04,465 DEBUG functional 3088 7372 
def db_update_task():
    return 1

2023-06-30 11:27:04,466 DEBUG functional 3088 7372 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 11:27:04,466 DEBUG functional 3088 7372 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 11:27:04,466 DEBUG functional 3088 7372 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 11:27:04,467 DEBUG functional 3088 7372 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 11:27:04,467 DEBUG functional 3088 7372 
def chunks(task, it, n):
    return 1

2023-06-30 11:27:04,467 DEBUG functional 3088 7372 
def debug_task(self):
    return 1

2023-06-30 11:27:04,468 DEBUG functional 3088 7372 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 11:27:04,468 DEBUG functional 3088 7372 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 11:27:04,469 DEBUG functional 3088 7372 
def xmap(task, it):
    return 1

2023-06-30 11:27:04,469 DEBUG functional 3088 7372 
def backend_cleanup():
    return 1

2023-06-30 11:27:04,469 DEBUG functional 3088 7372 
def chain(*args, **kwargs):
    return 1

2023-06-30 11:28:26,494 INFO autoreload 3088 16684 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 11:28:28,087 INFO autoreload 3668 15352 Watching for file changes with StatReloader
2023-06-30 11:29:08,994 INFO autoreload 3668 15352 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 11:29:10,651 INFO autoreload 19604 4152 Watching for file changes with StatReloader
2023-06-30 11:35:15,651 DEBUG functional 19916 20408 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 11:35:15,651 DEBUG functional 19916 20408 
def db_update_task():
    return 1

2023-06-30 11:35:15,652 DEBUG functional 19916 20408 
def chunks(task, it, n):
    return 1

2023-06-30 11:35:15,652 DEBUG functional 19916 20408 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 11:35:15,653 DEBUG functional 19916 20408 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 11:35:15,653 DEBUG functional 19916 20408 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 11:35:15,654 DEBUG functional 19916 20408 
def backend_cleanup():
    return 1

2023-06-30 11:35:15,654 DEBUG functional 19916 20408 
def debug_task(self):
    return 1

2023-06-30 11:35:15,654 DEBUG functional 19916 20408 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 11:35:15,655 DEBUG functional 19916 20408 
def xmap(task, it):
    return 1

2023-06-30 11:35:15,655 DEBUG functional 19916 20408 
def chain(*args, **kwargs):
    return 1

2023-06-30 11:35:15,655 DEBUG functional 19916 20408 
def xstarmap(task, it):
    return 1

2023-06-30 11:35:15,656 DEBUG functional 19916 20408 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 11:35:23,778 DEBUG functional 19604 7516 
def xstarmap(task, it):
    return 1

2023-06-30 11:35:23,780 DEBUG functional 19604 7516 
def db_update_task():
    return 1

2023-06-30 11:35:23,780 DEBUG functional 19604 7516 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 11:35:23,780 DEBUG functional 19604 7516 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 11:35:23,781 DEBUG functional 19604 7516 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 11:35:23,781 DEBUG functional 19604 7516 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 11:35:23,781 DEBUG functional 19604 7516 
def chunks(task, it, n):
    return 1

2023-06-30 11:35:23,782 DEBUG functional 19604 7516 
def debug_task(self):
    return 1

2023-06-30 11:35:23,782 DEBUG functional 19604 7516 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 11:35:23,783 DEBUG functional 19604 7516 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 11:35:23,783 DEBUG functional 19604 7516 
def xmap(task, it):
    return 1

2023-06-30 11:35:23,783 DEBUG functional 19604 7516 
def backend_cleanup():
    return 1

2023-06-30 11:35:23,784 DEBUG functional 19604 7516 
def chain(*args, **kwargs):
    return 1

2023-06-30 11:41:46,389 INFO autoreload 19604 4152 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 11:41:48,016 INFO autoreload 14168 18936 Watching for file changes with StatReloader
2023-06-30 11:41:56,494 DEBUG functional 14168 18260 
def xstarmap(task, it):
    return 1

2023-06-30 11:41:56,496 DEBUG functional 14168 18260 
def db_update_task():
    return 1

2023-06-30 11:41:56,496 DEBUG functional 14168 18260 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 11:41:56,497 DEBUG functional 14168 18260 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 11:41:56,497 DEBUG functional 14168 18260 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 11:41:56,497 DEBUG functional 14168 18260 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 11:41:56,498 DEBUG functional 14168 18260 
def chunks(task, it, n):
    return 1

2023-06-30 11:41:56,498 DEBUG functional 14168 18260 
def debug_task(self):
    return 1

2023-06-30 11:41:56,499 DEBUG functional 14168 18260 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 11:41:56,499 DEBUG functional 14168 18260 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 11:41:56,499 DEBUG functional 14168 18260 
def xmap(task, it):
    return 1

2023-06-30 11:41:56,500 DEBUG functional 14168 18260 
def backend_cleanup():
    return 1

2023-06-30 11:41:56,500 DEBUG functional 14168 18260 
def chain(*args, **kwargs):
    return 1

2023-06-30 11:42:04,100 DEBUG functional 5076 18364 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 11:42:04,100 DEBUG functional 5076 18364 
def db_update_task():
    return 1

2023-06-30 11:42:04,101 DEBUG functional 5076 18364 
def chunks(task, it, n):
    return 1

2023-06-30 11:42:04,101 DEBUG functional 5076 18364 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 11:42:04,101 DEBUG functional 5076 18364 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 11:42:04,102 DEBUG functional 5076 18364 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 11:42:04,102 DEBUG functional 5076 18364 
def backend_cleanup():
    return 1

2023-06-30 11:42:04,103 DEBUG functional 5076 18364 
def debug_task(self):
    return 1

2023-06-30 11:42:04,103 DEBUG functional 5076 18364 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 11:42:04,103 DEBUG functional 5076 18364 
def xmap(task, it):
    return 1

2023-06-30 11:42:04,104 DEBUG functional 5076 18364 
def chain(*args, **kwargs):
    return 1

2023-06-30 11:42:04,104 DEBUG functional 5076 18364 
def xstarmap(task, it):
    return 1

2023-06-30 11:42:04,104 DEBUG functional 5076 18364 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 11:42:55,029 DEBUG functional 15296 13812 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 11:42:55,029 DEBUG functional 15296 13812 
def db_update_task():
    return 1

2023-06-30 11:42:55,029 DEBUG functional 15296 13812 
def chunks(task, it, n):
    return 1

2023-06-30 11:42:55,030 DEBUG functional 15296 13812 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 11:42:55,030 DEBUG functional 15296 13812 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 11:42:55,031 DEBUG functional 15296 13812 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 11:42:55,031 DEBUG functional 15296 13812 
def backend_cleanup():
    return 1

2023-06-30 11:42:55,031 DEBUG functional 15296 13812 
def debug_task(self):
    return 1

2023-06-30 11:42:55,032 DEBUG functional 15296 13812 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 11:42:55,032 DEBUG functional 15296 13812 
def xmap(task, it):
    return 1

2023-06-30 11:42:55,033 DEBUG functional 15296 13812 
def chain(*args, **kwargs):
    return 1

2023-06-30 11:42:55,033 DEBUG functional 15296 13812 
def xstarmap(task, it):
    return 1

2023-06-30 11:42:55,033 DEBUG functional 15296 13812 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 11:44:04,822 DEBUG core 14168 20556 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 11:44:04,822 DEBUG core 14168 20556 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 11:44:05,063 WARNING log 14168 11512 Not Found: /favicon.ico
2023-06-30 11:54:53,911 INFO autoreload 14168 18936 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 11:54:55,445 INFO autoreload 12276 7608 Watching for file changes with StatReloader
2023-06-30 11:55:10,233 DEBUG functional 22096 10212 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 11:55:10,233 DEBUG functional 22096 10212 
def chunks(task, it, n):
    return 1

2023-06-30 11:55:10,234 DEBUG functional 22096 10212 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 11:55:10,234 DEBUG functional 22096 10212 
def backend_cleanup():
    return 1

2023-06-30 11:55:10,234 DEBUG functional 22096 10212 
def debug_task(self):
    return 1

2023-06-30 11:55:10,235 DEBUG functional 22096 10212 
def db_update_task():
    return 1

2023-06-30 11:55:10,235 DEBUG functional 22096 10212 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 11:55:10,236 DEBUG functional 22096 10212 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 11:55:10,236 DEBUG functional 22096 10212 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 11:55:10,236 DEBUG functional 22096 10212 
def xmap(task, it):
    return 1

2023-06-30 11:55:10,237 DEBUG functional 22096 10212 
def chain(*args, **kwargs):
    return 1

2023-06-30 11:55:10,237 DEBUG functional 22096 10212 
def xstarmap(task, it):
    return 1

2023-06-30 11:55:10,237 DEBUG functional 22096 10212 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 11:55:26,050 DEBUG functional 12276 2096 
def xstarmap(task, it):
    return 1

2023-06-30 11:55:26,052 DEBUG functional 12276 2096 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 11:55:26,052 DEBUG functional 12276 2096 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 11:55:26,052 DEBUG functional 12276 2096 
def chunks(task, it, n):
    return 1

2023-06-30 11:55:26,053 DEBUG functional 12276 2096 
def debug_task(self):
    return 1

2023-06-30 11:55:26,053 DEBUG functional 12276 2096 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 11:55:26,053 DEBUG functional 12276 2096 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 11:55:26,054 DEBUG functional 12276 2096 
def db_update_task():
    return 1

2023-06-30 11:55:26,054 DEBUG functional 12276 2096 
def xmap(task, it):
    return 1

2023-06-30 11:55:26,054 DEBUG functional 12276 2096 
def backend_cleanup():
    return 1

2023-06-30 11:55:26,055 DEBUG functional 12276 2096 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 11:55:26,055 DEBUG functional 12276 2096 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 11:55:26,055 DEBUG functional 12276 2096 
def chain(*args, **kwargs):
    return 1

2023-06-30 11:55:42,280 DEBUG core 12276 11724 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 11:55:42,281 DEBUG core 12276 11724 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 11:55:51,341 DEBUG functional 18552 17596 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 11:55:51,341 DEBUG functional 18552 17596 
def chunks(task, it, n):
    return 1

2023-06-30 11:55:51,342 DEBUG functional 18552 17596 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 11:55:51,342 DEBUG functional 18552 17596 
def backend_cleanup():
    return 1

2023-06-30 11:55:51,343 DEBUG functional 18552 17596 
def debug_task(self):
    return 1

2023-06-30 11:55:51,343 DEBUG functional 18552 17596 
def db_update_task():
    return 1

2023-06-30 11:55:51,343 DEBUG functional 18552 17596 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 11:55:51,344 DEBUG functional 18552 17596 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 11:55:51,344 DEBUG functional 18552 17596 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 11:55:51,344 DEBUG functional 18552 17596 
def xmap(task, it):
    return 1

2023-06-30 11:55:51,345 DEBUG functional 18552 17596 
def chain(*args, **kwargs):
    return 1

2023-06-30 11:55:51,345 DEBUG functional 18552 17596 
def xstarmap(task, it):
    return 1

2023-06-30 11:55:51,345 DEBUG functional 18552 17596 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 11:56:12,681 INFO autoreload 12276 7608 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 11:56:14,349 INFO autoreload 14728 13556 Watching for file changes with StatReloader
2023-06-30 11:56:21,957 INFO autoreload 14728 13556 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 11:56:23,646 INFO autoreload 15288 5868 Watching for file changes with StatReloader
2023-06-30 11:56:27,199 DEBUG functional 12380 7204 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 11:56:27,199 DEBUG functional 12380 7204 
def chunks(task, it, n):
    return 1

2023-06-30 11:56:27,200 DEBUG functional 12380 7204 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 11:56:27,200 DEBUG functional 12380 7204 
def backend_cleanup():
    return 1

2023-06-30 11:56:27,200 DEBUG functional 12380 7204 
def debug_task(self):
    return 1

2023-06-30 11:56:27,201 DEBUG functional 12380 7204 
def db_update_task():
    return 1

2023-06-30 11:56:27,201 DEBUG functional 12380 7204 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 11:56:27,201 DEBUG functional 12380 7204 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 11:56:27,202 DEBUG functional 12380 7204 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 11:56:27,202 DEBUG functional 12380 7204 
def xmap(task, it):
    return 1

2023-06-30 11:56:27,202 DEBUG functional 12380 7204 
def chain(*args, **kwargs):
    return 1

2023-06-30 11:56:27,203 DEBUG functional 12380 7204 
def xstarmap(task, it):
    return 1

2023-06-30 11:56:27,203 DEBUG functional 12380 7204 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 11:56:35,816 DEBUG functional 15288 19284 
def xstarmap(task, it):
    return 1

2023-06-30 11:56:35,818 DEBUG functional 15288 19284 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 11:56:35,818 DEBUG functional 15288 19284 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 11:56:35,818 DEBUG functional 15288 19284 
def chunks(task, it, n):
    return 1

2023-06-30 11:56:35,819 DEBUG functional 15288 19284 
def debug_task(self):
    return 1

2023-06-30 11:56:35,819 DEBUG functional 15288 19284 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 11:56:35,820 DEBUG functional 15288 19284 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 11:56:35,820 DEBUG functional 15288 19284 
def db_update_task():
    return 1

2023-06-30 11:56:35,820 DEBUG functional 15288 19284 
def xmap(task, it):
    return 1

2023-06-30 11:56:35,821 DEBUG functional 15288 19284 
def backend_cleanup():
    return 1

2023-06-30 11:56:35,821 DEBUG functional 15288 19284 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 11:56:35,821 DEBUG functional 15288 19284 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 11:56:35,822 DEBUG functional 15288 19284 
def chain(*args, **kwargs):
    return 1

2023-06-30 11:57:07,691 DEBUG core 15288 13972 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 11:57:07,691 DEBUG core 15288 13972 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 11:57:44,127 INFO autoreload 15288 5868 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 11:57:45,895 INFO autoreload 16860 19412 Watching for file changes with StatReloader
2023-06-30 11:57:54,274 DEBUG functional 19532 14476 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 11:57:54,275 DEBUG functional 19532 14476 
def chunks(task, it, n):
    return 1

2023-06-30 11:57:54,276 DEBUG functional 19532 14476 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 11:57:54,276 DEBUG functional 19532 14476 
def backend_cleanup():
    return 1

2023-06-30 11:57:54,277 DEBUG functional 19532 14476 
def debug_task(self):
    return 1

2023-06-30 11:57:54,277 DEBUG functional 19532 14476 
def db_update_task():
    return 1

2023-06-30 11:57:54,277 DEBUG functional 19532 14476 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 11:57:54,278 DEBUG functional 19532 14476 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 11:57:54,278 DEBUG functional 19532 14476 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 11:57:54,279 DEBUG functional 19532 14476 
def xmap(task, it):
    return 1

2023-06-30 11:57:54,279 DEBUG functional 19532 14476 
def chain(*args, **kwargs):
    return 1

2023-06-30 11:57:54,279 DEBUG functional 19532 14476 
def xstarmap(task, it):
    return 1

2023-06-30 11:57:54,280 DEBUG functional 19532 14476 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 11:57:58,884 DEBUG functional 16860 21852 
def xstarmap(task, it):
    return 1

2023-06-30 11:57:58,885 DEBUG functional 16860 21852 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 11:57:58,886 DEBUG functional 16860 21852 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 11:57:58,886 DEBUG functional 16860 21852 
def chunks(task, it, n):
    return 1

2023-06-30 11:57:58,886 DEBUG functional 16860 21852 
def debug_task(self):
    return 1

2023-06-30 11:57:58,887 DEBUG functional 16860 21852 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 11:57:58,887 DEBUG functional 16860 21852 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 11:57:58,888 DEBUG functional 16860 21852 
def db_update_task():
    return 1

2023-06-30 11:57:58,888 DEBUG functional 16860 21852 
def xmap(task, it):
    return 1

2023-06-30 11:57:58,888 DEBUG functional 16860 21852 
def backend_cleanup():
    return 1

2023-06-30 11:57:58,889 DEBUG functional 16860 21852 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 11:57:58,889 DEBUG functional 16860 21852 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 11:57:58,889 DEBUG functional 16860 21852 
def chain(*args, **kwargs):
    return 1

2023-06-30 11:58:28,925 INFO autoreload 16860 19412 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 11:58:30,451 INFO autoreload 11532 5088 Watching for file changes with StatReloader
2023-06-30 11:58:39,953 DEBUG functional 16656 5228 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 11:58:39,953 DEBUG functional 16656 5228 
def chunks(task, it, n):
    return 1

2023-06-30 11:58:39,954 DEBUG functional 16656 5228 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 11:58:39,954 DEBUG functional 16656 5228 
def backend_cleanup():
    return 1

2023-06-30 11:58:39,955 DEBUG functional 16656 5228 
def debug_task(self):
    return 1

2023-06-30 11:58:39,955 DEBUG functional 16656 5228 
def db_update_task():
    return 1

2023-06-30 11:58:39,956 DEBUG functional 16656 5228 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 11:58:39,956 DEBUG functional 16656 5228 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 11:58:39,956 DEBUG functional 16656 5228 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 11:58:39,957 DEBUG functional 16656 5228 
def xmap(task, it):
    return 1

2023-06-30 11:58:39,957 DEBUG functional 16656 5228 
def chain(*args, **kwargs):
    return 1

2023-06-30 11:58:39,957 DEBUG functional 16656 5228 
def xstarmap(task, it):
    return 1

2023-06-30 11:58:39,958 DEBUG functional 16656 5228 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 11:58:46,921 DEBUG functional 11532 21500 
def xstarmap(task, it):
    return 1

2023-06-30 11:58:46,923 DEBUG functional 11532 21500 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 11:58:46,923 DEBUG functional 11532 21500 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 11:58:46,924 DEBUG functional 11532 21500 
def chunks(task, it, n):
    return 1

2023-06-30 11:58:46,924 DEBUG functional 11532 21500 
def debug_task(self):
    return 1

2023-06-30 11:58:46,925 DEBUG functional 11532 21500 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 11:58:46,925 DEBUG functional 11532 21500 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 11:58:46,925 DEBUG functional 11532 21500 
def db_update_task():
    return 1

2023-06-30 11:58:46,926 DEBUG functional 11532 21500 
def xmap(task, it):
    return 1

2023-06-30 11:58:46,926 DEBUG functional 11532 21500 
def backend_cleanup():
    return 1

2023-06-30 11:58:46,926 DEBUG functional 11532 21500 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 11:58:46,927 DEBUG functional 11532 21500 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 11:58:46,927 DEBUG functional 11532 21500 
def chain(*args, **kwargs):
    return 1

2023-06-30 12:01:02,655 INFO autoreload 11532 5088 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 12:01:04,497 INFO autoreload 13928 16600 Watching for file changes with StatReloader
2023-06-30 12:01:08,834 DEBUG functional 6944 6324 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 12:01:08,835 DEBUG functional 6944 6324 
def chunks(task, it, n):
    return 1

2023-06-30 12:01:08,835 DEBUG functional 6944 6324 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 12:01:08,836 DEBUG functional 6944 6324 
def backend_cleanup():
    return 1

2023-06-30 12:01:08,836 DEBUG functional 6944 6324 
def debug_task(self):
    return 1

2023-06-30 12:01:08,836 DEBUG functional 6944 6324 
def db_update_task():
    return 1

2023-06-30 12:01:08,837 DEBUG functional 6944 6324 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 12:01:08,837 DEBUG functional 6944 6324 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 12:01:08,837 DEBUG functional 6944 6324 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 12:01:08,838 DEBUG functional 6944 6324 
def xmap(task, it):
    return 1

2023-06-30 12:01:08,838 DEBUG functional 6944 6324 
def chain(*args, **kwargs):
    return 1

2023-06-30 12:01:08,838 DEBUG functional 6944 6324 
def xstarmap(task, it):
    return 1

2023-06-30 12:01:08,839 DEBUG functional 6944 6324 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 12:01:19,326 DEBUG functional 13928 19720 
def xstarmap(task, it):
    return 1

2023-06-30 12:01:19,327 DEBUG functional 13928 19720 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 12:01:19,328 DEBUG functional 13928 19720 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 12:01:19,328 DEBUG functional 13928 19720 
def chunks(task, it, n):
    return 1

2023-06-30 12:01:19,328 DEBUG functional 13928 19720 
def debug_task(self):
    return 1

2023-06-30 12:01:19,329 DEBUG functional 13928 19720 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 12:01:19,329 DEBUG functional 13928 19720 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 12:01:19,330 DEBUG functional 13928 19720 
def db_update_task():
    return 1

2023-06-30 12:01:19,330 DEBUG functional 13928 19720 
def xmap(task, it):
    return 1

2023-06-30 12:01:19,330 DEBUG functional 13928 19720 
def backend_cleanup():
    return 1

2023-06-30 12:01:19,331 DEBUG functional 13928 19720 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 12:01:19,331 DEBUG functional 13928 19720 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 12:01:19,331 DEBUG functional 13928 19720 
def chain(*args, **kwargs):
    return 1

2023-06-30 12:01:58,726 INFO autoreload 13928 16600 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 12:02:00,415 INFO autoreload 14532 3604 Watching for file changes with StatReloader
2023-06-30 12:02:14,750 DEBUG functional 12316 19360 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 12:02:14,750 DEBUG functional 12316 19360 
def chunks(task, it, n):
    return 1

2023-06-30 12:02:14,751 DEBUG functional 12316 19360 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 12:02:14,751 DEBUG functional 12316 19360 
def backend_cleanup():
    return 1

2023-06-30 12:02:14,751 DEBUG functional 12316 19360 
def debug_task(self):
    return 1

2023-06-30 12:02:14,752 DEBUG functional 12316 19360 
def db_update_task():
    return 1

2023-06-30 12:02:14,752 DEBUG functional 12316 19360 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 12:02:14,752 DEBUG functional 12316 19360 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 12:02:14,753 DEBUG functional 12316 19360 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 12:02:14,753 DEBUG functional 12316 19360 
def xmap(task, it):
    return 1

2023-06-30 12:02:14,753 DEBUG functional 12316 19360 
def chain(*args, **kwargs):
    return 1

2023-06-30 12:02:14,754 DEBUG functional 12316 19360 
def xstarmap(task, it):
    return 1

2023-06-30 12:02:14,754 DEBUG functional 12316 19360 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 12:02:22,777 DEBUG functional 14532 9664 
def xstarmap(task, it):
    return 1

2023-06-30 12:02:22,779 DEBUG functional 14532 9664 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 12:02:22,779 DEBUG functional 14532 9664 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 12:02:22,779 DEBUG functional 14532 9664 
def chunks(task, it, n):
    return 1

2023-06-30 12:02:22,780 DEBUG functional 14532 9664 
def debug_task(self):
    return 1

2023-06-30 12:02:22,780 DEBUG functional 14532 9664 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 12:02:22,781 DEBUG functional 14532 9664 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 12:02:22,781 DEBUG functional 14532 9664 
def db_update_task():
    return 1

2023-06-30 12:02:22,781 DEBUG functional 14532 9664 
def xmap(task, it):
    return 1

2023-06-30 12:02:22,782 DEBUG functional 14532 9664 
def backend_cleanup():
    return 1

2023-06-30 12:02:22,782 DEBUG functional 14532 9664 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 12:02:22,782 DEBUG functional 14532 9664 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 12:02:22,783 DEBUG functional 14532 9664 
def chain(*args, **kwargs):
    return 1

2023-06-30 12:03:51,925 INFO autoreload 14532 3604 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 12:03:53,579 INFO autoreload 17752 14620 Watching for file changes with StatReloader
2023-06-30 12:04:10,877 INFO autoreload 17752 14620 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 12:04:12,604 INFO autoreload 8420 17224 Watching for file changes with StatReloader
2023-06-30 12:04:16,556 DEBUG functional 15676 16796 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 12:04:16,556 DEBUG functional 15676 16796 
def chunks(task, it, n):
    return 1

2023-06-30 12:04:16,557 DEBUG functional 15676 16796 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 12:04:16,557 DEBUG functional 15676 16796 
def backend_cleanup():
    return 1

2023-06-30 12:04:16,558 DEBUG functional 15676 16796 
def debug_task(self):
    return 1

2023-06-30 12:04:16,558 DEBUG functional 15676 16796 
def db_update_task():
    return 1

2023-06-30 12:04:16,558 DEBUG functional 15676 16796 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 12:04:16,559 DEBUG functional 15676 16796 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 12:04:16,559 DEBUG functional 15676 16796 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 12:04:16,559 DEBUG functional 15676 16796 
def xmap(task, it):
    return 1

2023-06-30 12:04:16,560 DEBUG functional 15676 16796 
def chain(*args, **kwargs):
    return 1

2023-06-30 12:04:16,560 DEBUG functional 15676 16796 
def xstarmap(task, it):
    return 1

2023-06-30 12:04:16,560 DEBUG functional 15676 16796 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 12:04:23,634 DEBUG functional 8420 4412 
def xstarmap(task, it):
    return 1

2023-06-30 12:04:23,635 DEBUG functional 8420 4412 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 12:04:23,636 DEBUG functional 8420 4412 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 12:04:23,636 DEBUG functional 8420 4412 
def chunks(task, it, n):
    return 1

2023-06-30 12:04:23,636 DEBUG functional 8420 4412 
def debug_task(self):
    return 1

2023-06-30 12:04:23,637 DEBUG functional 8420 4412 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 12:04:23,637 DEBUG functional 8420 4412 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 12:04:23,637 DEBUG functional 8420 4412 
def db_update_task():
    return 1

2023-06-30 12:04:23,638 DEBUG functional 8420 4412 
def xmap(task, it):
    return 1

2023-06-30 12:04:23,638 DEBUG functional 8420 4412 
def backend_cleanup():
    return 1

2023-06-30 12:04:23,638 DEBUG functional 8420 4412 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 12:04:23,639 DEBUG functional 8420 4412 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 12:04:23,639 DEBUG functional 8420 4412 
def chain(*args, **kwargs):
    return 1

2023-06-30 12:44:15,380 INFO autoreload 10020 16260 Watching for file changes with StatReloader
2023-06-30 14:55:17,326 INFO autoreload 13356 16780 Watching for file changes with StatReloader
2023-06-30 15:31:13,436 INFO autoreload 6160 5776 Watching for file changes with StatReloader
2023-06-30 15:34:17,332 WARNING log 6160 2852 Bad Request: /api/login/
2023-06-30 18:28:39,121 INFO autoreload 6316 12384 Watching for file changes with StatReloader
2023-06-30 18:47:16,153 INFO autoreload 12504 16524 Watching for file changes with StatReloader
2023-06-30 18:47:33,522 WARNING log 12504 21860 Bad Request: /api/login/
2023-06-30 18:49:55,781 INFO autoreload 12504 16524 C:\Users\Evert\Desktop\Django\monreal\accounts\views.py changed, reloading.
2023-06-30 18:49:57,352 INFO autoreload 21116 18568 Watching for file changes with StatReloader
2023-06-30 18:59:36,702 INFO autoreload 3392 14568 Watching for file changes with StatReloader
2023-06-30 21:22:22,010 INFO autoreload 13732 8060 Watching for file changes with StatReloader
2023-06-30 21:23:02,370 DEBUG functional 16560 10536 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:23:02,370 DEBUG functional 16560 10536 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:23:02,371 DEBUG functional 16560 10536 
def chunks(task, it, n):
    return 1

2023-06-30 21:23:02,371 DEBUG functional 16560 10536 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:23:02,372 DEBUG functional 16560 10536 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:23:02,372 DEBUG functional 16560 10536 
def backend_cleanup():
    return 1

2023-06-30 21:23:02,372 DEBUG functional 16560 10536 
def debug_task(self):
    return 1

2023-06-30 21:23:02,373 DEBUG functional 16560 10536 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:23:02,373 DEBUG functional 16560 10536 
def db_update_task():
    return 1

2023-06-30 21:23:02,373 DEBUG functional 16560 10536 
def xmap(task, it):
    return 1

2023-06-30 21:23:02,374 DEBUG functional 16560 10536 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:23:02,374 DEBUG functional 16560 10536 
def xstarmap(task, it):
    return 1

2023-06-30 21:23:02,375 DEBUG functional 16560 10536 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:23:38,860 DEBUG core 13732 17456 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:23:38,860 DEBUG core 13732 17456 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:23:38,988 WARNING log 13732 15796 Not Found: /favicon.ico
2023-06-30 21:23:39,966 DEBUG core 13732 17076 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:23:39,966 DEBUG core 13732 17076 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:23:40,847 DEBUG core 13732 17076 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:23:40,847 DEBUG core 13732 17076 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:23:47,203 DEBUG functional 13732 3960 
def xstarmap(task, it):
    return 1

2023-06-30 21:23:47,205 DEBUG functional 13732 3960 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:23:47,205 DEBUG functional 13732 3960 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:23:47,205 DEBUG functional 13732 3960 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:23:47,206 DEBUG functional 13732 3960 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:23:47,206 DEBUG functional 13732 3960 
def chunks(task, it, n):
    return 1

2023-06-30 21:23:47,206 DEBUG functional 13732 3960 
def debug_task(self):
    return 1

2023-06-30 21:23:47,207 DEBUG functional 13732 3960 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:23:47,207 DEBUG functional 13732 3960 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:23:47,207 DEBUG functional 13732 3960 
def xmap(task, it):
    return 1

2023-06-30 21:23:47,208 DEBUG functional 13732 3960 
def backend_cleanup():
    return 1

2023-06-30 21:23:47,208 DEBUG functional 13732 3960 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:23:47,208 DEBUG functional 13732 3960 
def db_update_task():
    return 1

2023-06-30 21:23:48,779 DEBUG core 13732 17076 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:23:48,779 DEBUG core 13732 17076 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:23:49,387 DEBUG core 13732 17076 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:23:49,387 DEBUG core 13732 17076 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:23:56,649 DEBUG core 13732 17076 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:23:56,650 DEBUG core 13732 17076 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:23:57,348 DEBUG core 13732 17076 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:23:57,348 DEBUG core 13732 17076 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:23:57,694 DEBUG core 13732 17076 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:23:57,694 DEBUG core 13732 17076 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:25:12,859 INFO autoreload 3332 14428 Watching for file changes with StatReloader
2023-06-30 21:25:51,896 DEBUG functional 17284 5496 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:25:51,896 DEBUG functional 17284 5496 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:25:51,897 DEBUG functional 17284 5496 
def chunks(task, it, n):
    return 1

2023-06-30 21:25:51,897 DEBUG functional 17284 5496 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:25:51,898 DEBUG functional 17284 5496 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:25:51,898 DEBUG functional 17284 5496 
def backend_cleanup():
    return 1

2023-06-30 21:25:51,898 DEBUG functional 17284 5496 
def debug_task(self):
    return 1

2023-06-30 21:25:51,899 DEBUG functional 17284 5496 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:25:51,899 DEBUG functional 17284 5496 
def db_update_task():
    return 1

2023-06-30 21:25:51,899 DEBUG functional 17284 5496 
def xmap(task, it):
    return 1

2023-06-30 21:25:51,900 DEBUG functional 17284 5496 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:25:51,900 DEBUG functional 17284 5496 
def xstarmap(task, it):
    return 1

2023-06-30 21:25:51,900 DEBUG functional 17284 5496 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:26:10,865 DEBUG functional 3332 17492 
def xstarmap(task, it):
    return 1

2023-06-30 21:26:10,868 DEBUG functional 3332 17492 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:26:10,868 DEBUG functional 3332 17492 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:26:10,869 DEBUG functional 3332 17492 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:26:10,869 DEBUG functional 3332 17492 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:26:10,869 DEBUG functional 3332 17492 
def chunks(task, it, n):
    return 1

2023-06-30 21:26:10,870 DEBUG functional 3332 17492 
def debug_task(self):
    return 1

2023-06-30 21:26:10,870 DEBUG functional 3332 17492 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:26:10,870 DEBUG functional 3332 17492 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:26:10,871 DEBUG functional 3332 17492 
def xmap(task, it):
    return 1

2023-06-30 21:26:10,871 DEBUG functional 3332 17492 
def backend_cleanup():
    return 1

2023-06-30 21:26:10,871 DEBUG functional 3332 17492 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:26:10,872 DEBUG functional 3332 17492 
def db_update_task():
    return 1

2023-06-30 21:26:52,806 INFO autoreload 3332 14428 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 21:26:54,513 INFO autoreload 12172 1428 Watching for file changes with StatReloader
2023-06-30 21:26:57,602 DEBUG functional 12528 13260 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:26:57,603 DEBUG functional 12528 13260 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:26:57,603 DEBUG functional 12528 13260 
def chunks(task, it, n):
    return 1

2023-06-30 21:26:57,603 DEBUG functional 12528 13260 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:26:57,604 DEBUG functional 12528 13260 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:26:57,604 DEBUG functional 12528 13260 
def backend_cleanup():
    return 1

2023-06-30 21:26:57,604 DEBUG functional 12528 13260 
def debug_task(self):
    return 1

2023-06-30 21:26:57,605 DEBUG functional 12528 13260 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:26:57,605 DEBUG functional 12528 13260 
def db_update_task():
    return 1

2023-06-30 21:26:57,605 DEBUG functional 12528 13260 
def xmap(task, it):
    return 1

2023-06-30 21:26:57,606 DEBUG functional 12528 13260 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:26:57,606 DEBUG functional 12528 13260 
def xstarmap(task, it):
    return 1

2023-06-30 21:26:57,606 DEBUG functional 12528 13260 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:27:04,576 DEBUG functional 12172 10528 
def xstarmap(task, it):
    return 1

2023-06-30 21:27:04,577 DEBUG functional 12172 10528 
def db_update_task():
    return 1

2023-06-30 21:27:04,578 DEBUG functional 12172 10528 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:27:04,578 DEBUG functional 12172 10528 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:27:04,578 DEBUG functional 12172 10528 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:27:04,579 DEBUG functional 12172 10528 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:27:04,579 DEBUG functional 12172 10528 
def chunks(task, it, n):
    return 1

2023-06-30 21:27:04,579 DEBUG functional 12172 10528 
def debug_task(self):
    return 1

2023-06-30 21:27:04,580 DEBUG functional 12172 10528 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:27:04,580 DEBUG functional 12172 10528 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:27:04,581 DEBUG functional 12172 10528 
def xmap(task, it):
    return 1

2023-06-30 21:27:04,581 DEBUG functional 12172 10528 
def backend_cleanup():
    return 1

2023-06-30 21:27:04,581 DEBUG functional 12172 10528 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:27:22,892 INFO autoreload 12172 1428 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 21:27:24,609 INFO autoreload 20112 11908 Watching for file changes with StatReloader
2023-06-30 21:27:27,715 DEBUG functional 2400 936 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:27:27,716 DEBUG functional 2400 936 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:27:27,716 DEBUG functional 2400 936 
def chunks(task, it, n):
    return 1

2023-06-30 21:27:27,716 DEBUG functional 2400 936 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:27:27,717 DEBUG functional 2400 936 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:27:27,717 DEBUG functional 2400 936 
def backend_cleanup():
    return 1

2023-06-30 21:27:27,718 DEBUG functional 2400 936 
def debug_task(self):
    return 1

2023-06-30 21:27:27,718 DEBUG functional 2400 936 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:27:27,718 DEBUG functional 2400 936 
def db_update_task():
    return 1

2023-06-30 21:27:27,719 DEBUG functional 2400 936 
def xmap(task, it):
    return 1

2023-06-30 21:27:27,719 DEBUG functional 2400 936 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:27:27,720 DEBUG functional 2400 936 
def xstarmap(task, it):
    return 1

2023-06-30 21:27:27,720 DEBUG functional 2400 936 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:27:34,176 DEBUG functional 20112 16464 
def xstarmap(task, it):
    return 1

2023-06-30 21:27:34,178 DEBUG functional 20112 16464 
def db_update_task():
    return 1

2023-06-30 21:27:34,178 DEBUG functional 20112 16464 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:27:34,179 DEBUG functional 20112 16464 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:27:34,179 DEBUG functional 20112 16464 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:27:34,179 DEBUG functional 20112 16464 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:27:34,180 DEBUG functional 20112 16464 
def chunks(task, it, n):
    return 1

2023-06-30 21:27:34,180 DEBUG functional 20112 16464 
def debug_task(self):
    return 1

2023-06-30 21:27:34,180 DEBUG functional 20112 16464 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:27:34,181 DEBUG functional 20112 16464 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:27:34,181 DEBUG functional 20112 16464 
def xmap(task, it):
    return 1

2023-06-30 21:27:34,181 DEBUG functional 20112 16464 
def backend_cleanup():
    return 1

2023-06-30 21:27:34,182 DEBUG functional 20112 16464 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:28:59,918 INFO autoreload 20112 11908 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 21:29:01,541 INFO autoreload 9336 5164 Watching for file changes with StatReloader
2023-06-30 21:29:08,540 DEBUG functional 22436 10688 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:29:08,541 DEBUG functional 22436 10688 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:29:08,541 DEBUG functional 22436 10688 
def chunks(task, it, n):
    return 1

2023-06-30 21:29:08,541 DEBUG functional 22436 10688 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:29:08,542 DEBUG functional 22436 10688 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:29:08,542 DEBUG functional 22436 10688 
def backend_cleanup():
    return 1

2023-06-30 21:29:08,542 DEBUG functional 22436 10688 
def debug_task(self):
    return 1

2023-06-30 21:29:08,543 DEBUG functional 22436 10688 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:29:08,543 DEBUG functional 22436 10688 
def db_update_task():
    return 1

2023-06-30 21:29:08,544 DEBUG functional 22436 10688 
def xmap(task, it):
    return 1

2023-06-30 21:29:08,544 DEBUG functional 22436 10688 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:29:08,544 DEBUG functional 22436 10688 
def xstarmap(task, it):
    return 1

2023-06-30 21:29:08,545 DEBUG functional 22436 10688 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:29:12,271 DEBUG functional 9336 2820 
def xstarmap(task, it):
    return 1

2023-06-30 21:29:12,272 DEBUG functional 9336 2820 
def db_update_task():
    return 1

2023-06-30 21:29:12,273 DEBUG functional 9336 2820 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:29:12,273 DEBUG functional 9336 2820 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:29:12,274 DEBUG functional 9336 2820 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:29:12,274 DEBUG functional 9336 2820 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:29:12,274 DEBUG functional 9336 2820 
def chunks(task, it, n):
    return 1

2023-06-30 21:29:12,275 DEBUG functional 9336 2820 
def debug_task(self):
    return 1

2023-06-30 21:29:12,275 DEBUG functional 9336 2820 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:29:12,276 DEBUG functional 9336 2820 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:29:12,276 DEBUG functional 9336 2820 
def xmap(task, it):
    return 1

2023-06-30 21:29:12,276 DEBUG functional 9336 2820 
def backend_cleanup():
    return 1

2023-06-30 21:29:12,277 DEBUG functional 9336 2820 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:33:12,430 INFO autoreload 9336 5164 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 21:33:14,199 INFO autoreload 19828 16748 Watching for file changes with StatReloader
2023-06-30 21:33:30,986 DEBUG functional 18344 22440 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:33:30,986 DEBUG functional 18344 22440 
def chunks(task, it, n):
    return 1

2023-06-30 21:33:30,987 DEBUG functional 18344 22440 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:33:30,987 DEBUG functional 18344 22440 
def backend_cleanup():
    return 1

2023-06-30 21:33:30,987 DEBUG functional 18344 22440 
def debug_task(self):
    return 1

2023-06-30 21:33:30,988 DEBUG functional 18344 22440 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:33:30,988 DEBUG functional 18344 22440 
def xmap(task, it):
    return 1

2023-06-30 21:33:30,988 DEBUG functional 18344 22440 
def db_update_task():
    return 1

2023-06-30 21:33:30,989 DEBUG functional 18344 22440 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:33:30,989 DEBUG functional 18344 22440 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:33:30,990 DEBUG functional 18344 22440 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:33:30,990 DEBUG functional 18344 22440 
def xstarmap(task, it):
    return 1

2023-06-30 21:33:30,990 DEBUG functional 18344 22440 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:33:38,849 DEBUG functional 19828 18808 
def xstarmap(task, it):
    return 1

2023-06-30 21:33:38,851 DEBUG functional 19828 18808 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:33:38,851 DEBUG functional 19828 18808 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:33:38,852 DEBUG functional 19828 18808 
def chunks(task, it, n):
    return 1

2023-06-30 21:33:38,852 DEBUG functional 19828 18808 
def debug_task(self):
    return 1

2023-06-30 21:33:38,852 DEBUG functional 19828 18808 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:33:38,853 DEBUG functional 19828 18808 
def db_update_task():
    return 1

2023-06-30 21:33:38,853 DEBUG functional 19828 18808 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:33:38,853 DEBUG functional 19828 18808 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:33:38,854 DEBUG functional 19828 18808 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:33:38,854 DEBUG functional 19828 18808 
def xmap(task, it):
    return 1

2023-06-30 21:33:38,855 DEBUG functional 19828 18808 
def backend_cleanup():
    return 1

2023-06-30 21:33:38,855 DEBUG functional 19828 18808 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:34:12,180 DEBUG core 19828 21256 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:34:12,181 DEBUG core 19828 21256 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:34:19,153 DEBUG core 19828 21256 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:34:19,153 DEBUG core 19828 21256 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:34:32,654 INFO autoreload 19828 16748 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 21:34:34,284 INFO autoreload 7748 4084 Watching for file changes with StatReloader
2023-06-30 21:34:41,006 DEBUG functional 17136 10688 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:34:41,007 DEBUG functional 17136 10688 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:34:41,007 DEBUG functional 17136 10688 
def chunks(task, it, n):
    return 1

2023-06-30 21:34:41,007 DEBUG functional 17136 10688 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:34:41,009 DEBUG functional 17136 10688 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:34:41,009 DEBUG functional 17136 10688 
def backend_cleanup():
    return 1

2023-06-30 21:34:41,009 DEBUG functional 17136 10688 
def debug_task(self):
    return 1

2023-06-30 21:34:41,010 DEBUG functional 17136 10688 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:34:41,010 DEBUG functional 17136 10688 
def db_update_task():
    return 1

2023-06-30 21:34:41,010 DEBUG functional 17136 10688 
def xmap(task, it):
    return 1

2023-06-30 21:34:41,011 DEBUG functional 17136 10688 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:34:41,011 DEBUG functional 17136 10688 
def xstarmap(task, it):
    return 1

2023-06-30 21:34:41,011 DEBUG functional 17136 10688 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:34:47,525 DEBUG functional 7748 8636 
def xstarmap(task, it):
    return 1

2023-06-30 21:34:47,527 DEBUG functional 7748 8636 
def db_update_task():
    return 1

2023-06-30 21:34:47,527 DEBUG functional 7748 8636 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:34:47,528 DEBUG functional 7748 8636 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:34:47,528 DEBUG functional 7748 8636 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:34:47,529 DEBUG functional 7748 8636 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:34:47,529 DEBUG functional 7748 8636 
def chunks(task, it, n):
    return 1

2023-06-30 21:34:47,529 DEBUG functional 7748 8636 
def debug_task(self):
    return 1

2023-06-30 21:34:47,530 DEBUG functional 7748 8636 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:34:47,530 DEBUG functional 7748 8636 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:34:47,530 DEBUG functional 7748 8636 
def xmap(task, it):
    return 1

2023-06-30 21:34:47,531 DEBUG functional 7748 8636 
def backend_cleanup():
    return 1

2023-06-30 21:34:47,531 DEBUG functional 7748 8636 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:35:07,113 INFO autoreload 7748 4084 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 21:35:08,829 INFO autoreload 1788 14296 Watching for file changes with StatReloader
2023-06-30 21:35:49,109 DEBUG core 1788 7820 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:35:49,110 DEBUG core 1788 7820 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:35:49,191 WARNING log 1788 7820 Not Found: /favicon.ico
2023-06-30 21:36:11,829 DEBUG functional 15248 5776 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:36:11,830 DEBUG functional 15248 5776 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:36:11,830 DEBUG functional 15248 5776 
def chunks(task, it, n):
    return 1

2023-06-30 21:36:11,831 DEBUG functional 15248 5776 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:36:11,831 DEBUG functional 15248 5776 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:36:11,831 DEBUG functional 15248 5776 
def backend_cleanup():
    return 1

2023-06-30 21:36:11,832 DEBUG functional 15248 5776 
def debug_task(self):
    return 1

2023-06-30 21:36:11,832 DEBUG functional 15248 5776 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:36:11,832 DEBUG functional 15248 5776 
def db_update_task():
    return 1

2023-06-30 21:36:11,833 DEBUG functional 15248 5776 
def xmap(task, it):
    return 1

2023-06-30 21:36:11,833 DEBUG functional 15248 5776 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:36:11,833 DEBUG functional 15248 5776 
def xstarmap(task, it):
    return 1

2023-06-30 21:36:11,834 DEBUG functional 15248 5776 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:36:14,782 DEBUG core 1788 14760 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:36:14,782 DEBUG core 1788 14760 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:36:15,705 DEBUG core 1788 14760 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:36:15,706 DEBUG core 1788 14760 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:36:22,337 DEBUG functional 1788 17804 
def xstarmap(task, it):
    return 1

2023-06-30 21:36:22,339 DEBUG functional 1788 17804 
def db_update_task():
    return 1

2023-06-30 21:36:22,339 DEBUG functional 1788 17804 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:36:22,340 DEBUG functional 1788 17804 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:36:22,340 DEBUG functional 1788 17804 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:36:22,340 DEBUG functional 1788 17804 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:36:22,341 DEBUG functional 1788 17804 
def chunks(task, it, n):
    return 1

2023-06-30 21:36:22,341 DEBUG functional 1788 17804 
def debug_task(self):
    return 1

2023-06-30 21:36:22,341 DEBUG functional 1788 17804 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:36:22,342 DEBUG functional 1788 17804 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:36:22,342 DEBUG functional 1788 17804 
def xmap(task, it):
    return 1

2023-06-30 21:36:22,342 DEBUG functional 1788 17804 
def backend_cleanup():
    return 1

2023-06-30 21:36:22,343 DEBUG functional 1788 17804 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:37:33,108 INFO autoreload 1788 14296 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 21:37:34,726 INFO autoreload 17824 13172 Watching for file changes with StatReloader
2023-06-30 21:37:43,002 DEBUG core 17824 14636 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:37:43,003 DEBUG core 17824 14636 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:39:45,024 DEBUG functional 17824 15244 
def xstarmap(task, it):
    return 1

2023-06-30 21:39:45,025 DEBUG functional 17824 15244 
def db_update_task():
    return 1

2023-06-30 21:39:45,026 DEBUG functional 17824 15244 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:39:45,026 DEBUG functional 17824 15244 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:39:45,027 DEBUG functional 17824 15244 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:39:45,027 DEBUG functional 17824 15244 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:39:45,027 DEBUG functional 17824 15244 
def chunks(task, it, n):
    return 1

2023-06-30 21:39:45,028 DEBUG functional 17824 15244 
def debug_task(self):
    return 1

2023-06-30 21:39:45,028 DEBUG functional 17824 15244 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:39:45,028 DEBUG functional 17824 15244 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:39:45,029 DEBUG functional 17824 15244 
def xmap(task, it):
    return 1

2023-06-30 21:39:45,029 DEBUG functional 17824 15244 
def backend_cleanup():
    return 1

2023-06-30 21:39:45,029 DEBUG functional 17824 15244 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:39:46,968 DEBUG core 17824 15540 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:39:46,969 DEBUG core 17824 15540 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:39:47,589 DEBUG core 17824 15540 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:39:47,589 DEBUG core 17824 15540 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:39:55,745 DEBUG functional 19332 7440 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:39:55,745 DEBUG functional 19332 7440 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:39:55,745 DEBUG functional 19332 7440 
def chunks(task, it, n):
    return 1

2023-06-30 21:39:55,746 DEBUG functional 19332 7440 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:39:55,746 DEBUG functional 19332 7440 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:39:55,747 DEBUG functional 19332 7440 
def backend_cleanup():
    return 1

2023-06-30 21:39:55,747 DEBUG functional 19332 7440 
def debug_task(self):
    return 1

2023-06-30 21:39:55,747 DEBUG functional 19332 7440 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:39:55,748 DEBUG functional 19332 7440 
def db_update_task():
    return 1

2023-06-30 21:39:55,748 DEBUG functional 19332 7440 
def xmap(task, it):
    return 1

2023-06-30 21:39:55,748 DEBUG functional 19332 7440 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:39:55,749 DEBUG functional 19332 7440 
def xstarmap(task, it):
    return 1

2023-06-30 21:39:55,749 DEBUG functional 19332 7440 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:40:11,464 DEBUG core 17824 15540 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:40:11,465 DEBUG core 17824 15540 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:44:38,946 DEBUG functional 5664 17180 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:44:38,947 DEBUG functional 5664 17180 
def backend_cleanup():
    return 1

2023-06-30 21:44:38,947 DEBUG functional 5664 17180 
def db_update_task():
    return 1

2023-06-30 21:44:38,948 DEBUG functional 5664 17180 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:44:38,948 DEBUG functional 5664 17180 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:44:38,948 DEBUG functional 5664 17180 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:44:38,949 DEBUG functional 5664 17180 
def xmap(task, it):
    return 1

2023-06-30 21:44:38,949 DEBUG functional 5664 17180 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:44:38,949 DEBUG functional 5664 17180 
def debug_task(self):
    return 1

2023-06-30 21:44:38,950 DEBUG functional 5664 17180 
def xstarmap(task, it):
    return 1

2023-06-30 21:44:38,950 DEBUG functional 5664 17180 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:44:38,951 DEBUG functional 5664 17180 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:44:38,951 DEBUG functional 5664 17180 
def chunks(task, it, n):
    return 1

2023-06-30 21:44:45,304 DEBUG core 17824 3088 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:44:45,305 DEBUG core 17824 3088 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:44:46,763 DEBUG core 17824 3088 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:44:46,763 DEBUG core 17824 3088 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:44:48,172 DEBUG core 17824 3088 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:44:48,173 DEBUG core 17824 3088 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:44:50,825 DEBUG core 17824 3088 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:44:50,825 DEBUG core 17824 3088 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:44:52,316 DEBUG core 17824 3088 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:44:52,316 DEBUG core 17824 3088 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:44:53,418 DEBUG core 17824 3088 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:44:53,418 DEBUG core 17824 3088 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:44:54,237 DEBUG core 17824 3088 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:44:54,237 DEBUG core 17824 3088 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:44:54,782 DEBUG core 17824 3088 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:44:54,782 DEBUG core 17824 3088 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:45:59,617 DEBUG core 17824 3088 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:45:59,617 DEBUG core 17824 3088 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:52:06,456 INFO autoreload 16052 8512 Watching for file changes with StatReloader
2023-06-30 21:53:38,737 DEBUG functional 13240 21524 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:53:38,737 DEBUG functional 13240 21524 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:53:38,737 DEBUG functional 13240 21524 
def chunks(task, it, n):
    return 1

2023-06-30 21:53:38,738 DEBUG functional 13240 21524 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:53:38,738 DEBUG functional 13240 21524 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:53:38,739 DEBUG functional 13240 21524 
def backend_cleanup():
    return 1

2023-06-30 21:53:38,739 DEBUG functional 13240 21524 
def debug_task(self):
    return 1

2023-06-30 21:53:38,739 DEBUG functional 13240 21524 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:53:38,740 DEBUG functional 13240 21524 
def db_update_task():
    return 1

2023-06-30 21:53:38,740 DEBUG functional 13240 21524 
def xmap(task, it):
    return 1

2023-06-30 21:53:38,741 DEBUG functional 13240 21524 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:53:38,741 DEBUG functional 13240 21524 
def xstarmap(task, it):
    return 1

2023-06-30 21:53:38,741 DEBUG functional 13240 21524 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:54:02,394 DEBUG core 16052 11664 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:54:02,394 DEBUG core 16052 11664 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:54:23,765 DEBUG functional 4852 20916 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:54:23,766 DEBUG functional 4852 20916 
def backend_cleanup():
    return 1

2023-06-30 21:54:23,766 DEBUG functional 4852 20916 
def db_update_task():
    return 1

2023-06-30 21:54:23,766 DEBUG functional 4852 20916 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:54:23,767 DEBUG functional 4852 20916 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:54:23,767 DEBUG functional 4852 20916 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:54:23,768 DEBUG functional 4852 20916 
def xmap(task, it):
    return 1

2023-06-30 21:54:23,768 DEBUG functional 4852 20916 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:54:23,768 DEBUG functional 4852 20916 
def debug_task(self):
    return 1

2023-06-30 21:54:23,769 DEBUG functional 4852 20916 
def xstarmap(task, it):
    return 1

2023-06-30 21:54:23,769 DEBUG functional 4852 20916 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:54:23,770 DEBUG functional 4852 20916 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:54:23,770 DEBUG functional 4852 20916 
def chunks(task, it, n):
    return 1

2023-06-30 21:55:32,969 DEBUG functional 16052 20548 
def xstarmap(task, it):
    return 1

2023-06-30 21:55:32,971 DEBUG functional 16052 20548 
def db_update_task():
    return 1

2023-06-30 21:55:32,971 DEBUG functional 16052 20548 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:55:32,972 DEBUG functional 16052 20548 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:55:32,972 DEBUG functional 16052 20548 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:55:32,972 DEBUG functional 16052 20548 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:55:32,973 DEBUG functional 16052 20548 
def chunks(task, it, n):
    return 1

2023-06-30 21:55:32,973 DEBUG functional 16052 20548 
def debug_task(self):
    return 1

2023-06-30 21:55:32,974 DEBUG functional 16052 20548 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:55:32,974 DEBUG functional 16052 20548 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:55:32,974 DEBUG functional 16052 20548 
def xmap(task, it):
    return 1

2023-06-30 21:55:32,975 DEBUG functional 16052 20548 
def backend_cleanup():
    return 1

2023-06-30 21:55:32,975 DEBUG functional 16052 20548 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:55:34,665 DEBUG core 16052 9484 Successfully imported extension module "markdown.extensions.toc".
2023-06-30 21:55:34,665 DEBUG core 16052 9484 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-06-30 21:56:13,324 INFO autoreload 16052 8512 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 21:56:15,124 INFO autoreload 11344 13940 Watching for file changes with StatReloader
2023-06-30 21:56:24,972 INFO autoreload 11344 13940 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 21:56:26,655 INFO autoreload 2604 3624 Watching for file changes with StatReloader
2023-06-30 21:56:34,226 INFO autoreload 2604 3624 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 21:56:35,888 INFO autoreload 10072 12060 Watching for file changes with StatReloader
2023-06-30 21:56:55,305 INFO autoreload 10072 12060 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 21:56:56,972 INFO autoreload 4716 15428 Watching for file changes with StatReloader
2023-06-30 21:57:07,877 INFO autoreload 4716 15428 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 21:57:09,763 INFO autoreload 14692 19548 Watching for file changes with StatReloader
2023-06-30 21:57:14,237 INFO autoreload 14692 19548 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 21:57:16,078 INFO autoreload 10188 16896 Watching for file changes with StatReloader
2023-06-30 21:57:32,259 DEBUG functional 10472 19912 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:57:32,259 DEBUG functional 10472 19912 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:57:32,260 DEBUG functional 10472 19912 
def chunks(task, it, n):
    return 1

2023-06-30 21:57:32,260 DEBUG functional 10472 19912 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:57:32,261 DEBUG functional 10472 19912 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:57:32,261 DEBUG functional 10472 19912 
def backend_cleanup():
    return 1

2023-06-30 21:57:32,261 DEBUG functional 10472 19912 
def debug_task(self):
    return 1

2023-06-30 21:57:32,262 DEBUG functional 10472 19912 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:57:32,262 DEBUG functional 10472 19912 
def db_update_task():
    return 1

2023-06-30 21:57:32,262 DEBUG functional 10472 19912 
def xmap(task, it):
    return 1

2023-06-30 21:57:32,263 DEBUG functional 10472 19912 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:57:32,263 DEBUG functional 10472 19912 
def xstarmap(task, it):
    return 1

2023-06-30 21:57:32,263 DEBUG functional 10472 19912 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:57:49,563 DEBUG functional 16016 12304 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:57:49,564 DEBUG functional 16016 12304 
def backend_cleanup():
    return 1

2023-06-30 21:57:49,564 DEBUG functional 16016 12304 
def db_update_task():
    return 1

2023-06-30 21:57:49,564 DEBUG functional 16016 12304 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:57:49,565 DEBUG functional 16016 12304 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:57:49,565 DEBUG functional 16016 12304 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:57:49,565 DEBUG functional 16016 12304 
def xmap(task, it):
    return 1

2023-06-30 21:57:49,566 DEBUG functional 16016 12304 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:57:49,566 DEBUG functional 16016 12304 
def debug_task(self):
    return 1

2023-06-30 21:57:49,566 DEBUG functional 16016 12304 
def xstarmap(task, it):
    return 1

2023-06-30 21:57:49,567 DEBUG functional 16016 12304 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:57:49,567 DEBUG functional 16016 12304 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:57:49,568 DEBUG functional 16016 12304 
def chunks(task, it, n):
    return 1

2023-06-30 21:57:55,950 DEBUG functional 10188 14876 
def xstarmap(task, it):
    return 1

2023-06-30 21:57:55,951 DEBUG functional 10188 14876 
def db_update_task():
    return 1

2023-06-30 21:57:55,952 DEBUG functional 10188 14876 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:57:55,952 DEBUG functional 10188 14876 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:57:55,953 DEBUG functional 10188 14876 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:57:55,953 DEBUG functional 10188 14876 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:57:55,953 DEBUG functional 10188 14876 
def chunks(task, it, n):
    return 1

2023-06-30 21:57:55,954 DEBUG functional 10188 14876 
def debug_task(self):
    return 1

2023-06-30 21:57:55,954 DEBUG functional 10188 14876 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:57:55,954 DEBUG functional 10188 14876 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:57:55,955 DEBUG functional 10188 14876 
def xmap(task, it):
    return 1

2023-06-30 21:57:55,955 DEBUG functional 10188 14876 
def backend_cleanup():
    return 1

2023-06-30 21:57:55,955 DEBUG functional 10188 14876 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:58:17,318 INFO autoreload 10188 16896 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 21:58:19,317 INFO autoreload 13704 17912 Watching for file changes with StatReloader
2023-06-30 21:58:27,034 INFO autoreload 13704 17912 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 21:58:28,818 INFO autoreload 4668 12736 Watching for file changes with StatReloader
2023-06-30 21:58:31,137 INFO autoreload 4668 12736 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 21:58:32,877 INFO autoreload 8652 19244 Watching for file changes with StatReloader
2023-06-30 21:58:36,249 INFO autoreload 8652 19244 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 21:58:38,068 INFO autoreload 20056 15932 Watching for file changes with StatReloader
2023-06-30 21:59:09,555 INFO autoreload 20056 15932 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 21:59:11,266 INFO autoreload 17300 1716 Watching for file changes with StatReloader
2023-06-30 21:59:22,130 INFO autoreload 17300 1716 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 21:59:23,782 INFO autoreload 20136 21728 Watching for file changes with StatReloader
2023-06-30 21:59:38,771 DEBUG functional 11924 13308 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:59:38,772 DEBUG functional 11924 13308 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:59:38,772 DEBUG functional 11924 13308 
def chunks(task, it, n):
    return 1

2023-06-30 21:59:38,773 DEBUG functional 11924 13308 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:59:38,773 DEBUG functional 11924 13308 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:59:38,773 DEBUG functional 11924 13308 
def backend_cleanup():
    return 1

2023-06-30 21:59:38,774 DEBUG functional 11924 13308 
def debug_task(self):
    return 1

2023-06-30 21:59:38,774 DEBUG functional 11924 13308 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:59:38,774 DEBUG functional 11924 13308 
def db_update_task():
    return 1

2023-06-30 21:59:38,775 DEBUG functional 11924 13308 
def xmap(task, it):
    return 1

2023-06-30 21:59:38,775 DEBUG functional 11924 13308 
def chain(*args, **kwargs):
    return 1

2023-06-30 21:59:38,776 DEBUG functional 11924 13308 
def xstarmap(task, it):
    return 1

2023-06-30 21:59:38,776 DEBUG functional 11924 13308 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:59:43,398 DEBUG functional 20136 14656 
def xstarmap(task, it):
    return 1

2023-06-30 21:59:43,400 DEBUG functional 20136 14656 
def db_update_task():
    return 1

2023-06-30 21:59:43,400 DEBUG functional 20136 14656 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-06-30 21:59:43,400 DEBUG functional 20136 14656 
def accumulate(self, *args, **kwargs):
    return 1

2023-06-30 21:59:43,401 DEBUG functional 20136 14656 
def place_order_task(*args, **kwds):
    return 1

2023-06-30 21:59:43,401 DEBUG functional 20136 14656 
def close_position_task(*args, **kwds):
    return 1

2023-06-30 21:59:43,401 DEBUG functional 20136 14656 
def chunks(task, it, n):
    return 1

2023-06-30 21:59:43,402 DEBUG functional 20136 14656 
def debug_task(self):
    return 1

2023-06-30 21:59:43,402 DEBUG functional 20136 14656 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-06-30 21:59:43,403 DEBUG functional 20136 14656 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-06-30 21:59:43,403 DEBUG functional 20136 14656 
def xmap(task, it):
    return 1

2023-06-30 21:59:43,403 DEBUG functional 20136 14656 
def backend_cleanup():
    return 1

2023-06-30 21:59:43,404 DEBUG functional 20136 14656 
def chain(*args, **kwargs):
    return 1

2023-06-30 22:00:12,740 INFO autoreload 20136 21728 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 22:00:14,446 INFO autoreload 2148 6228 Watching for file changes with StatReloader
2023-06-30 22:00:26,374 INFO autoreload 2148 6228 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-06-30 22:00:28,052 INFO autoreload 11352 3760 Watching for file changes with StatReloader
2023-07-01 14:44:24,019 INFO autoreload 15040 12460 Watching for file changes with StatReloader
2023-07-01 14:45:01,412 DEBUG functional 7240 3372 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 14:45:01,413 DEBUG functional 7240 3372 
def chunks(task, it, n):
    return 1

2023-07-01 14:45:01,413 DEBUG functional 7240 3372 
def db_update_task():
    return 1

2023-07-01 14:45:01,413 DEBUG functional 7240 3372 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 14:45:01,414 DEBUG functional 7240 3372 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 14:45:01,414 DEBUG functional 7240 3372 
def backend_cleanup():
    return 1

2023-07-01 14:45:01,415 DEBUG functional 7240 3372 
def debug_task(self):
    return 1

2023-07-01 14:45:01,415 DEBUG functional 7240 3372 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 14:45:01,415 DEBUG functional 7240 3372 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 14:45:01,416 DEBUG functional 7240 3372 
def xmap(task, it):
    return 1

2023-07-01 14:45:01,416 DEBUG functional 7240 3372 
def chain(*args, **kwargs):
    return 1

2023-07-01 14:45:01,417 DEBUG functional 7240 3372 
def xstarmap(task, it):
    return 1

2023-07-01 14:45:01,417 DEBUG functional 7240 3372 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 14:45:13,057 DEBUG functional 15040 18520 
def xstarmap(task, it):
    return 1

2023-07-01 14:45:13,061 DEBUG functional 15040 18520 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 14:45:13,061 DEBUG functional 15040 18520 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 14:45:13,061 DEBUG functional 15040 18520 
def chunks(task, it, n):
    return 1

2023-07-01 14:45:13,062 DEBUG functional 15040 18520 
def debug_task(self):
    return 1

2023-07-01 14:45:13,062 DEBUG functional 15040 18520 
def db_update_task():
    return 1

2023-07-01 14:45:13,063 DEBUG functional 15040 18520 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 14:45:13,063 DEBUG functional 15040 18520 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 14:45:13,063 DEBUG functional 15040 18520 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 14:45:13,064 DEBUG functional 15040 18520 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 14:45:13,064 DEBUG functional 15040 18520 
def xmap(task, it):
    return 1

2023-07-01 14:45:13,064 DEBUG functional 15040 18520 
def backend_cleanup():
    return 1

2023-07-01 14:45:13,065 DEBUG functional 15040 18520 
def chain(*args, **kwargs):
    return 1

2023-07-01 14:45:32,329 INFO autoreload 15040 12460 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-01 14:45:33,886 INFO autoreload 1128 10800 Watching for file changes with StatReloader
2023-07-01 14:45:35,627 INFO autoreload 1128 10800 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-01 14:45:37,234 INFO autoreload 22240 20060 Watching for file changes with StatReloader
2023-07-01 14:45:43,876 DEBUG functional 9196 3240 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 14:45:43,876 DEBUG functional 9196 3240 
def chunks(task, it, n):
    return 1

2023-07-01 14:45:43,877 DEBUG functional 9196 3240 
def db_update_task():
    return 1

2023-07-01 14:45:43,877 DEBUG functional 9196 3240 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 14:45:43,877 DEBUG functional 9196 3240 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 14:45:43,878 DEBUG functional 9196 3240 
def backend_cleanup():
    return 1

2023-07-01 14:45:43,878 DEBUG functional 9196 3240 
def debug_task(self):
    return 1

2023-07-01 14:45:43,879 DEBUG functional 9196 3240 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 14:45:43,879 DEBUG functional 9196 3240 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 14:45:43,879 DEBUG functional 9196 3240 
def xmap(task, it):
    return 1

2023-07-01 14:45:43,880 DEBUG functional 9196 3240 
def chain(*args, **kwargs):
    return 1

2023-07-01 14:45:43,880 DEBUG functional 9196 3240 
def xstarmap(task, it):
    return 1

2023-07-01 14:45:43,881 DEBUG functional 9196 3240 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 14:45:51,514 DEBUG functional 22240 4720 
def xstarmap(task, it):
    return 1

2023-07-01 14:45:51,516 DEBUG functional 22240 4720 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 14:45:51,517 DEBUG functional 22240 4720 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 14:45:51,517 DEBUG functional 22240 4720 
def chunks(task, it, n):
    return 1

2023-07-01 14:45:51,517 DEBUG functional 22240 4720 
def debug_task(self):
    return 1

2023-07-01 14:45:51,518 DEBUG functional 22240 4720 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 14:45:51,518 DEBUG functional 22240 4720 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 14:45:51,519 DEBUG functional 22240 4720 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 14:45:51,519 DEBUG functional 22240 4720 
def db_update_task():
    return 1

2023-07-01 14:45:51,520 DEBUG functional 22240 4720 
def xmap(task, it):
    return 1

2023-07-01 14:45:51,520 DEBUG functional 22240 4720 
def backend_cleanup():
    return 1

2023-07-01 14:45:51,521 DEBUG functional 22240 4720 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 14:45:51,521 DEBUG functional 22240 4720 
def chain(*args, **kwargs):
    return 1

2023-07-01 14:48:11,842 INFO autoreload 22240 20060 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-01 14:48:13,494 INFO autoreload 1128 13612 Watching for file changes with StatReloader
2023-07-01 14:48:27,276 DEBUG functional 1128 6788 
def xstarmap(task, it):
    return 1

2023-07-01 14:48:27,278 DEBUG functional 1128 6788 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 14:48:27,279 DEBUG functional 1128 6788 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 14:48:27,279 DEBUG functional 1128 6788 
def chunks(task, it, n):
    return 1

2023-07-01 14:48:27,279 DEBUG functional 1128 6788 
def debug_task(self):
    return 1

2023-07-01 14:48:27,280 DEBUG functional 1128 6788 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 14:48:27,280 DEBUG functional 1128 6788 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 14:48:27,280 DEBUG functional 1128 6788 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 14:48:27,281 DEBUG functional 1128 6788 
def db_update_task():
    return 1

2023-07-01 14:48:27,281 DEBUG functional 1128 6788 
def xmap(task, it):
    return 1

2023-07-01 14:48:27,281 DEBUG functional 1128 6788 
def backend_cleanup():
    return 1

2023-07-01 14:48:27,282 DEBUG functional 1128 6788 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 14:48:27,282 DEBUG functional 1128 6788 
def chain(*args, **kwargs):
    return 1

2023-07-01 14:48:33,979 DEBUG functional 7948 17148 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 14:48:33,980 DEBUG functional 7948 17148 
def chunks(task, it, n):
    return 1

2023-07-01 14:48:33,980 DEBUG functional 7948 17148 
def db_update_task():
    return 1

2023-07-01 14:48:33,980 DEBUG functional 7948 17148 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 14:48:33,981 DEBUG functional 7948 17148 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 14:48:33,982 DEBUG functional 7948 17148 
def backend_cleanup():
    return 1

2023-07-01 14:48:33,982 DEBUG functional 7948 17148 
def debug_task(self):
    return 1

2023-07-01 14:48:33,982 DEBUG functional 7948 17148 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 14:48:33,983 DEBUG functional 7948 17148 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 14:48:33,983 DEBUG functional 7948 17148 
def xmap(task, it):
    return 1

2023-07-01 14:48:33,983 DEBUG functional 7948 17148 
def chain(*args, **kwargs):
    return 1

2023-07-01 14:48:33,984 DEBUG functional 7948 17148 
def xstarmap(task, it):
    return 1

2023-07-01 14:48:33,984 DEBUG functional 7948 17148 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 14:49:08,919 INFO autoreload 1128 13612 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-01 14:49:10,599 INFO autoreload 16296 7952 Watching for file changes with StatReloader
2023-07-01 14:49:29,979 DEBUG functional 16296 16736 
def xstarmap(task, it):
    return 1

2023-07-01 14:49:29,981 DEBUG functional 16296 16736 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 14:49:29,981 DEBUG functional 16296 16736 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 14:49:29,981 DEBUG functional 16296 16736 
def chunks(task, it, n):
    return 1

2023-07-01 14:49:29,982 DEBUG functional 16296 16736 
def debug_task(self):
    return 1

2023-07-01 14:49:29,982 DEBUG functional 16296 16736 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 14:49:29,983 DEBUG functional 16296 16736 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 14:49:29,983 DEBUG functional 16296 16736 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 14:49:29,983 DEBUG functional 16296 16736 
def db_update_task():
    return 1

2023-07-01 14:49:29,984 DEBUG functional 16296 16736 
def xmap(task, it):
    return 1

2023-07-01 14:49:29,984 DEBUG functional 16296 16736 
def backend_cleanup():
    return 1

2023-07-01 14:49:29,984 DEBUG functional 16296 16736 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 14:49:29,985 DEBUG functional 16296 16736 
def chain(*args, **kwargs):
    return 1

2023-07-01 14:49:34,856 DEBUG functional 7628 16468 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 14:49:34,857 DEBUG functional 7628 16468 
def chunks(task, it, n):
    return 1

2023-07-01 14:49:34,857 DEBUG functional 7628 16468 
def db_update_task():
    return 1

2023-07-01 14:49:34,857 DEBUG functional 7628 16468 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 14:49:34,858 DEBUG functional 7628 16468 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 14:49:34,858 DEBUG functional 7628 16468 
def backend_cleanup():
    return 1

2023-07-01 14:49:34,859 DEBUG functional 7628 16468 
def debug_task(self):
    return 1

2023-07-01 14:49:34,859 DEBUG functional 7628 16468 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 14:49:34,859 DEBUG functional 7628 16468 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 14:49:34,860 DEBUG functional 7628 16468 
def xmap(task, it):
    return 1

2023-07-01 14:49:34,860 DEBUG functional 7628 16468 
def chain(*args, **kwargs):
    return 1

2023-07-01 14:49:34,860 DEBUG functional 7628 16468 
def xstarmap(task, it):
    return 1

2023-07-01 14:49:34,861 DEBUG functional 7628 16468 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 14:50:51,246 INFO autoreload 16296 7952 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-01 14:50:52,931 INFO autoreload 19860 11060 Watching for file changes with StatReloader
2023-07-01 14:50:56,523 DEBUG functional 16888 21952 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 14:50:56,524 DEBUG functional 16888 21952 
def chunks(task, it, n):
    return 1

2023-07-01 14:50:56,524 DEBUG functional 16888 21952 
def db_update_task():
    return 1

2023-07-01 14:50:56,525 DEBUG functional 16888 21952 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 14:50:56,525 DEBUG functional 16888 21952 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 14:50:56,525 DEBUG functional 16888 21952 
def backend_cleanup():
    return 1

2023-07-01 14:50:56,526 DEBUG functional 16888 21952 
def debug_task(self):
    return 1

2023-07-01 14:50:56,526 DEBUG functional 16888 21952 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 14:50:56,527 DEBUG functional 16888 21952 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 14:50:56,527 DEBUG functional 16888 21952 
def xmap(task, it):
    return 1

2023-07-01 14:50:56,528 DEBUG functional 16888 21952 
def chain(*args, **kwargs):
    return 1

2023-07-01 14:50:56,528 DEBUG functional 16888 21952 
def xstarmap(task, it):
    return 1

2023-07-01 14:50:56,528 DEBUG functional 16888 21952 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 14:51:14,684 DEBUG functional 19860 18892 
def xstarmap(task, it):
    return 1

2023-07-01 14:51:14,686 DEBUG functional 19860 18892 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 14:51:14,687 DEBUG functional 19860 18892 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 14:51:14,687 DEBUG functional 19860 18892 
def chunks(task, it, n):
    return 1

2023-07-01 14:51:14,687 DEBUG functional 19860 18892 
def debug_task(self):
    return 1

2023-07-01 14:51:14,688 DEBUG functional 19860 18892 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 14:51:14,688 DEBUG functional 19860 18892 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 14:51:14,689 DEBUG functional 19860 18892 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 14:51:14,689 DEBUG functional 19860 18892 
def db_update_task():
    return 1

2023-07-01 14:51:14,689 DEBUG functional 19860 18892 
def xmap(task, it):
    return 1

2023-07-01 14:51:14,690 DEBUG functional 19860 18892 
def backend_cleanup():
    return 1

2023-07-01 14:51:14,690 DEBUG functional 19860 18892 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 14:51:14,690 DEBUG functional 19860 18892 
def chain(*args, **kwargs):
    return 1

2023-07-01 14:51:28,903 INFO autoreload 19860 11060 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-01 14:51:30,445 INFO autoreload 4240 4152 Watching for file changes with StatReloader
2023-07-01 14:51:36,316 DEBUG functional 16480 5544 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 14:51:36,316 DEBUG functional 16480 5544 
def chunks(task, it, n):
    return 1

2023-07-01 14:51:36,317 DEBUG functional 16480 5544 
def db_update_task():
    return 1

2023-07-01 14:51:36,317 DEBUG functional 16480 5544 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 14:51:36,317 DEBUG functional 16480 5544 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 14:51:36,318 DEBUG functional 16480 5544 
def backend_cleanup():
    return 1

2023-07-01 14:51:36,318 DEBUG functional 16480 5544 
def debug_task(self):
    return 1

2023-07-01 14:51:36,319 DEBUG functional 16480 5544 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 14:51:36,319 DEBUG functional 16480 5544 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 14:51:36,319 DEBUG functional 16480 5544 
def xmap(task, it):
    return 1

2023-07-01 14:51:36,320 DEBUG functional 16480 5544 
def chain(*args, **kwargs):
    return 1

2023-07-01 14:51:36,320 DEBUG functional 16480 5544 
def xstarmap(task, it):
    return 1

2023-07-01 14:51:36,321 DEBUG functional 16480 5544 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 14:51:41,932 DEBUG functional 4240 5488 
def xstarmap(task, it):
    return 1

2023-07-01 14:51:41,933 DEBUG functional 4240 5488 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 14:51:41,934 DEBUG functional 4240 5488 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 14:51:41,934 DEBUG functional 4240 5488 
def chunks(task, it, n):
    return 1

2023-07-01 14:51:41,934 DEBUG functional 4240 5488 
def debug_task(self):
    return 1

2023-07-01 14:51:41,935 DEBUG functional 4240 5488 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 14:51:41,935 DEBUG functional 4240 5488 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 14:51:41,935 DEBUG functional 4240 5488 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 14:51:41,936 DEBUG functional 4240 5488 
def db_update_task():
    return 1

2023-07-01 14:51:41,936 DEBUG functional 4240 5488 
def xmap(task, it):
    return 1

2023-07-01 14:51:41,936 DEBUG functional 4240 5488 
def backend_cleanup():
    return 1

2023-07-01 14:51:41,937 DEBUG functional 4240 5488 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 14:51:41,937 DEBUG functional 4240 5488 
def chain(*args, **kwargs):
    return 1

2023-07-01 14:53:49,978 INFO autoreload 4240 4152 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-01 14:53:51,471 INFO autoreload 4276 4000 Watching for file changes with StatReloader
2023-07-01 14:54:17,397 DEBUG functional 9296 1872 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 14:54:17,398 DEBUG functional 9296 1872 
def chunks(task, it, n):
    return 1

2023-07-01 14:54:17,398 DEBUG functional 9296 1872 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 14:54:17,399 DEBUG functional 9296 1872 
def backend_cleanup():
    return 1

2023-07-01 14:54:17,399 DEBUG functional 9296 1872 
def debug_task(self):
    return 1

2023-07-01 14:54:17,400 DEBUG functional 9296 1872 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 14:54:17,400 DEBUG functional 9296 1872 
def db_update_task():
    return 1

2023-07-01 14:54:17,400 DEBUG functional 9296 1872 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 14:54:17,401 DEBUG functional 9296 1872 
def xmap(task, it):
    return 1

2023-07-01 14:54:17,401 DEBUG functional 9296 1872 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 14:54:17,401 DEBUG functional 9296 1872 
def chain(*args, **kwargs):
    return 1

2023-07-01 14:54:17,402 DEBUG functional 9296 1872 
def xstarmap(task, it):
    return 1

2023-07-01 14:54:17,402 DEBUG functional 9296 1872 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 14:54:22,605 DEBUG functional 4276 12264 
def xstarmap(task, it):
    return 1

2023-07-01 14:54:22,607 DEBUG functional 4276 12264 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 14:54:22,607 DEBUG functional 4276 12264 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 14:54:22,607 DEBUG functional 4276 12264 
def db_update_task():
    return 1

2023-07-01 14:54:22,608 DEBUG functional 4276 12264 
def chunks(task, it, n):
    return 1

2023-07-01 14:54:22,608 DEBUG functional 4276 12264 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 14:54:22,608 DEBUG functional 4276 12264 
def debug_task(self):
    return 1

2023-07-01 14:54:22,609 DEBUG functional 4276 12264 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 14:54:22,609 DEBUG functional 4276 12264 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 14:54:22,610 DEBUG functional 4276 12264 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 14:54:22,610 DEBUG functional 4276 12264 
def xmap(task, it):
    return 1

2023-07-01 14:54:22,610 DEBUG functional 4276 12264 
def backend_cleanup():
    return 1

2023-07-01 14:54:22,611 DEBUG functional 4276 12264 
def chain(*args, **kwargs):
    return 1

2023-07-01 14:58:06,400 INFO autoreload 4276 4000 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-01 14:58:07,900 INFO autoreload 6984 20088 Watching for file changes with StatReloader
2023-07-01 14:58:19,169 DEBUG functional 12284 13992 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 14:58:19,170 DEBUG functional 12284 13992 
def chunks(task, it, n):
    return 1

2023-07-01 14:58:19,170 DEBUG functional 12284 13992 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 14:58:19,171 DEBUG functional 12284 13992 
def backend_cleanup():
    return 1

2023-07-01 14:58:19,171 DEBUG functional 12284 13992 
def debug_task(self):
    return 1

2023-07-01 14:58:19,171 DEBUG functional 12284 13992 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 14:58:19,172 DEBUG functional 12284 13992 
def db_update_task():
    return 1

2023-07-01 14:58:19,172 DEBUG functional 12284 13992 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 14:58:19,172 DEBUG functional 12284 13992 
def xmap(task, it):
    return 1

2023-07-01 14:58:19,173 DEBUG functional 12284 13992 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 14:58:19,173 DEBUG functional 12284 13992 
def chain(*args, **kwargs):
    return 1

2023-07-01 14:58:19,173 DEBUG functional 12284 13992 
def xstarmap(task, it):
    return 1

2023-07-01 14:58:19,174 DEBUG functional 12284 13992 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 14:58:24,492 DEBUG functional 6984 12724 
def xstarmap(task, it):
    return 1

2023-07-01 14:58:24,494 DEBUG functional 6984 12724 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 14:58:24,494 DEBUG functional 6984 12724 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 14:58:24,495 DEBUG functional 6984 12724 
def db_update_task():
    return 1

2023-07-01 14:58:24,495 DEBUG functional 6984 12724 
def chunks(task, it, n):
    return 1

2023-07-01 14:58:24,495 DEBUG functional 6984 12724 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 14:58:24,496 DEBUG functional 6984 12724 
def debug_task(self):
    return 1

2023-07-01 14:58:24,496 DEBUG functional 6984 12724 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 14:58:24,496 DEBUG functional 6984 12724 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 14:58:24,497 DEBUG functional 6984 12724 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 14:58:24,497 DEBUG functional 6984 12724 
def xmap(task, it):
    return 1

2023-07-01 14:58:24,497 DEBUG functional 6984 12724 
def backend_cleanup():
    return 1

2023-07-01 14:58:24,498 DEBUG functional 6984 12724 
def chain(*args, **kwargs):
    return 1

2023-07-01 14:59:30,305 INFO autoreload 6984 20088 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-01 14:59:31,924 INFO autoreload 10492 2304 Watching for file changes with StatReloader
2023-07-01 14:59:40,676 DEBUG functional 14232 22500 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 14:59:40,676 DEBUG functional 14232 22500 
def chunks(task, it, n):
    return 1

2023-07-01 14:59:40,677 DEBUG functional 14232 22500 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 14:59:40,677 DEBUG functional 14232 22500 
def backend_cleanup():
    return 1

2023-07-01 14:59:40,677 DEBUG functional 14232 22500 
def debug_task(self):
    return 1

2023-07-01 14:59:40,678 DEBUG functional 14232 22500 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 14:59:40,678 DEBUG functional 14232 22500 
def db_update_task():
    return 1

2023-07-01 14:59:40,679 DEBUG functional 14232 22500 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 14:59:40,679 DEBUG functional 14232 22500 
def xmap(task, it):
    return 1

2023-07-01 14:59:40,679 DEBUG functional 14232 22500 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 14:59:40,680 DEBUG functional 14232 22500 
def chain(*args, **kwargs):
    return 1

2023-07-01 14:59:40,680 DEBUG functional 14232 22500 
def xstarmap(task, it):
    return 1

2023-07-01 14:59:40,680 DEBUG functional 14232 22500 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 14:59:45,676 DEBUG functional 10492 14884 
def xstarmap(task, it):
    return 1

2023-07-01 14:59:45,678 DEBUG functional 10492 14884 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 14:59:45,679 DEBUG functional 10492 14884 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 14:59:45,679 DEBUG functional 10492 14884 
def db_update_task():
    return 1

2023-07-01 14:59:45,679 DEBUG functional 10492 14884 
def chunks(task, it, n):
    return 1

2023-07-01 14:59:45,679 DEBUG functional 10492 14884 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 14:59:45,680 DEBUG functional 10492 14884 
def debug_task(self):
    return 1

2023-07-01 14:59:45,680 DEBUG functional 10492 14884 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 14:59:45,681 DEBUG functional 10492 14884 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 14:59:45,681 DEBUG functional 10492 14884 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 14:59:45,681 DEBUG functional 10492 14884 
def xmap(task, it):
    return 1

2023-07-01 14:59:45,682 DEBUG functional 10492 14884 
def backend_cleanup():
    return 1

2023-07-01 14:59:45,682 DEBUG functional 10492 14884 
def chain(*args, **kwargs):
    return 1

2023-07-01 15:02:20,437 INFO autoreload 3612 4072 Watching for file changes with StatReloader
2023-07-01 15:02:26,659 DEBUG functional 20364 19520 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 15:02:26,659 DEBUG functional 20364 19520 
def chunks(task, it, n):
    return 1

2023-07-01 15:02:26,660 DEBUG functional 20364 19520 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 15:02:26,660 DEBUG functional 20364 19520 
def backend_cleanup():
    return 1

2023-07-01 15:02:26,660 DEBUG functional 20364 19520 
def debug_task(self):
    return 1

2023-07-01 15:02:26,661 DEBUG functional 20364 19520 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 15:02:26,661 DEBUG functional 20364 19520 
def db_update_task():
    return 1

2023-07-01 15:02:26,661 DEBUG functional 20364 19520 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 15:02:26,662 DEBUG functional 20364 19520 
def xmap(task, it):
    return 1

2023-07-01 15:02:26,662 DEBUG functional 20364 19520 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 15:02:26,662 DEBUG functional 20364 19520 
def chain(*args, **kwargs):
    return 1

2023-07-01 15:02:26,663 DEBUG functional 20364 19520 
def xstarmap(task, it):
    return 1

2023-07-01 15:02:26,663 DEBUG functional 20364 19520 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 15:02:41,351 DEBUG functional 3612 18148 
def xstarmap(task, it):
    return 1

2023-07-01 15:02:41,353 DEBUG functional 3612 18148 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 15:02:41,354 DEBUG functional 3612 18148 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 15:02:41,354 DEBUG functional 3612 18148 
def db_update_task():
    return 1

2023-07-01 15:02:41,355 DEBUG functional 3612 18148 
def chunks(task, it, n):
    return 1

2023-07-01 15:02:41,355 DEBUG functional 3612 18148 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 15:02:41,355 DEBUG functional 3612 18148 
def debug_task(self):
    return 1

2023-07-01 15:02:41,356 DEBUG functional 3612 18148 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 15:02:41,356 DEBUG functional 3612 18148 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 15:02:41,357 DEBUG functional 3612 18148 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 15:02:41,357 DEBUG functional 3612 18148 
def xmap(task, it):
    return 1

2023-07-01 15:02:41,357 DEBUG functional 3612 18148 
def backend_cleanup():
    return 1

2023-07-01 15:02:41,358 DEBUG functional 3612 18148 
def chain(*args, **kwargs):
    return 1

2023-07-01 15:03:47,487 INFO autoreload 3612 4072 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-01 15:03:49,192 INFO autoreload 18608 20540 Watching for file changes with StatReloader
2023-07-01 15:04:02,513 DEBUG functional 9872 21660 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 15:04:02,514 DEBUG functional 9872 21660 
def chunks(task, it, n):
    return 1

2023-07-01 15:04:02,514 DEBUG functional 9872 21660 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 15:04:02,514 DEBUG functional 9872 21660 
def backend_cleanup():
    return 1

2023-07-01 15:04:02,515 DEBUG functional 9872 21660 
def debug_task(self):
    return 1

2023-07-01 15:04:02,515 DEBUG functional 9872 21660 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 15:04:02,516 DEBUG functional 9872 21660 
def db_update_task():
    return 1

2023-07-01 15:04:02,516 DEBUG functional 9872 21660 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 15:04:02,516 DEBUG functional 9872 21660 
def xmap(task, it):
    return 1

2023-07-01 15:04:02,517 DEBUG functional 9872 21660 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 15:04:02,517 DEBUG functional 9872 21660 
def chain(*args, **kwargs):
    return 1

2023-07-01 15:04:02,517 DEBUG functional 9872 21660 
def xstarmap(task, it):
    return 1

2023-07-01 15:04:02,518 DEBUG functional 9872 21660 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 15:04:09,499 DEBUG functional 18608 21320 
def xstarmap(task, it):
    return 1

2023-07-01 15:04:09,501 DEBUG functional 18608 21320 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 15:04:09,501 DEBUG functional 18608 21320 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 15:04:09,501 DEBUG functional 18608 21320 
def db_update_task():
    return 1

2023-07-01 15:04:09,502 DEBUG functional 18608 21320 
def chunks(task, it, n):
    return 1

2023-07-01 15:04:09,502 DEBUG functional 18608 21320 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 15:04:09,503 DEBUG functional 18608 21320 
def debug_task(self):
    return 1

2023-07-01 15:04:09,503 DEBUG functional 18608 21320 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 15:04:09,503 DEBUG functional 18608 21320 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 15:04:09,504 DEBUG functional 18608 21320 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 15:04:09,504 DEBUG functional 18608 21320 
def xmap(task, it):
    return 1

2023-07-01 15:04:09,504 DEBUG functional 18608 21320 
def backend_cleanup():
    return 1

2023-07-01 15:04:09,505 DEBUG functional 18608 21320 
def chain(*args, **kwargs):
    return 1

2023-07-01 15:26:23,025 INFO autoreload 17804 12292 Watching for file changes with StatReloader
2023-07-01 15:27:03,769 DEBUG functional 13760 11536 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 15:27:03,769 DEBUG functional 13760 11536 
def chunks(task, it, n):
    return 1

2023-07-01 15:27:03,770 DEBUG functional 13760 11536 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 15:27:03,770 DEBUG functional 13760 11536 
def backend_cleanup():
    return 1

2023-07-01 15:27:03,770 DEBUG functional 13760 11536 
def debug_task(self):
    return 1

2023-07-01 15:27:03,771 DEBUG functional 13760 11536 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 15:27:03,771 DEBUG functional 13760 11536 
def db_update_task():
    return 1

2023-07-01 15:27:03,772 DEBUG functional 13760 11536 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 15:27:03,772 DEBUG functional 13760 11536 
def xmap(task, it):
    return 1

2023-07-01 15:27:03,772 DEBUG functional 13760 11536 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 15:27:03,773 DEBUG functional 13760 11536 
def chain(*args, **kwargs):
    return 1

2023-07-01 15:27:03,773 DEBUG functional 13760 11536 
def xstarmap(task, it):
    return 1

2023-07-01 15:27:03,773 DEBUG functional 13760 11536 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 15:27:10,077 DEBUG core 17804 2004 Successfully imported extension module "markdown.extensions.toc".
2023-07-01 15:27:10,077 DEBUG core 17804 2004 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-01 15:27:10,387 WARNING log 17804 21356 Not Found: /favicon.ico
2023-07-01 15:27:17,009 DEBUG core 17804 5912 Successfully imported extension module "markdown.extensions.toc".
2023-07-01 15:27:17,009 DEBUG core 17804 5912 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-01 15:27:30,697 DEBUG functional 17804 19908 
def xstarmap(task, it):
    return 1

2023-07-01 15:27:30,698 DEBUG functional 17804 19908 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 15:27:30,699 DEBUG functional 17804 19908 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 15:27:30,699 DEBUG functional 17804 19908 
def db_update_task():
    return 1

2023-07-01 15:27:30,699 DEBUG functional 17804 19908 
def chunks(task, it, n):
    return 1

2023-07-01 15:27:30,700 DEBUG functional 17804 19908 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 15:27:30,700 DEBUG functional 17804 19908 
def debug_task(self):
    return 1

2023-07-01 15:27:30,700 DEBUG functional 17804 19908 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 15:27:30,701 DEBUG functional 17804 19908 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 15:27:30,701 DEBUG functional 17804 19908 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 15:27:30,701 DEBUG functional 17804 19908 
def xmap(task, it):
    return 1

2023-07-01 15:27:30,702 DEBUG functional 17804 19908 
def backend_cleanup():
    return 1

2023-07-01 15:27:30,702 DEBUG functional 17804 19908 
def chain(*args, **kwargs):
    return 1

2023-07-01 15:31:24,602 INFO autoreload 17804 12292 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-01 15:31:26,168 INFO autoreload 21036 15300 Watching for file changes with StatReloader
2023-07-01 15:31:28,391 DEBUG functional 14580 8308 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 15:31:28,391 DEBUG functional 14580 8308 
def chunks(task, it, n):
    return 1

2023-07-01 15:31:28,392 DEBUG functional 14580 8308 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 15:31:28,392 DEBUG functional 14580 8308 
def backend_cleanup():
    return 1

2023-07-01 15:31:28,392 DEBUG functional 14580 8308 
def debug_task(self):
    return 1

2023-07-01 15:31:28,393 DEBUG functional 14580 8308 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 15:31:28,393 DEBUG functional 14580 8308 
def db_update_task():
    return 1

2023-07-01 15:31:28,394 DEBUG functional 14580 8308 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 15:31:28,394 DEBUG functional 14580 8308 
def xmap(task, it):
    return 1

2023-07-01 15:31:28,394 DEBUG functional 14580 8308 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 15:31:28,395 DEBUG functional 14580 8308 
def chain(*args, **kwargs):
    return 1

2023-07-01 15:31:28,395 DEBUG functional 14580 8308 
def xstarmap(task, it):
    return 1

2023-07-01 15:31:28,396 DEBUG functional 14580 8308 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 15:31:33,679 DEBUG core 21036 14440 Successfully imported extension module "markdown.extensions.toc".
2023-07-01 15:31:33,679 DEBUG core 21036 14440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-01 15:31:41,219 DEBUG functional 21036 2852 
def xstarmap(task, it):
    return 1

2023-07-01 15:31:41,221 DEBUG functional 21036 2852 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 15:31:41,221 DEBUG functional 21036 2852 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 15:31:41,221 DEBUG functional 21036 2852 
def db_update_task():
    return 1

2023-07-01 15:31:41,222 DEBUG functional 21036 2852 
def chunks(task, it, n):
    return 1

2023-07-01 15:31:41,222 DEBUG functional 21036 2852 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 15:31:41,222 DEBUG functional 21036 2852 
def debug_task(self):
    return 1

2023-07-01 15:31:41,223 DEBUG functional 21036 2852 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 15:31:41,223 DEBUG functional 21036 2852 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 15:31:41,223 DEBUG functional 21036 2852 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 15:31:41,224 DEBUG functional 21036 2852 
def xmap(task, it):
    return 1

2023-07-01 15:31:41,224 DEBUG functional 21036 2852 
def backend_cleanup():
    return 1

2023-07-01 15:31:41,225 DEBUG functional 21036 2852 
def chain(*args, **kwargs):
    return 1

2023-07-01 15:31:52,863 DEBUG core 21036 14440 Successfully imported extension module "markdown.extensions.toc".
2023-07-01 15:31:52,864 DEBUG core 21036 14440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-01 15:32:03,716 INFO autoreload 21036 15300 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-01 15:36:51,773 INFO autoreload 13476 8464 Watching for file changes with StatReloader
2023-07-01 15:38:02,117 DEBUG functional 19016 3888 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 15:38:02,118 DEBUG functional 19016 3888 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 15:38:02,118 DEBUG functional 19016 3888 
def chunks(task, it, n):
    return 1

2023-07-01 15:38:02,119 DEBUG functional 19016 3888 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 15:38:02,119 DEBUG functional 19016 3888 
def db_update_task():
    return 1

2023-07-01 15:38:02,120 DEBUG functional 19016 3888 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 15:38:02,120 DEBUG functional 19016 3888 
def backend_cleanup():
    return 1

2023-07-01 15:38:02,120 DEBUG functional 19016 3888 
def debug_task(self):
    return 1

2023-07-01 15:38:02,121 DEBUG functional 19016 3888 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 15:38:02,121 DEBUG functional 19016 3888 
def xmap(task, it):
    return 1

2023-07-01 15:38:02,122 DEBUG functional 19016 3888 
def chain(*args, **kwargs):
    return 1

2023-07-01 15:38:02,122 DEBUG functional 19016 3888 
def xstarmap(task, it):
    return 1

2023-07-01 15:38:02,122 DEBUG functional 19016 3888 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 15:38:42,041 DEBUG core 13476 15692 Successfully imported extension module "markdown.extensions.toc".
2023-07-01 15:38:42,041 DEBUG core 13476 15692 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-01 15:38:45,320 DEBUG functional 13476 19976 
def xstarmap(task, it):
    return 1

2023-07-01 15:38:45,322 DEBUG functional 13476 19976 
def db_update_task():
    return 1

2023-07-01 15:38:45,322 DEBUG functional 13476 19976 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 15:38:45,323 DEBUG functional 13476 19976 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 15:38:45,323 DEBUG functional 13476 19976 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 15:38:45,324 DEBUG functional 13476 19976 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 15:38:45,324 DEBUG functional 13476 19976 
def chunks(task, it, n):
    return 1

2023-07-01 15:38:45,324 DEBUG functional 13476 19976 
def debug_task(self):
    return 1

2023-07-01 15:38:45,325 DEBUG functional 13476 19976 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 15:38:45,325 DEBUG functional 13476 19976 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 15:38:45,325 DEBUG functional 13476 19976 
def xmap(task, it):
    return 1

2023-07-01 15:38:45,326 DEBUG functional 13476 19976 
def backend_cleanup():
    return 1

2023-07-01 15:38:45,326 DEBUG functional 13476 19976 
def chain(*args, **kwargs):
    return 1

2023-07-01 15:39:13,934 DEBUG functional 12272 6080 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 15:39:13,934 DEBUG functional 12272 6080 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 15:39:13,935 DEBUG functional 12272 6080 
def chunks(task, it, n):
    return 1

2023-07-01 15:39:13,935 DEBUG functional 12272 6080 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 15:39:13,935 DEBUG functional 12272 6080 
def db_update_task():
    return 1

2023-07-01 15:39:13,936 DEBUG functional 12272 6080 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 15:39:13,936 DEBUG functional 12272 6080 
def backend_cleanup():
    return 1

2023-07-01 15:39:13,937 DEBUG functional 12272 6080 
def debug_task(self):
    return 1

2023-07-01 15:39:13,937 DEBUG functional 12272 6080 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 15:39:13,937 DEBUG functional 12272 6080 
def xmap(task, it):
    return 1

2023-07-01 15:39:13,938 DEBUG functional 12272 6080 
def chain(*args, **kwargs):
    return 1

2023-07-01 15:39:13,938 DEBUG functional 12272 6080 
def xstarmap(task, it):
    return 1

2023-07-01 15:39:13,938 DEBUG functional 12272 6080 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 15:50:38,488 INFO autoreload 13476 8464 C:\Users\Evert\Desktop\Django\monreal\accounts\views.py changed, reloading.
2023-07-01 15:50:40,219 INFO autoreload 12268 5268 Watching for file changes with StatReloader
2023-07-01 15:54:56,585 INFO autoreload 12268 5268 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-01 15:54:58,105 INFO autoreload 14920 3352 Watching for file changes with StatReloader
2023-07-01 15:56:23,615 DEBUG functional 21968 6228 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 15:56:23,615 DEBUG functional 21968 6228 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 15:56:23,616 DEBUG functional 21968 6228 
def chunks(task, it, n):
    return 1

2023-07-01 15:56:23,616 DEBUG functional 21968 6228 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 15:56:23,616 DEBUG functional 21968 6228 
def db_update_task():
    return 1

2023-07-01 15:56:23,617 DEBUG functional 21968 6228 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 15:56:23,618 DEBUG functional 21968 6228 
def backend_cleanup():
    return 1

2023-07-01 15:56:23,618 DEBUG functional 21968 6228 
def debug_task(self):
    return 1

2023-07-01 15:56:23,618 DEBUG functional 21968 6228 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 15:56:23,619 DEBUG functional 21968 6228 
def xmap(task, it):
    return 1

2023-07-01 15:56:23,619 DEBUG functional 21968 6228 
def chain(*args, **kwargs):
    return 1

2023-07-01 15:56:23,619 DEBUG functional 21968 6228 
def xstarmap(task, it):
    return 1

2023-07-01 15:56:23,620 DEBUG functional 21968 6228 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 15:56:28,759 DEBUG functional 14920 5180 
def xstarmap(task, it):
    return 1

2023-07-01 15:56:28,760 DEBUG functional 14920 5180 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 15:56:28,761 DEBUG functional 14920 5180 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 15:56:28,761 DEBUG functional 14920 5180 
def chunks(task, it, n):
    return 1

2023-07-01 15:56:28,762 DEBUG functional 14920 5180 
def db_update_task():
    return 1

2023-07-01 15:56:28,762 DEBUG functional 14920 5180 
def debug_task(self):
    return 1

2023-07-01 15:56:28,762 DEBUG functional 14920 5180 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 15:56:28,763 DEBUG functional 14920 5180 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 15:56:28,763 DEBUG functional 14920 5180 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 15:56:28,763 DEBUG functional 14920 5180 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 15:56:28,764 DEBUG functional 14920 5180 
def xmap(task, it):
    return 1

2023-07-01 15:56:28,764 DEBUG functional 14920 5180 
def backend_cleanup():
    return 1

2023-07-01 15:56:28,764 DEBUG functional 14920 5180 
def chain(*args, **kwargs):
    return 1

2023-07-01 15:56:37,218 DEBUG core 14920 14164 Successfully imported extension module "markdown.extensions.toc".
2023-07-01 15:56:37,218 DEBUG core 14920 14164 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-01 15:56:46,691 DEBUG core 14920 14164 Successfully imported extension module "markdown.extensions.toc".
2023-07-01 15:56:46,691 DEBUG core 14920 14164 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-01 15:57:01,272 DEBUG functional 9952 2000 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-01 15:57:01,273 DEBUG functional 9952 2000 
def backend_cleanup():
    return 1

2023-07-01 15:57:01,273 DEBUG functional 9952 2000 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-01 15:57:01,273 DEBUG functional 9952 2000 
def db_update_task():
    return 1

2023-07-01 15:57:01,274 DEBUG functional 9952 2000 
def place_order_task(*args, **kwds):
    return 1

2023-07-01 15:57:01,274 DEBUG functional 9952 2000 
def xmap(task, it):
    return 1

2023-07-01 15:57:01,274 DEBUG functional 9952 2000 
def close_position_task(*args, **kwds):
    return 1

2023-07-01 15:57:01,275 DEBUG functional 9952 2000 
def chain(*args, **kwargs):
    return 1

2023-07-01 15:57:01,275 DEBUG functional 9952 2000 
def debug_task(self):
    return 1

2023-07-01 15:57:01,275 DEBUG functional 9952 2000 
def xstarmap(task, it):
    return 1

2023-07-01 15:57:01,276 DEBUG functional 9952 2000 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-01 15:57:01,276 DEBUG functional 9952 2000 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-01 15:57:01,277 DEBUG functional 9952 2000 
def chunks(task, it, n):
    return 1

2023-07-01 15:57:06,602 DEBUG core 14920 14164 Successfully imported extension module "markdown.extensions.toc".
2023-07-01 15:57:06,602 DEBUG core 14920 14164 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-01 15:57:07,876 DEBUG core 14920 14164 Successfully imported extension module "markdown.extensions.toc".
2023-07-01 15:57:07,876 DEBUG core 14920 14164 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-01 15:57:44,421 DEBUG core 14920 14164 Successfully imported extension module "markdown.extensions.toc".
2023-07-01 15:57:44,421 DEBUG core 14920 14164 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-01 15:57:51,122 DEBUG core 14920 14164 Successfully imported extension module "markdown.extensions.toc".
2023-07-01 15:57:51,122 DEBUG core 14920 14164 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-01 15:58:05,077 DEBUG core 14920 14164 Successfully imported extension module "markdown.extensions.toc".
2023-07-01 15:58:05,077 DEBUG core 14920 14164 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-01 15:58:13,257 DEBUG core 14920 14164 Successfully imported extension module "markdown.extensions.toc".
2023-07-01 15:58:13,257 DEBUG core 14920 14164 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:21:14,671 INFO autoreload 2932 7976 Watching for file changes with StatReloader
2023-07-03 13:21:17,504 WARNING log 2932 7732 Not Found: /
2023-07-03 13:21:22,102 DEBUG core 2932 7732 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:21:22,103 DEBUG core 2932 7732 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:21:27,011 DEBUG core 2932 7732 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:21:27,011 DEBUG core 2932 7732 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:22:24,512 INFO autoreload 2932 7976 C:\Users\Evert\Desktop\Django\monreal\accounts\views.py changed, reloading.
2023-07-03 13:22:26,072 INFO autoreload 9792 11188 Watching for file changes with StatReloader
2023-07-03 13:22:31,435 INFO autoreload 9792 11188 C:\Users\Evert\Desktop\Django\monreal\accounts\views.py changed, reloading.
2023-07-03 13:22:32,918 INFO autoreload 20460 2500 Watching for file changes with StatReloader
2023-07-03 13:22:42,608 INFO autoreload 20460 2500 C:\Users\Evert\Desktop\Django\monreal\accounts\views.py changed, reloading.
2023-07-03 13:22:44,119 INFO autoreload 4032 15848 Watching for file changes with StatReloader
2023-07-03 13:24:06,954 INFO autoreload 4032 15848 C:\Users\Evert\Desktop\Django\monreal\monreal\settings.py changed, reloading.
2023-07-03 13:24:08,197 DEBUG selector_events 14908 7200 Using selector: SelectSelector
2023-07-03 13:24:12,447 DEBUG selector_events 1632 15936 Using selector: SelectSelector
2023-07-03 13:24:18,126 DEBUG selector_events 11672 22192 Using selector: SelectSelector
2023-07-03 13:24:28,021 DEBUG selector_events 4284 1340 Using selector: SelectSelector
2023-07-03 13:24:29,699 DEBUG selector_events 16288 18760 Using selector: SelectSelector
2023-07-03 13:24:30,498 INFO autoreload 16288 18760 Watching for file changes with StatReloader
2023-07-03 13:24:30,920 INFO server 16288 6788 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 13:24:30,921 INFO server 16288 6788 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 13:24:30,921 INFO server 16288 6788 Listening on TCP address 127.0.0.1:8000
2023-07-03 13:24:32,824 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 55036]
2023-07-03 13:24:32,859 WARNING log 16288 15220 Not Found: /
2023-07-03 13:24:32,860 DEBUG http_protocol 16288 6788 HTTP 404 response started for ['127.0.0.1', 55036]
2023-07-03 13:24:32,861 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 55036]
2023-07-03 13:24:32,861 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 55036]
2023-07-03 13:24:32,861 WARNING runserver 16288 6788 [33mHTTP GET / 404 [0.04, 127.0.0.1:55036][0m
2023-07-03 13:24:43,957 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 55036]
2023-07-03 13:24:44,084 DEBUG core 16288 18876 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:24:44,085 DEBUG core 16288 18876 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:24:44,107 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 55036]
2023-07-03 13:24:44,107 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 55036]
2023-07-03 13:24:44,107 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 55036]
2023-07-03 13:24:44,107 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.15, 127.0.0.1:55036][0m
2023-07-03 13:25:14,083 DEBUG http_protocol 16288 6788 HTTP b'OPTIONS' request for ['127.0.0.1', 55052]
2023-07-03 13:25:14,086 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 55052]
2023-07-03 13:25:14,086 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 55052]
2023-07-03 13:25:14,086 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 55052]
2023-07-03 13:25:14,087 INFO runserver 16288 6788 [mHTTP OPTIONS /api/login/ 200 [0.00, 127.0.0.1:55052][0m
2023-07-03 13:25:14,089 DEBUG http_protocol 16288 6788 HTTP b'POST' request for ['127.0.0.1', 55052]
2023-07-03 13:25:14,407 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 55052]
2023-07-03 13:25:14,408 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 55052]
2023-07-03 13:25:14,408 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 55052]
2023-07-03 13:25:14,408 INFO runserver 16288 6788 [mHTTP POST /api/login/ 200 [0.32, 127.0.0.1:55052][0m
2023-07-03 13:25:14,477 DEBUG http_protocol 16288 6788 HTTP b'OPTIONS' request for ['127.0.0.1', 55052]
2023-07-03 13:25:14,478 DEBUG http_protocol 16288 6788 HTTP b'OPTIONS' request for ['127.0.0.1', 55054]
2023-07-03 13:25:14,482 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 55052]
2023-07-03 13:25:14,482 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 55052]
2023-07-03 13:25:14,482 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 55052]
2023-07-03 13:25:14,482 INFO runserver 16288 6788 [mHTTP OPTIONS /api/profile_dashboard/ 200 [0.01, 127.0.0.1:55052][0m
2023-07-03 13:25:14,483 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 55054]
2023-07-03 13:25:14,483 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 55054]
2023-07-03 13:25:14,484 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 55054]
2023-07-03 13:25:14,484 INFO runserver 16288 6788 [mHTTP OPTIONS /api/profile_dashboard/ 200 [0.01, 127.0.0.1:55054][0m
2023-07-03 13:25:14,526 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 55052]
2023-07-03 13:25:14,528 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 55054]
2023-07-03 13:25:14,591 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 55052]
2023-07-03 13:25:14,591 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 55052]
2023-07-03 13:25:14,591 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 55052]
2023-07-03 13:25:14,592 INFO runserver 16288 6788 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:55052][0m
2023-07-03 13:25:14,592 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 55054]
2023-07-03 13:25:14,593 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 55054]
2023-07-03 13:25:14,593 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 55054]
2023-07-03 13:25:14,593 INFO runserver 16288 6788 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:55054][0m
2023-07-03 13:25:48,241 DEBUG selector_events 21864 13244 Using selector: SelectSelector
2023-07-03 13:25:49,267 DEBUG functional 21864 13244 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 13:25:49,267 DEBUG functional 21864 13244 
def chunks(task, it, n):
    return 1

2023-07-03 13:25:49,269 DEBUG functional 21864 13244 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 13:25:49,269 DEBUG functional 21864 13244 
def backend_cleanup():
    return 1

2023-07-03 13:25:49,269 DEBUG functional 21864 13244 
def debug_task(self):
    return 1

2023-07-03 13:25:49,270 DEBUG functional 21864 13244 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 13:25:49,270 DEBUG functional 21864 13244 
def xmap(task, it):
    return 1

2023-07-03 13:25:49,270 DEBUG functional 21864 13244 
def chain(*args, **kwargs):
    return 1

2023-07-03 13:25:49,271 DEBUG functional 21864 13244 
def db_update_task():
    return 1

2023-07-03 13:25:49,271 DEBUG functional 21864 13244 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 13:25:49,271 DEBUG functional 21864 13244 
def xstarmap(task, it):
    return 1

2023-07-03 13:25:49,272 DEBUG functional 21864 13244 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 13:25:49,272 DEBUG functional 21864 13244 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 13:26:01,982 DEBUG selector_events 12848 9536 Using selector: SelectSelector
2023-07-03 13:26:03,119 DEBUG functional 12848 9536 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 13:26:03,119 DEBUG functional 12848 9536 
def backend_cleanup():
    return 1

2023-07-03 13:26:03,120 DEBUG functional 12848 9536 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 13:26:03,120 DEBUG functional 12848 9536 
def xmap(task, it):
    return 1

2023-07-03 13:26:03,121 DEBUG functional 12848 9536 
def db_update_task():
    return 1

2023-07-03 13:26:03,121 DEBUG functional 12848 9536 
def chain(*args, **kwargs):
    return 1

2023-07-03 13:26:03,121 DEBUG functional 12848 9536 
def debug_task(self):
    return 1

2023-07-03 13:26:03,122 DEBUG functional 12848 9536 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 13:26:03,122 DEBUG functional 12848 9536 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 13:26:03,122 DEBUG functional 12848 9536 
def xstarmap(task, it):
    return 1

2023-07-03 13:26:03,123 DEBUG functional 12848 9536 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 13:26:03,123 DEBUG functional 12848 9536 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 13:26:03,123 DEBUG functional 12848 9536 
def chunks(task, it, n):
    return 1

2023-07-03 13:26:12,159 DEBUG http_protocol 16288 6788 HTTP b'OPTIONS' request for ['127.0.0.1', 55052]
2023-07-03 13:26:12,162 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 55052]
2023-07-03 13:26:12,162 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 55052]
2023-07-03 13:26:12,163 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 55052]
2023-07-03 13:26:12,163 INFO runserver 16288 6788 [mHTTP OPTIONS /api/market_buy/ 200 [0.00, 127.0.0.1:55052][0m
2023-07-03 13:26:12,165 DEBUG http_protocol 16288 6788 HTTP b'POST' request for ['127.0.0.1', 55054]
2023-07-03 13:26:12,223 DEBUG functional 16288 22056 
def xstarmap(task, it):
    return 1

2023-07-03 13:26:12,224 DEBUG functional 16288 22056 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 13:26:12,225 DEBUG functional 16288 22056 
def db_update_task():
    return 1

2023-07-03 13:26:12,225 DEBUG functional 16288 22056 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 13:26:12,225 DEBUG functional 16288 22056 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 13:26:12,226 DEBUG functional 16288 22056 
def chunks(task, it, n):
    return 1

2023-07-03 13:26:12,226 DEBUG functional 16288 22056 
def debug_task(self):
    return 1

2023-07-03 13:26:12,226 DEBUG functional 16288 22056 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 13:26:12,227 DEBUG functional 16288 22056 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 13:26:12,227 DEBUG functional 16288 22056 
def xmap(task, it):
    return 1

2023-07-03 13:26:12,227 DEBUG functional 16288 22056 
def backend_cleanup():
    return 1

2023-07-03 13:26:12,228 DEBUG functional 16288 22056 
def chain(*args, **kwargs):
    return 1

2023-07-03 13:26:12,228 DEBUG functional 16288 22056 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 13:26:12,328 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 55054]
2023-07-03 13:26:12,331 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 55054]
2023-07-03 13:26:12,331 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 55054]
2023-07-03 13:26:12,332 INFO runserver 16288 6788 [mHTTP POST /api/market_buy/ 200 [0.17, 127.0.0.1:55054][0m
2023-07-03 13:26:24,845 DEBUG http_protocol 16288 6788 HTTP b'POST' request for ['127.0.0.1', 55052]
2023-07-03 13:26:24,975 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 55052]
2023-07-03 13:26:24,975 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 55052]
2023-07-03 13:26:24,975 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 55052]
2023-07-03 13:26:24,975 INFO runserver 16288 6788 [mHTTP POST /api/market_buy/ 200 [0.13, 127.0.0.1:55052][0m
2023-07-03 13:26:31,087 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 55104]
2023-07-03 13:26:31,138 DEBUG core 16288 22464 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:26:31,138 DEBUG core 16288 22464 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:26:31,148 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 55104]
2023-07-03 13:26:31,148 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 55104]
2023-07-03 13:26:31,149 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 55104]
2023-07-03 13:26:31,149 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:55104][0m
2023-07-03 13:26:35,385 DEBUG http_protocol 16288 6788 HTTP b'OPTIONS' request for ['127.0.0.1', 55054]
2023-07-03 13:26:35,388 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 55054]
2023-07-03 13:26:35,388 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 55054]
2023-07-03 13:26:35,388 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 55054]
2023-07-03 13:26:35,388 INFO runserver 16288 6788 [mHTTP OPTIONS /api/close_positions/ 200 [0.00, 127.0.0.1:55054][0m
2023-07-03 13:26:35,391 DEBUG http_protocol 16288 6788 HTTP b'POST' request for ['127.0.0.1', 55052]
2023-07-03 13:26:35,520 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 55052]
2023-07-03 13:26:35,521 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 55052]
2023-07-03 13:26:35,521 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 55052]
2023-07-03 13:26:35,521 INFO runserver 16288 6788 [mHTTP POST /api/close_positions/ 200 [0.13, 127.0.0.1:55052][0m
2023-07-03 13:26:37,422 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 55104]
2023-07-03 13:26:37,473 DEBUG core 16288 21540 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:26:37,473 DEBUG core 16288 21540 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:26:37,478 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 55104]
2023-07-03 13:26:37,478 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 55104]
2023-07-03 13:26:37,478 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 55104]
2023-07-03 13:26:37,478 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:55104][0m
2023-07-03 13:30:50,948 DEBUG selector_events 19592 13044 Using selector: SelectSelector
2023-07-03 13:30:52,036 DEBUG functional 19592 13044 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 13:30:52,037 DEBUG functional 19592 13044 
def chunks(task, it, n):
    return 1

2023-07-03 13:30:52,038 DEBUG functional 19592 13044 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 13:30:52,038 DEBUG functional 19592 13044 
def backend_cleanup():
    return 1

2023-07-03 13:30:52,039 DEBUG functional 19592 13044 
def debug_task(self):
    return 1

2023-07-03 13:30:52,039 DEBUG functional 19592 13044 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 13:30:52,039 DEBUG functional 19592 13044 
def xmap(task, it):
    return 1

2023-07-03 13:30:52,040 DEBUG functional 19592 13044 
def chain(*args, **kwargs):
    return 1

2023-07-03 13:30:52,040 DEBUG functional 19592 13044 
def db_update_task():
    return 1

2023-07-03 13:30:52,040 DEBUG functional 19592 13044 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 13:30:52,041 DEBUG functional 19592 13044 
def xstarmap(task, it):
    return 1

2023-07-03 13:30:52,041 DEBUG functional 19592 13044 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 13:30:52,041 DEBUG functional 19592 13044 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 13:31:02,044 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56017]
2023-07-03 13:31:02,097 DEBUG core 16288 19160 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:31:02,097 DEBUG core 16288 19160 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:31:02,102 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56017]
2023-07-03 13:31:02,103 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56017]
2023-07-03 13:31:02,103 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56017]
2023-07-03 13:31:02,103 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:56017][0m
2023-07-03 13:32:21,903 DEBUG http_protocol 16288 6788 HTTP b'POST' request for ['127.0.0.1', 56036]
2023-07-03 13:32:22,041 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56036]
2023-07-03 13:32:22,041 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56036]
2023-07-03 13:32:22,041 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56036]
2023-07-03 13:32:22,041 INFO runserver 16288 6788 [mHTTP POST /api/market_buy/ 200 [0.14, 127.0.0.1:56036][0m
2023-07-03 13:32:33,081 DEBUG http_protocol 16288 6788 HTTP b'POST' request for ['127.0.0.1', 56036]
2023-07-03 13:32:33,210 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56036]
2023-07-03 13:32:33,210 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56036]
2023-07-03 13:32:33,210 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56036]
2023-07-03 13:32:33,210 INFO runserver 16288 6788 [mHTTP POST /api/market_buy/ 200 [0.13, 127.0.0.1:56036][0m
2023-07-03 13:33:15,949 DEBUG http_protocol 16288 6788 HTTP b'POST' request for ['127.0.0.1', 56036]
2023-07-03 13:33:16,084 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56036]
2023-07-03 13:33:16,084 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56036]
2023-07-03 13:33:16,084 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56036]
2023-07-03 13:33:16,085 INFO runserver 16288 6788 [mHTTP POST /api/market_buy/ 200 [0.14, 127.0.0.1:56036][0m
2023-07-03 13:33:21,985 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56057]
2023-07-03 13:33:22,033 DEBUG core 16288 8008 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:33:22,033 DEBUG core 16288 8008 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:33:22,039 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56057]
2023-07-03 13:33:22,039 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56057]
2023-07-03 13:33:22,039 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56057]
2023-07-03 13:33:22,039 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56057][0m
2023-07-03 13:33:34,366 DEBUG selector_events 15456 15600 Using selector: SelectSelector
2023-07-03 13:33:35,509 DEBUG functional 15456 15600 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 13:33:35,509 DEBUG functional 15456 15600 
def backend_cleanup():
    return 1

2023-07-03 13:33:35,509 DEBUG functional 15456 15600 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 13:33:35,510 DEBUG functional 15456 15600 
def xmap(task, it):
    return 1

2023-07-03 13:33:35,510 DEBUG functional 15456 15600 
def db_update_task():
    return 1

2023-07-03 13:33:35,511 DEBUG functional 15456 15600 
def chain(*args, **kwargs):
    return 1

2023-07-03 13:33:35,511 DEBUG functional 15456 15600 
def debug_task(self):
    return 1

2023-07-03 13:33:35,511 DEBUG functional 15456 15600 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 13:33:35,512 DEBUG functional 15456 15600 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 13:33:35,512 DEBUG functional 15456 15600 
def xstarmap(task, it):
    return 1

2023-07-03 13:33:35,512 DEBUG functional 15456 15600 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 13:33:35,513 DEBUG functional 15456 15600 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 13:33:35,513 DEBUG functional 15456 15600 
def chunks(task, it, n):
    return 1

2023-07-03 13:34:00,935 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56057]
2023-07-03 13:34:00,982 DEBUG core 16288 5720 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:34:00,982 DEBUG core 16288 5720 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:34:00,987 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56057]
2023-07-03 13:34:00,987 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56057]
2023-07-03 13:34:00,987 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56057]
2023-07-03 13:34:00,987 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56057][0m
2023-07-03 13:34:13,710 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56057]
2023-07-03 13:34:13,869 DEBUG core 16288 6176 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:34:13,869 DEBUG core 16288 6176 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:34:13,874 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56057]
2023-07-03 13:34:13,874 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56057]
2023-07-03 13:34:13,875 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56057]
2023-07-03 13:34:13,875 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.17, 127.0.0.1:56057][0m
2023-07-03 13:34:14,601 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56057]
2023-07-03 13:34:14,651 DEBUG core 16288 1028 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:34:14,652 DEBUG core 16288 1028 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:34:14,657 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56057]
2023-07-03 13:34:14,658 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56057]
2023-07-03 13:34:14,658 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56057]
2023-07-03 13:34:14,658 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:56057][0m
2023-07-03 13:34:18,695 DEBUG http_protocol 16288 6788 HTTP b'POST' request for ['127.0.0.1', 56076]
2023-07-03 13:34:18,926 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56076]
2023-07-03 13:34:18,926 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56076]
2023-07-03 13:34:18,927 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56076]
2023-07-03 13:34:18,927 INFO runserver 16288 6788 [mHTTP POST /api/close_positions/ 200 [0.23, 127.0.0.1:56076][0m
2023-07-03 13:34:53,394 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56076]
2023-07-03 13:34:53,449 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56076]
2023-07-03 13:34:53,449 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56076]
2023-07-03 13:34:53,449 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56076]
2023-07-03 13:34:53,450 INFO runserver 16288 6788 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:56076][0m
2023-07-03 13:34:53,452 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56076]
2023-07-03 13:34:53,623 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56076]
2023-07-03 13:34:53,624 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56076]
2023-07-03 13:34:53,625 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56076]
2023-07-03 13:34:53,625 INFO runserver 16288 6788 [mHTTP GET /api/profile_dashboard/ 200 [0.17, 127.0.0.1:56076][0m
2023-07-03 13:35:02,557 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56076]
2023-07-03 13:35:02,559 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56085]
2023-07-03 13:35:02,620 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56076]
2023-07-03 13:35:02,621 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56076]
2023-07-03 13:35:02,621 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56076]
2023-07-03 13:35:02,621 INFO runserver 16288 6788 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:56076][0m
2023-07-03 13:35:02,624 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56085]
2023-07-03 13:35:02,624 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56085]
2023-07-03 13:35:02,624 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56085]
2023-07-03 13:35:02,624 INFO runserver 16288 6788 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:56085][0m
2023-07-03 13:35:04,535 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56076]
2023-07-03 13:35:04,537 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56085]
2023-07-03 13:35:04,606 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56085]
2023-07-03 13:35:04,606 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56085]
2023-07-03 13:35:04,606 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56085]
2023-07-03 13:35:04,606 INFO runserver 16288 6788 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:56085][0m
2023-07-03 13:35:04,607 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56076]
2023-07-03 13:35:04,608 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56076]
2023-07-03 13:35:04,608 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56076]
2023-07-03 13:35:04,608 INFO runserver 16288 6788 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:56076][0m
2023-07-03 13:35:29,005 DEBUG http_protocol 16288 6788 HTTP b'POST' request for ['127.0.0.1', 56085]
2023-07-03 13:35:29,133 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56085]
2023-07-03 13:35:29,134 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56085]
2023-07-03 13:35:29,134 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56085]
2023-07-03 13:35:29,134 INFO runserver 16288 6788 [mHTTP POST /api/market_buy/ 200 [0.13, 127.0.0.1:56085][0m
2023-07-03 13:36:20,558 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:36:20,607 DEBUG core 16288 11612 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:36:20,607 DEBUG core 16288 11612 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:36:20,612 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:36:20,613 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:36:20,613 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:36:20,613 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56105][0m
2023-07-03 13:36:21,371 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:36:21,421 DEBUG core 16288 9508 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:36:21,421 DEBUG core 16288 9508 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:36:21,427 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:36:21,427 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:36:21,427 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:36:21,427 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:56105][0m
2023-07-03 13:36:21,800 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:36:21,847 DEBUG core 16288 8788 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:36:21,847 DEBUG core 16288 8788 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:36:21,852 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:36:21,853 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:36:21,853 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:36:21,853 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56105][0m
2023-07-03 13:36:22,158 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:36:22,208 DEBUG core 16288 13228 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:36:22,208 DEBUG core 16288 13228 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:36:22,213 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:36:22,214 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:36:22,214 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:36:22,214 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:56105][0m
2023-07-03 13:36:22,562 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:36:22,613 DEBUG core 16288 19928 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:36:22,613 DEBUG core 16288 19928 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:36:22,618 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:36:22,618 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:36:22,619 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:36:22,619 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:56105][0m
2023-07-03 13:36:22,928 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:36:22,977 DEBUG core 16288 18916 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:36:22,978 DEBUG core 16288 18916 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:36:22,983 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:36:22,983 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:36:22,983 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:36:22,983 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:56105][0m
2023-07-03 13:36:23,243 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:36:23,290 DEBUG core 16288 12688 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:36:23,290 DEBUG core 16288 12688 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:36:23,295 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:36:23,296 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:36:23,296 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:36:23,296 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56105][0m
2023-07-03 13:36:23,986 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:36:24,032 DEBUG core 16288 17472 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:36:24,032 DEBUG core 16288 17472 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:36:24,037 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:36:24,037 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:36:24,037 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:36:24,037 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56105][0m
2023-07-03 13:36:24,697 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:36:24,745 DEBUG core 16288 18864 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:36:24,745 DEBUG core 16288 18864 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:36:24,750 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:36:24,750 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:36:24,751 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:36:24,751 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56105][0m
2023-07-03 13:36:25,190 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:36:25,340 DEBUG core 16288 4840 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:36:25,340 DEBUG core 16288 4840 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:36:25,344 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:36:25,345 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:36:25,345 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:36:25,345 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.15, 127.0.0.1:56105][0m
2023-07-03 13:36:25,703 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:36:25,752 DEBUG core 16288 4768 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:36:25,752 DEBUG core 16288 4768 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:36:25,757 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:36:25,757 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:36:25,757 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:36:25,757 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56105][0m
2023-07-03 13:36:26,542 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:36:26,588 DEBUG core 16288 11972 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:36:26,588 DEBUG core 16288 11972 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:36:26,592 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:36:26,592 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:36:26,592 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:36:26,593 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56105][0m
2023-07-03 13:36:28,012 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:36:28,059 DEBUG core 16288 21756 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:36:28,059 DEBUG core 16288 21756 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:36:28,064 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:36:28,065 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:36:28,065 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:36:28,065 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56105][0m
2023-07-03 13:36:28,902 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:36:28,948 DEBUG core 16288 21044 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:36:28,948 DEBUG core 16288 21044 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:36:28,954 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:36:28,954 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:36:28,955 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:36:28,955 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56105][0m
2023-07-03 13:36:29,930 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:36:29,976 DEBUG core 16288 18080 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:36:29,976 DEBUG core 16288 18080 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:36:29,981 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:36:29,981 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:36:29,981 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:36:29,981 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56105][0m
2023-07-03 13:36:30,804 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:36:30,851 DEBUG core 16288 9964 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:36:30,851 DEBUG core 16288 9964 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:36:30,856 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:36:30,856 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:36:30,856 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:36:30,856 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56105][0m
2023-07-03 13:36:34,662 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:36:34,709 DEBUG core 16288 10836 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:36:34,709 DEBUG core 16288 10836 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:36:34,714 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:36:34,714 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:36:34,714 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:36:34,715 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56105][0m
2023-07-03 13:36:36,236 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:36:36,284 DEBUG core 16288 3228 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:36:36,284 DEBUG core 16288 3228 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:36:36,289 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:36:36,289 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:36:36,290 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:36:36,290 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56105][0m
2023-07-03 13:36:50,870 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:36:50,919 DEBUG core 16288 11564 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:36:50,920 DEBUG core 16288 11564 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:36:50,924 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:36:50,925 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:36:50,925 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:36:50,925 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56105][0m
2023-07-03 13:36:55,878 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:36:55,924 DEBUG core 16288 19072 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:36:55,924 DEBUG core 16288 19072 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:36:55,929 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:36:55,929 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:36:55,930 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:36:55,930 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56105][0m
2023-07-03 13:37:03,108 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:37:03,156 DEBUG core 16288 4356 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:37:03,156 DEBUG core 16288 4356 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:37:03,161 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:37:03,161 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:37:03,161 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:37:03,161 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56105][0m
2023-07-03 13:37:07,346 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:37:07,394 DEBUG core 16288 5596 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:37:07,394 DEBUG core 16288 5596 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:37:07,398 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:37:07,399 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:37:07,399 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:37:07,399 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56105][0m
2023-07-03 13:37:11,234 DEBUG http_protocol 16288 6788 HTTP b'POST' request for ['127.0.0.1', 56137]
2023-07-03 13:37:11,370 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56137]
2023-07-03 13:37:11,370 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56137]
2023-07-03 13:37:11,371 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56137]
2023-07-03 13:37:11,371 INFO runserver 16288 6788 [mHTTP POST /api/close_positions/ 200 [0.14, 127.0.0.1:56137][0m
2023-07-03 13:37:12,900 DEBUG http_protocol 16288 6788 HTTP b'GET' request for ['127.0.0.1', 56105]
2023-07-03 13:37:12,949 DEBUG core 16288 14300 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:37:12,949 DEBUG core 16288 14300 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:37:12,953 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56105]
2023-07-03 13:37:12,953 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56105]
2023-07-03 13:37:12,953 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56105]
2023-07-03 13:37:12,954 INFO runserver 16288 6788 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56105][0m
2023-07-03 13:37:40,660 DEBUG http_protocol 16288 6788 HTTP b'POST' request for ['127.0.0.1', 56137]
2023-07-03 13:37:40,797 DEBUG http_protocol 16288 6788 HTTP 200 response started for ['127.0.0.1', 56137]
2023-07-03 13:37:40,797 DEBUG http_protocol 16288 6788 HTTP close for ['127.0.0.1', 56137]
2023-07-03 13:37:40,797 DEBUG http_protocol 16288 6788 HTTP response complete for ['127.0.0.1', 56137]
2023-07-03 13:37:40,797 INFO runserver 16288 6788 [mHTTP POST /api/market_buy/ 200 [0.14, 127.0.0.1:56137][0m
2023-07-03 13:38:03,865 INFO autoreload 16288 18760 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 13:38:05,000 DEBUG selector_events 16444 17008 Using selector: SelectSelector
2023-07-03 13:38:05,903 INFO autoreload 16444 17008 Watching for file changes with StatReloader
2023-07-03 13:38:10,915 INFO autoreload 16444 17008 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 13:38:11,966 DEBUG selector_events 2736 11996 Using selector: SelectSelector
2023-07-03 13:38:12,768 INFO autoreload 2736 11996 Watching for file changes with StatReloader
2023-07-03 13:38:13,191 INFO server 2736 1632 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 13:38:13,192 INFO server 2736 1632 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 13:38:13,192 INFO server 2736 1632 Listening on TCP address 127.0.0.1:8000
2023-07-03 13:38:29,497 DEBUG selector_events 15072 21284 Using selector: SelectSelector
2023-07-03 13:38:30,542 DEBUG functional 15072 21284 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 13:38:30,542 DEBUG functional 15072 21284 
def chunks(task, it, n):
    return 1

2023-07-03 13:38:30,544 DEBUG functional 15072 21284 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 13:38:30,544 DEBUG functional 15072 21284 
def backend_cleanup():
    return 1

2023-07-03 13:38:30,544 DEBUG functional 15072 21284 
def debug_task(self):
    return 1

2023-07-03 13:38:30,545 DEBUG functional 15072 21284 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 13:38:30,545 DEBUG functional 15072 21284 
def xmap(task, it):
    return 1

2023-07-03 13:38:30,545 DEBUG functional 15072 21284 
def chain(*args, **kwargs):
    return 1

2023-07-03 13:38:30,546 DEBUG functional 15072 21284 
def db_update_task():
    return 1

2023-07-03 13:38:30,546 DEBUG functional 15072 21284 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 13:38:30,546 DEBUG functional 15072 21284 
def xstarmap(task, it):
    return 1

2023-07-03 13:38:30,547 DEBUG functional 15072 21284 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 13:38:30,547 DEBUG functional 15072 21284 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 13:38:41,858 DEBUG http_protocol 2736 1632 HTTP b'POST' request for ['127.0.0.1', 56186]
2023-07-03 13:38:41,927 DEBUG functional 2736 16908 
def xstarmap(task, it):
    return 1

2023-07-03 13:38:41,929 DEBUG functional 2736 16908 
def db_update_task():
    return 1

2023-07-03 13:38:41,930 DEBUG functional 2736 16908 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 13:38:41,930 DEBUG functional 2736 16908 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 13:38:41,930 DEBUG functional 2736 16908 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 13:38:41,931 DEBUG functional 2736 16908 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 13:38:41,931 DEBUG functional 2736 16908 
def chunks(task, it, n):
    return 1

2023-07-03 13:38:41,931 DEBUG functional 2736 16908 
def debug_task(self):
    return 1

2023-07-03 13:38:41,932 DEBUG functional 2736 16908 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 13:38:41,932 DEBUG functional 2736 16908 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 13:38:41,932 DEBUG functional 2736 16908 
def xmap(task, it):
    return 1

2023-07-03 13:38:41,933 DEBUG functional 2736 16908 
def backend_cleanup():
    return 1

2023-07-03 13:38:41,933 DEBUG functional 2736 16908 
def chain(*args, **kwargs):
    return 1

2023-07-03 13:38:42,033 DEBUG http_protocol 2736 1632 HTTP 200 response started for ['127.0.0.1', 56186]
2023-07-03 13:38:42,033 DEBUG http_protocol 2736 1632 HTTP close for ['127.0.0.1', 56186]
2023-07-03 13:38:42,033 DEBUG http_protocol 2736 1632 HTTP response complete for ['127.0.0.1', 56186]
2023-07-03 13:38:42,033 INFO runserver 2736 1632 [mHTTP POST /api/market_buy/ 200 [0.18, 127.0.0.1:56186][0m
2023-07-03 13:45:39,439 INFO autoreload 2736 11996 C:\Users\Evert\Desktop\Django\monreal\accounts\views.py changed, reloading.
2023-07-03 13:45:40,696 DEBUG selector_events 11908 9276 Using selector: SelectSelector
2023-07-03 13:45:41,525 INFO autoreload 11908 9276 Watching for file changes with StatReloader
2023-07-03 13:45:41,935 INFO server 11908 19304 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 13:45:41,935 INFO server 11908 19304 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 13:45:41,936 INFO server 11908 19304 Listening on TCP address 127.0.0.1:8000
2023-07-03 13:46:03,365 INFO autoreload 11908 9276 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 13:46:04,491 DEBUG selector_events 2100 16836 Using selector: SelectSelector
2023-07-03 13:46:05,358 INFO autoreload 2100 16836 Watching for file changes with StatReloader
2023-07-03 13:46:05,774 INFO server 2100 20544 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 13:46:05,774 INFO server 2100 20544 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 13:46:05,775 INFO server 2100 20544 Listening on TCP address 127.0.0.1:8000
2023-07-03 13:46:10,691 DEBUG selector_events 6760 18396 Using selector: SelectSelector
2023-07-03 13:46:11,856 DEBUG functional 6760 18396 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 13:46:11,857 DEBUG functional 6760 18396 
def chunks(task, it, n):
    return 1

2023-07-03 13:46:11,859 DEBUG functional 6760 18396 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 13:46:11,859 DEBUG functional 6760 18396 
def backend_cleanup():
    return 1

2023-07-03 13:46:11,859 DEBUG functional 6760 18396 
def debug_task(self):
    return 1

2023-07-03 13:46:11,860 DEBUG functional 6760 18396 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 13:46:11,860 DEBUG functional 6760 18396 
def xmap(task, it):
    return 1

2023-07-03 13:46:11,860 DEBUG functional 6760 18396 
def chain(*args, **kwargs):
    return 1

2023-07-03 13:46:11,861 DEBUG functional 6760 18396 
def db_update_task():
    return 1

2023-07-03 13:46:11,861 DEBUG functional 6760 18396 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 13:46:11,861 DEBUG functional 6760 18396 
def xstarmap(task, it):
    return 1

2023-07-03 13:46:11,862 DEBUG functional 6760 18396 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 13:46:11,862 DEBUG functional 6760 18396 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 13:46:16,127 DEBUG http_protocol 2100 20544 HTTP b'GET' request for ['127.0.0.1', 56262]
2023-07-03 13:46:16,245 DEBUG core 2100 15780 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:46:16,245 DEBUG core 2100 15780 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:46:16,268 DEBUG http_protocol 2100 20544 HTTP 200 response started for ['127.0.0.1', 56262]
2023-07-03 13:46:16,269 DEBUG http_protocol 2100 20544 HTTP close for ['127.0.0.1', 56262]
2023-07-03 13:46:16,269 DEBUG http_protocol 2100 20544 HTTP response complete for ['127.0.0.1', 56262]
2023-07-03 13:46:16,269 INFO runserver 2100 20544 [mHTTP GET /api/open_positions/ 200 [0.14, 127.0.0.1:56262][0m
2023-07-03 13:46:21,382 DEBUG http_protocol 2100 20544 HTTP b'POST' request for ['127.0.0.1', 56264]
2023-07-03 13:46:21,442 DEBUG functional 2100 20724 
def xstarmap(task, it):
    return 1

2023-07-03 13:46:21,443 DEBUG functional 2100 20724 
def db_update_task():
    return 1

2023-07-03 13:46:21,444 DEBUG functional 2100 20724 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 13:46:21,444 DEBUG functional 2100 20724 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 13:46:21,444 DEBUG functional 2100 20724 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 13:46:21,445 DEBUG functional 2100 20724 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 13:46:21,445 DEBUG functional 2100 20724 
def chunks(task, it, n):
    return 1

2023-07-03 13:46:21,445 DEBUG functional 2100 20724 
def debug_task(self):
    return 1

2023-07-03 13:46:21,446 DEBUG functional 2100 20724 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 13:46:21,446 DEBUG functional 2100 20724 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 13:46:21,446 DEBUG functional 2100 20724 
def xmap(task, it):
    return 1

2023-07-03 13:46:21,447 DEBUG functional 2100 20724 
def backend_cleanup():
    return 1

2023-07-03 13:46:21,447 DEBUG functional 2100 20724 
def chain(*args, **kwargs):
    return 1

2023-07-03 13:46:21,601 DEBUG http_protocol 2100 20544 HTTP 200 response started for ['127.0.0.1', 56264]
2023-07-03 13:46:21,602 DEBUG http_protocol 2100 20544 HTTP close for ['127.0.0.1', 56264]
2023-07-03 13:46:21,602 DEBUG http_protocol 2100 20544 HTTP response complete for ['127.0.0.1', 56264]
2023-07-03 13:46:21,602 INFO runserver 2100 20544 [mHTTP POST /api/market_buy/ 200 [0.22, 127.0.0.1:56264][0m
2023-07-03 13:46:37,967 INFO autoreload 2100 16836 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 13:46:39,201 DEBUG selector_events 21980 21184 Using selector: SelectSelector
2023-07-03 13:46:40,024 INFO autoreload 21980 21184 Watching for file changes with StatReloader
2023-07-03 13:46:40,439 INFO server 21980 20084 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 13:46:40,439 INFO server 21980 20084 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 13:46:40,440 INFO server 21980 20084 Listening on TCP address 127.0.0.1:8000
2023-07-03 13:46:44,739 DEBUG selector_events 5972 2256 Using selector: SelectSelector
2023-07-03 13:46:45,873 DEBUG functional 5972 2256 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 13:46:45,874 DEBUG functional 5972 2256 
def chunks(task, it, n):
    return 1

2023-07-03 13:46:45,875 DEBUG functional 5972 2256 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 13:46:45,876 DEBUG functional 5972 2256 
def backend_cleanup():
    return 1

2023-07-03 13:46:45,876 DEBUG functional 5972 2256 
def debug_task(self):
    return 1

2023-07-03 13:46:45,876 DEBUG functional 5972 2256 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 13:46:45,877 DEBUG functional 5972 2256 
def xmap(task, it):
    return 1

2023-07-03 13:46:45,877 DEBUG functional 5972 2256 
def chain(*args, **kwargs):
    return 1

2023-07-03 13:46:45,877 DEBUG functional 5972 2256 
def db_update_task():
    return 1

2023-07-03 13:46:45,878 DEBUG functional 5972 2256 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 13:46:45,878 DEBUG functional 5972 2256 
def xstarmap(task, it):
    return 1

2023-07-03 13:46:45,878 DEBUG functional 5972 2256 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 13:46:45,879 DEBUG functional 5972 2256 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 13:46:48,560 DEBUG http_protocol 21980 20084 HTTP b'POST' request for ['127.0.0.1', 56297]
2023-07-03 13:46:48,623 DEBUG functional 21980 11184 
def xstarmap(task, it):
    return 1

2023-07-03 13:46:48,625 DEBUG functional 21980 11184 
def db_update_task():
    return 1

2023-07-03 13:46:48,626 DEBUG functional 21980 11184 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 13:46:48,626 DEBUG functional 21980 11184 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 13:46:48,626 DEBUG functional 21980 11184 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 13:46:48,627 DEBUG functional 21980 11184 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 13:46:48,627 DEBUG functional 21980 11184 
def chunks(task, it, n):
    return 1

2023-07-03 13:46:48,627 DEBUG functional 21980 11184 
def debug_task(self):
    return 1

2023-07-03 13:46:48,628 DEBUG functional 21980 11184 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 13:46:48,628 DEBUG functional 21980 11184 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 13:46:48,629 DEBUG functional 21980 11184 
def xmap(task, it):
    return 1

2023-07-03 13:46:48,629 DEBUG functional 21980 11184 
def backend_cleanup():
    return 1

2023-07-03 13:46:48,629 DEBUG functional 21980 11184 
def chain(*args, **kwargs):
    return 1

2023-07-03 13:46:48,751 DEBUG http_protocol 21980 20084 HTTP 200 response started for ['127.0.0.1', 56297]
2023-07-03 13:46:48,751 DEBUG http_protocol 21980 20084 HTTP close for ['127.0.0.1', 56297]
2023-07-03 13:46:48,751 DEBUG http_protocol 21980 20084 HTTP response complete for ['127.0.0.1', 56297]
2023-07-03 13:46:48,751 INFO runserver 21980 20084 [mHTTP POST /api/market_buy/ 200 [0.19, 127.0.0.1:56297][0m
2023-07-03 13:46:53,579 DEBUG http_protocol 21980 20084 HTTP b'POST' request for ['127.0.0.1', 56297]
2023-07-03 13:46:53,702 DEBUG http_protocol 21980 20084 HTTP 200 response started for ['127.0.0.1', 56297]
2023-07-03 13:46:53,703 DEBUG http_protocol 21980 20084 HTTP close for ['127.0.0.1', 56297]
2023-07-03 13:46:53,703 DEBUG http_protocol 21980 20084 HTTP response complete for ['127.0.0.1', 56297]
2023-07-03 13:46:53,703 INFO runserver 21980 20084 [mHTTP POST /api/market_buy/ 200 [0.12, 127.0.0.1:56297][0m
2023-07-03 13:48:29,488 INFO autoreload 21980 21184 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 13:48:30,591 DEBUG selector_events 9540 19820 Using selector: SelectSelector
2023-07-03 13:48:31,484 INFO autoreload 9540 19820 Watching for file changes with StatReloader
2023-07-03 13:48:31,951 INFO server 9540 1952 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 13:48:31,951 INFO server 9540 1952 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 13:48:31,952 INFO server 9540 1952 Listening on TCP address 127.0.0.1:8000
2023-07-03 13:48:57,740 INFO autoreload 9540 19820 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 13:48:58,954 DEBUG selector_events 22328 15600 Using selector: SelectSelector
2023-07-03 13:48:59,814 INFO autoreload 22328 15600 Watching for file changes with StatReloader
2023-07-03 13:49:00,245 INFO server 22328 5808 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 13:49:00,245 INFO server 22328 5808 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 13:49:00,246 INFO server 22328 5808 Listening on TCP address 127.0.0.1:8000
2023-07-03 13:49:02,010 DEBUG selector_events 17892 12184 Using selector: SelectSelector
2023-07-03 13:49:03,049 DEBUG functional 17892 12184 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 13:49:03,049 DEBUG functional 17892 12184 
def chunks(task, it, n):
    return 1

2023-07-03 13:49:03,051 DEBUG functional 17892 12184 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 13:49:03,051 DEBUG functional 17892 12184 
def backend_cleanup():
    return 1

2023-07-03 13:49:03,051 DEBUG functional 17892 12184 
def debug_task(self):
    return 1

2023-07-03 13:49:03,052 DEBUG functional 17892 12184 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 13:49:03,052 DEBUG functional 17892 12184 
def xmap(task, it):
    return 1

2023-07-03 13:49:03,052 DEBUG functional 17892 12184 
def chain(*args, **kwargs):
    return 1

2023-07-03 13:49:03,053 DEBUG functional 17892 12184 
def db_update_task():
    return 1

2023-07-03 13:49:03,053 DEBUG functional 17892 12184 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 13:49:03,053 DEBUG functional 17892 12184 
def xstarmap(task, it):
    return 1

2023-07-03 13:49:03,054 DEBUG functional 17892 12184 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 13:49:03,054 DEBUG functional 17892 12184 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 13:49:09,813 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56354]
2023-07-03 13:49:09,935 DEBUG core 22328 4780 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:49:09,935 DEBUG core 22328 4780 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:49:09,957 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56354]
2023-07-03 13:49:09,957 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56354]
2023-07-03 13:49:09,958 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56354]
2023-07-03 13:49:09,958 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.15, 127.0.0.1:56354][0m
2023-07-03 13:49:10,822 DEBUG http_protocol 22328 5808 HTTP b'POST' request for ['127.0.0.1', 56358]
2023-07-03 13:49:10,883 DEBUG functional 22328 680 
def xstarmap(task, it):
    return 1

2023-07-03 13:49:10,884 DEBUG functional 22328 680 
def db_update_task():
    return 1

2023-07-03 13:49:10,885 DEBUG functional 22328 680 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 13:49:10,885 DEBUG functional 22328 680 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 13:49:10,886 DEBUG functional 22328 680 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 13:49:10,886 DEBUG functional 22328 680 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 13:49:10,887 DEBUG functional 22328 680 
def chunks(task, it, n):
    return 1

2023-07-03 13:49:10,887 DEBUG functional 22328 680 
def debug_task(self):
    return 1

2023-07-03 13:49:10,887 DEBUG functional 22328 680 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 13:49:10,888 DEBUG functional 22328 680 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 13:49:10,888 DEBUG functional 22328 680 
def xmap(task, it):
    return 1

2023-07-03 13:49:10,889 DEBUG functional 22328 680 
def backend_cleanup():
    return 1

2023-07-03 13:49:10,889 DEBUG functional 22328 680 
def chain(*args, **kwargs):
    return 1

2023-07-03 13:49:11,077 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56358]
2023-07-03 13:49:11,078 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56358]
2023-07-03 13:49:11,079 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56358]
2023-07-03 13:49:11,079 INFO runserver 22328 5808 [mHTTP POST /api/market_buy/ 200 [0.26, 127.0.0.1:56358][0m
2023-07-03 13:49:12,802 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56354]
2023-07-03 13:49:12,851 DEBUG core 22328 17864 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:49:12,851 DEBUG core 22328 17864 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:49:12,856 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56354]
2023-07-03 13:49:12,857 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56354]
2023-07-03 13:49:12,857 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56354]
2023-07-03 13:49:12,857 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56354][0m
2023-07-03 13:51:29,477 DEBUG selector_events 7244 1120 Using selector: SelectSelector
2023-07-03 13:51:30,496 DEBUG functional 7244 1120 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 13:51:30,497 DEBUG functional 7244 1120 
def chunks(task, it, n):
    return 1

2023-07-03 13:51:30,498 DEBUG functional 7244 1120 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 13:51:30,499 DEBUG functional 7244 1120 
def backend_cleanup():
    return 1

2023-07-03 13:51:30,499 DEBUG functional 7244 1120 
def debug_task(self):
    return 1

2023-07-03 13:51:30,499 DEBUG functional 7244 1120 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 13:51:30,500 DEBUG functional 7244 1120 
def xmap(task, it):
    return 1

2023-07-03 13:51:30,500 DEBUG functional 7244 1120 
def chain(*args, **kwargs):
    return 1

2023-07-03 13:51:30,500 DEBUG functional 7244 1120 
def db_update_task():
    return 1

2023-07-03 13:51:30,501 DEBUG functional 7244 1120 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 13:51:30,501 DEBUG functional 7244 1120 
def xstarmap(task, it):
    return 1

2023-07-03 13:51:30,501 DEBUG functional 7244 1120 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 13:51:30,502 DEBUG functional 7244 1120 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 13:51:35,153 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56404]
2023-07-03 13:51:35,199 DEBUG core 22328 19304 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:51:35,199 DEBUG core 22328 19304 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:51:35,204 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56404]
2023-07-03 13:51:35,204 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56404]
2023-07-03 13:51:35,204 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56404]
2023-07-03 13:51:35,204 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56404][0m
2023-07-03 13:51:40,068 DEBUG http_protocol 22328 5808 HTTP b'POST' request for ['127.0.0.1', 56406]
2023-07-03 13:51:40,198 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56406]
2023-07-03 13:51:40,198 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56406]
2023-07-03 13:51:40,198 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56406]
2023-07-03 13:51:40,198 INFO runserver 22328 5808 [mHTTP POST /api/market_buy/ 200 [0.13, 127.0.0.1:56406][0m
2023-07-03 13:51:49,807 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56404]
2023-07-03 13:51:49,861 DEBUG core 22328 8732 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:51:49,861 DEBUG core 22328 8732 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:51:49,867 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56404]
2023-07-03 13:51:49,867 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56404]
2023-07-03 13:51:49,868 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56404]
2023-07-03 13:51:49,868 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:56404][0m
2023-07-03 13:52:00,177 DEBUG http_protocol 22328 5808 HTTP b'POST' request for ['127.0.0.1', 56406]
2023-07-03 13:52:00,307 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56406]
2023-07-03 13:52:00,307 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56406]
2023-07-03 13:52:00,308 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56406]
2023-07-03 13:52:00,308 INFO runserver 22328 5808 [mHTTP POST /api/market_buy/ 200 [0.13, 127.0.0.1:56406][0m
2023-07-03 13:52:27,823 DEBUG selector_events 14364 8384 Using selector: SelectSelector
2023-07-03 13:52:28,900 DEBUG functional 14364 8384 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 13:52:28,900 DEBUG functional 14364 8384 
def chunks(task, it, n):
    return 1

2023-07-03 13:52:28,902 DEBUG functional 14364 8384 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 13:52:28,902 DEBUG functional 14364 8384 
def backend_cleanup():
    return 1

2023-07-03 13:52:28,902 DEBUG functional 14364 8384 
def debug_task(self):
    return 1

2023-07-03 13:52:28,903 DEBUG functional 14364 8384 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 13:52:28,903 DEBUG functional 14364 8384 
def xmap(task, it):
    return 1

2023-07-03 13:52:28,903 DEBUG functional 14364 8384 
def chain(*args, **kwargs):
    return 1

2023-07-03 13:52:28,904 DEBUG functional 14364 8384 
def db_update_task():
    return 1

2023-07-03 13:52:28,904 DEBUG functional 14364 8384 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 13:52:28,904 DEBUG functional 14364 8384 
def xstarmap(task, it):
    return 1

2023-07-03 13:52:28,905 DEBUG functional 14364 8384 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 13:52:28,905 DEBUG functional 14364 8384 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 13:52:35,948 DEBUG http_protocol 22328 5808 HTTP b'POST' request for ['127.0.0.1', 56406]
2023-07-03 13:52:36,086 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56406]
2023-07-03 13:52:36,086 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56406]
2023-07-03 13:52:36,086 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56406]
2023-07-03 13:52:36,086 INFO runserver 22328 5808 [mHTTP POST /api/market_buy/ 200 [0.14, 127.0.0.1:56406][0m
2023-07-03 13:52:40,351 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56404]
2023-07-03 13:52:40,402 DEBUG core 22328 15116 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:52:40,402 DEBUG core 22328 15116 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:52:40,408 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56404]
2023-07-03 13:52:40,409 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56404]
2023-07-03 13:52:40,409 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56404]
2023-07-03 13:52:40,409 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:56404][0m
2023-07-03 13:52:40,952 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56404]
2023-07-03 13:52:41,002 DEBUG core 22328 6008 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:52:41,003 DEBUG core 22328 6008 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:52:41,009 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56404]
2023-07-03 13:52:41,009 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56404]
2023-07-03 13:52:41,009 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56404]
2023-07-03 13:52:41,009 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:56404][0m
2023-07-03 13:52:41,150 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56404]
2023-07-03 13:52:41,293 DEBUG http_protocol 22328 5808 HTTP disconnect for ['127.0.0.1', 56404]
2023-07-03 13:52:41,302 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56451]
2023-07-03 13:52:41,308 DEBUG core 22328 15192 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:52:41,308 DEBUG core 22328 15192 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:52:41,360 DEBUG core 22328 17608 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:52:41,360 DEBUG core 22328 17608 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:52:41,366 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56451]
2023-07-03 13:52:41,366 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56451]
2023-07-03 13:52:41,367 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56451]
2023-07-03 13:52:41,367 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:56451][0m
2023-07-03 13:52:53,744 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56451]
2023-07-03 13:52:53,794 DEBUG core 22328 18420 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:52:53,794 DEBUG core 22328 18420 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:52:53,799 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56451]
2023-07-03 13:52:53,800 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56451]
2023-07-03 13:52:53,800 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56451]
2023-07-03 13:52:53,800 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:56451][0m
2023-07-03 13:52:54,381 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56451]
2023-07-03 13:52:54,431 DEBUG core 22328 16236 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:52:54,432 DEBUG core 22328 16236 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:52:54,437 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56451]
2023-07-03 13:52:54,437 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56451]
2023-07-03 13:52:54,437 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56451]
2023-07-03 13:52:54,437 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:56451][0m
2023-07-03 13:52:54,830 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56451]
2023-07-03 13:52:54,882 DEBUG core 22328 12056 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:52:54,882 DEBUG core 22328 12056 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:52:54,888 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56451]
2023-07-03 13:52:54,888 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56451]
2023-07-03 13:52:54,888 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56451]
2023-07-03 13:52:54,889 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:56451][0m
2023-07-03 13:52:55,214 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56451]
2023-07-03 13:52:55,365 DEBUG core 22328 12764 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:52:55,365 DEBUG core 22328 12764 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:52:55,370 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56451]
2023-07-03 13:52:55,371 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56451]
2023-07-03 13:52:55,371 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56451]
2023-07-03 13:52:55,371 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.16, 127.0.0.1:56451][0m
2023-07-03 13:52:55,548 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56451]
2023-07-03 13:52:55,596 DEBUG core 22328 10976 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:52:55,597 DEBUG core 22328 10976 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:52:55,602 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56451]
2023-07-03 13:52:55,602 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56451]
2023-07-03 13:52:55,603 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56451]
2023-07-03 13:52:55,603 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:56451][0m
2023-07-03 13:52:55,856 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56451]
2023-07-03 13:52:55,903 DEBUG core 22328 15924 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:52:55,903 DEBUG core 22328 15924 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:52:55,910 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56451]
2023-07-03 13:52:55,910 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56451]
2023-07-03 13:52:55,910 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56451]
2023-07-03 13:52:55,911 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:56451][0m
2023-07-03 13:52:56,136 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56451]
2023-07-03 13:52:56,184 DEBUG core 22328 19628 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:52:56,184 DEBUG core 22328 19628 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:52:56,190 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56451]
2023-07-03 13:52:56,190 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56451]
2023-07-03 13:52:56,190 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56451]
2023-07-03 13:52:56,190 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56451][0m
2023-07-03 13:52:56,396 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56451]
2023-07-03 13:52:56,443 DEBUG core 22328 22424 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:52:56,443 DEBUG core 22328 22424 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:52:56,448 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56451]
2023-07-03 13:52:56,449 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56451]
2023-07-03 13:52:56,449 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56451]
2023-07-03 13:52:56,449 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56451][0m
2023-07-03 13:52:56,653 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56451]
2023-07-03 13:52:56,701 DEBUG core 22328 16784 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:52:56,701 DEBUG core 22328 16784 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:52:56,706 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56451]
2023-07-03 13:52:56,707 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56451]
2023-07-03 13:52:56,707 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56451]
2023-07-03 13:52:56,707 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56451][0m
2023-07-03 13:52:56,930 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56451]
2023-07-03 13:52:56,978 DEBUG core 22328 2744 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:52:56,978 DEBUG core 22328 2744 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:52:56,986 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56451]
2023-07-03 13:52:56,986 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56451]
2023-07-03 13:52:56,986 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56451]
2023-07-03 13:52:56,987 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:56451][0m
2023-07-03 13:52:57,181 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56451]
2023-07-03 13:52:57,232 DEBUG core 22328 22112 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:52:57,232 DEBUG core 22328 22112 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:52:57,239 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56451]
2023-07-03 13:52:57,239 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56451]
2023-07-03 13:52:57,239 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56451]
2023-07-03 13:52:57,239 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:56451][0m
2023-07-03 13:53:03,805 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56451]
2023-07-03 13:53:03,853 DEBUG core 22328 7392 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:53:03,853 DEBUG core 22328 7392 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:53:03,858 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56451]
2023-07-03 13:53:03,858 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56451]
2023-07-03 13:53:03,858 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56451]
2023-07-03 13:53:03,858 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56451][0m
2023-07-03 13:53:04,472 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56451]
2023-07-03 13:53:04,525 DEBUG core 22328 15904 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:53:04,526 DEBUG core 22328 15904 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:53:04,531 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56451]
2023-07-03 13:53:04,531 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56451]
2023-07-03 13:53:04,531 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56451]
2023-07-03 13:53:04,532 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:56451][0m
2023-07-03 13:53:09,844 DEBUG selector_events 14360 12956 Using selector: SelectSelector
2023-07-03 13:53:11,003 DEBUG functional 14360 12956 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 13:53:11,003 DEBUG functional 14360 12956 
def backend_cleanup():
    return 1

2023-07-03 13:53:11,004 DEBUG functional 14360 12956 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 13:53:11,004 DEBUG functional 14360 12956 
def xmap(task, it):
    return 1

2023-07-03 13:53:11,004 DEBUG functional 14360 12956 
def db_update_task():
    return 1

2023-07-03 13:53:11,005 DEBUG functional 14360 12956 
def chain(*args, **kwargs):
    return 1

2023-07-03 13:53:11,005 DEBUG functional 14360 12956 
def debug_task(self):
    return 1

2023-07-03 13:53:11,005 DEBUG functional 14360 12956 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 13:53:11,006 DEBUG functional 14360 12956 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 13:53:11,006 DEBUG functional 14360 12956 
def xstarmap(task, it):
    return 1

2023-07-03 13:53:11,006 DEBUG functional 14360 12956 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 13:53:11,007 DEBUG functional 14360 12956 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 13:53:11,007 DEBUG functional 14360 12956 
def chunks(task, it, n):
    return 1

2023-07-03 13:53:13,570 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56451]
2023-07-03 13:53:13,617 DEBUG core 22328 6868 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:53:13,617 DEBUG core 22328 6868 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:53:13,622 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56451]
2023-07-03 13:53:13,623 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56451]
2023-07-03 13:53:13,623 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56451]
2023-07-03 13:53:13,623 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56451][0m
2023-07-03 13:53:14,608 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56451]
2023-07-03 13:53:14,656 DEBUG core 22328 14852 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:53:14,656 DEBUG core 22328 14852 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:53:14,662 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56451]
2023-07-03 13:53:14,662 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56451]
2023-07-03 13:53:14,662 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56451]
2023-07-03 13:53:14,663 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56451][0m
2023-07-03 13:53:15,190 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56451]
2023-07-03 13:53:15,236 DEBUG core 22328 2116 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:53:15,237 DEBUG core 22328 2116 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:53:15,242 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56451]
2023-07-03 13:53:15,242 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56451]
2023-07-03 13:53:15,243 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56451]
2023-07-03 13:53:15,243 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56451][0m
2023-07-03 13:53:15,745 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56451]
2023-07-03 13:53:15,792 DEBUG core 22328 17252 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:53:15,792 DEBUG core 22328 17252 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:53:15,797 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56451]
2023-07-03 13:53:15,797 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56451]
2023-07-03 13:53:15,798 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56451]
2023-07-03 13:53:15,798 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56451][0m
2023-07-03 13:53:27,842 DEBUG http_protocol 22328 5808 HTTP b'POST' request for ['127.0.0.1', 56406]
2023-07-03 13:53:27,981 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56406]
2023-07-03 13:53:27,982 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56406]
2023-07-03 13:53:27,982 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56406]
2023-07-03 13:53:27,982 INFO runserver 22328 5808 [mHTTP POST /api/close_positions/ 200 [0.14, 127.0.0.1:56406][0m
2023-07-03 13:53:29,654 DEBUG http_protocol 22328 5808 HTTP b'POST' request for ['127.0.0.1', 56406]
2023-07-03 13:53:29,710 WARNING log 22328 15976 Bad Request: /api/close_positions/
2023-07-03 13:53:29,710 DEBUG http_protocol 22328 5808 HTTP 400 response started for ['127.0.0.1', 56406]
2023-07-03 13:53:29,711 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56406]
2023-07-03 13:53:29,711 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56406]
2023-07-03 13:53:29,711 WARNING runserver 22328 5808 [31;1mHTTP POST /api/close_positions/ 400 [0.06, 127.0.0.1:56406][0m
2023-07-03 13:53:33,816 DEBUG http_protocol 22328 5808 HTTP b'POST' request for ['127.0.0.1', 56406]
2023-07-03 13:53:34,052 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56406]
2023-07-03 13:53:34,053 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56406]
2023-07-03 13:53:34,053 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56406]
2023-07-03 13:53:34,053 INFO runserver 22328 5808 [mHTTP POST /api/close_positions/ 200 [0.24, 127.0.0.1:56406][0m
2023-07-03 13:53:36,928 DEBUG http_protocol 22328 5808 HTTP b'GET' request for ['127.0.0.1', 56451]
2023-07-03 13:53:36,975 DEBUG core 22328 9000 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 13:53:36,975 DEBUG core 22328 9000 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 13:53:36,979 DEBUG http_protocol 22328 5808 HTTP 200 response started for ['127.0.0.1', 56451]
2023-07-03 13:53:36,979 DEBUG http_protocol 22328 5808 HTTP close for ['127.0.0.1', 56451]
2023-07-03 13:53:36,979 DEBUG http_protocol 22328 5808 HTTP response complete for ['127.0.0.1', 56451]
2023-07-03 13:53:36,979 INFO runserver 22328 5808 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56451][0m
2023-07-03 13:54:40,467 INFO autoreload 22328 15600 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 13:54:41,581 DEBUG selector_events 2108 3412 Using selector: SelectSelector
2023-07-03 13:54:42,457 INFO autoreload 2108 3412 Watching for file changes with StatReloader
2023-07-03 13:54:42,893 INFO server 2108 21512 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 13:54:42,893 INFO server 2108 21512 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 13:54:42,893 INFO server 2108 21512 Listening on TCP address 127.0.0.1:8000
2023-07-03 13:55:56,475 INFO autoreload 2108 3412 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 13:55:57,530 DEBUG selector_events 1520 22320 Using selector: SelectSelector
2023-07-03 13:55:58,355 INFO autoreload 1520 22320 Watching for file changes with StatReloader
2023-07-03 13:56:59,453 INFO autoreload 1520 22320 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 13:57:00,518 DEBUG selector_events 680 1612 Using selector: SelectSelector
2023-07-03 13:57:01,356 INFO autoreload 680 1612 Watching for file changes with StatReloader
2023-07-03 13:57:01,772 INFO server 680 18168 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 13:57:01,772 INFO server 680 18168 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 13:57:01,772 INFO server 680 18168 Listening on TCP address 127.0.0.1:8000
2023-07-03 13:57:13,467 INFO autoreload 680 1612 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 13:57:14,633 DEBUG selector_events 11668 5216 Using selector: SelectSelector
2023-07-03 13:57:15,486 INFO autoreload 11668 5216 Watching for file changes with StatReloader
2023-07-03 13:57:16,045 INFO server 11668 17424 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 13:57:16,045 INFO server 11668 17424 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 13:57:16,045 INFO server 11668 17424 Listening on TCP address 127.0.0.1:8000
2023-07-03 13:58:00,122 INFO autoreload 11668 5216 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 13:58:01,184 DEBUG selector_events 15052 5092 Using selector: SelectSelector
2023-07-03 13:58:02,071 INFO autoreload 15052 5092 Watching for file changes with StatReloader
2023-07-03 13:58:02,516 INFO server 15052 20560 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 13:58:02,517 INFO server 15052 20560 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 13:58:02,518 INFO server 15052 20560 Listening on TCP address 127.0.0.1:8000
2023-07-03 13:58:22,854 INFO autoreload 15052 5092 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 13:58:24,010 DEBUG selector_events 14496 13928 Using selector: SelectSelector
2023-07-03 13:58:24,844 INFO autoreload 14496 13928 Watching for file changes with StatReloader
2023-07-03 13:58:25,257 INFO server 14496 3844 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 13:58:25,257 INFO server 14496 3844 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 13:58:25,258 INFO server 14496 3844 Listening on TCP address 127.0.0.1:8000
2023-07-03 13:58:43,425 INFO autoreload 14496 13928 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 13:58:44,536 DEBUG selector_events 18260 14168 Using selector: SelectSelector
2023-07-03 13:58:45,403 INFO autoreload 18260 14168 Watching for file changes with StatReloader
2023-07-03 13:58:45,847 INFO server 18260 9664 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 13:58:45,847 INFO server 18260 9664 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 13:58:45,848 INFO server 18260 9664 Listening on TCP address 127.0.0.1:8000
2023-07-03 13:59:26,779 INFO autoreload 18260 14168 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 13:59:27,982 DEBUG selector_events 2744 7896 Using selector: SelectSelector
2023-07-03 13:59:28,815 INFO autoreload 2744 7896 Watching for file changes with StatReloader
2023-07-03 13:59:29,237 INFO server 2744 11072 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 13:59:29,237 INFO server 2744 11072 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 13:59:29,238 INFO server 2744 11072 Listening on TCP address 127.0.0.1:8000
2023-07-03 13:59:33,296 INFO autoreload 2744 7896 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:02:30,916 DEBUG selector_events 16584 14504 Using selector: SelectSelector
2023-07-03 14:02:32,606 DEBUG selector_events 8892 13296 Using selector: SelectSelector
2023-07-03 14:02:33,440 INFO autoreload 8892 13296 Watching for file changes with StatReloader
2023-07-03 14:02:33,859 INFO server 8892 12892 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:02:33,859 INFO server 8892 12892 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:02:33,860 INFO server 8892 12892 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:02:51,587 DEBUG http_protocol 8892 12892 HTTP b'POST' request for ['127.0.0.1', 57139]
2023-07-03 14:02:51,886 DEBUG http_protocol 8892 12892 HTTP 200 response started for ['127.0.0.1', 57139]
2023-07-03 14:02:51,887 DEBUG http_protocol 8892 12892 HTTP close for ['127.0.0.1', 57139]
2023-07-03 14:02:51,887 DEBUG http_protocol 8892 12892 HTTP response complete for ['127.0.0.1', 57139]
2023-07-03 14:02:51,887 INFO runserver 8892 12892 [mHTTP POST /api/login/ 200 [0.30, 127.0.0.1:57139][0m
2023-07-03 14:02:51,902 DEBUG http_protocol 8892 12892 HTTP b'GET' request for ['127.0.0.1', 57139]
2023-07-03 14:02:51,958 DEBUG http_protocol 8892 12892 HTTP 200 response started for ['127.0.0.1', 57139]
2023-07-03 14:02:51,959 DEBUG http_protocol 8892 12892 HTTP close for ['127.0.0.1', 57139]
2023-07-03 14:02:51,959 DEBUG http_protocol 8892 12892 HTTP response complete for ['127.0.0.1', 57139]
2023-07-03 14:02:51,959 INFO runserver 8892 12892 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:57139][0m
2023-07-03 14:02:51,961 DEBUG http_protocol 8892 12892 HTTP b'GET' request for ['127.0.0.1', 57139]
2023-07-03 14:02:52,017 DEBUG http_protocol 8892 12892 HTTP 200 response started for ['127.0.0.1', 57139]
2023-07-03 14:02:52,017 DEBUG http_protocol 8892 12892 HTTP close for ['127.0.0.1', 57139]
2023-07-03 14:02:52,017 DEBUG http_protocol 8892 12892 HTTP response complete for ['127.0.0.1', 57139]
2023-07-03 14:02:52,017 INFO runserver 8892 12892 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:57139][0m
2023-07-03 14:03:04,626 DEBUG selector_events 21032 18864 Using selector: SelectSelector
2023-07-03 14:03:05,656 DEBUG functional 21032 18864 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:03:05,656 DEBUG functional 21032 18864 
def db_update_task():
    return 1

2023-07-03 14:03:05,658 DEBUG functional 21032 18864 
def chunks(task, it, n):
    return 1

2023-07-03 14:03:05,658 DEBUG functional 21032 18864 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:03:05,658 DEBUG functional 21032 18864 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:03:05,659 DEBUG functional 21032 18864 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:03:05,659 DEBUG functional 21032 18864 
def backend_cleanup():
    return 1

2023-07-03 14:03:05,660 DEBUG functional 21032 18864 
def debug_task(self):
    return 1

2023-07-03 14:03:05,660 DEBUG functional 21032 18864 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:03:05,660 DEBUG functional 21032 18864 
def xmap(task, it):
    return 1

2023-07-03 14:03:05,661 DEBUG functional 21032 18864 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:03:05,661 DEBUG functional 21032 18864 
def xstarmap(task, it):
    return 1

2023-07-03 14:03:05,661 DEBUG functional 21032 18864 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:03:10,756 DEBUG http_protocol 8892 12892 HTTP b'GET' request for ['127.0.0.1', 57166]
2023-07-03 14:03:10,879 DEBUG core 8892 12932 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:03:10,880 DEBUG core 8892 12932 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:03:10,903 DEBUG http_protocol 8892 12892 HTTP 200 response started for ['127.0.0.1', 57166]
2023-07-03 14:03:10,903 DEBUG http_protocol 8892 12892 HTTP close for ['127.0.0.1', 57166]
2023-07-03 14:03:10,903 DEBUG http_protocol 8892 12892 HTTP response complete for ['127.0.0.1', 57166]
2023-07-03 14:03:10,903 INFO runserver 8892 12892 [mHTTP GET /api/open_positions/ 200 [0.15, 127.0.0.1:57166][0m
2023-07-03 14:03:10,971 DEBUG http_protocol 8892 12892 HTTP b'GET' request for ['127.0.0.1', 57166]
2023-07-03 14:03:10,972 DEBUG http_protocol 8892 12892 HTTP disconnect for ['127.0.0.1', 57166]
2023-07-03 14:03:10,975 DEBUG http_protocol 8892 12892 HTTP b'GET' request for ['127.0.0.1', 57170]
2023-07-03 14:03:10,977 DEBUG http_protocol 8892 12892 HTTP b'GET' request for ['127.0.0.1', 57171]
2023-07-03 14:03:10,977 DEBUG http_protocol 8892 12892 HTTP disconnect for ['127.0.0.1', 57170]
2023-07-03 14:03:10,978 DEBUG http_protocol 8892 12892 HTTP disconnect for ['127.0.0.1', 57171]
2023-07-03 14:03:10,979 DEBUG http_protocol 8892 12892 HTTP b'GET' request for ['127.0.0.1', 57172]
2023-07-03 14:03:10,983 DEBUG http_protocol 8892 12892 HTTP disconnect for ['127.0.0.1', 57172]
2023-07-03 14:03:15,816 DEBUG http_protocol 8892 12892 HTTP b'POST' request for ['127.0.0.1', 57139]
2023-07-03 14:03:15,872 DEBUG functional 8892 6160 
def xstarmap(task, it):
    return 1

2023-07-03 14:03:15,874 DEBUG functional 8892 6160 
def db_update_task():
    return 1

2023-07-03 14:03:15,874 DEBUG functional 8892 6160 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:03:15,875 DEBUG functional 8892 6160 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:03:15,875 DEBUG functional 8892 6160 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:03:15,875 DEBUG functional 8892 6160 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:03:15,876 DEBUG functional 8892 6160 
def chunks(task, it, n):
    return 1

2023-07-03 14:03:15,876 DEBUG functional 8892 6160 
def debug_task(self):
    return 1

2023-07-03 14:03:15,877 DEBUG functional 8892 6160 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:03:15,877 DEBUG functional 8892 6160 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:03:15,877 DEBUG functional 8892 6160 
def xmap(task, it):
    return 1

2023-07-03 14:03:15,878 DEBUG functional 8892 6160 
def backend_cleanup():
    return 1

2023-07-03 14:03:15,878 DEBUG functional 8892 6160 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:03:15,989 DEBUG http_protocol 8892 12892 HTTP 200 response started for ['127.0.0.1', 57139]
2023-07-03 14:03:15,989 DEBUG http_protocol 8892 12892 HTTP close for ['127.0.0.1', 57139]
2023-07-03 14:03:15,989 DEBUG http_protocol 8892 12892 HTTP response complete for ['127.0.0.1', 57139]
2023-07-03 14:03:15,990 INFO runserver 8892 12892 [mHTTP POST /api/market_buy/ 200 [0.17, 127.0.0.1:57139][0m
2023-07-03 14:03:17,168 DEBUG http_protocol 8892 12892 HTTP b'GET' request for ['127.0.0.1', 57180]
2023-07-03 14:03:17,217 DEBUG core 8892 3140 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:03:17,217 DEBUG core 8892 3140 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:03:17,223 DEBUG http_protocol 8892 12892 HTTP 200 response started for ['127.0.0.1', 57180]
2023-07-03 14:03:17,223 DEBUG http_protocol 8892 12892 HTTP close for ['127.0.0.1', 57180]
2023-07-03 14:03:17,224 DEBUG http_protocol 8892 12892 HTTP response complete for ['127.0.0.1', 57180]
2023-07-03 14:03:17,224 INFO runserver 8892 12892 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:57180][0m
2023-07-03 14:04:23,462 DEBUG http_protocol 8892 12892 HTTP b'POST' request for ['127.0.0.1', 57182]
2023-07-03 14:04:23,596 DEBUG http_protocol 8892 12892 HTTP 200 response started for ['127.0.0.1', 57182]
2023-07-03 14:04:23,596 DEBUG http_protocol 8892 12892 HTTP close for ['127.0.0.1', 57182]
2023-07-03 14:04:23,596 DEBUG http_protocol 8892 12892 HTTP response complete for ['127.0.0.1', 57182]
2023-07-03 14:04:23,596 INFO runserver 8892 12892 [mHTTP POST /api/close_positions/ 200 [0.13, 127.0.0.1:57182][0m
2023-07-03 14:04:52,026 DEBUG http_protocol 8892 12892 HTTP b'GET' request for ['127.0.0.1', 57187]
2023-07-03 14:04:52,073 DEBUG core 8892 14704 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:04:52,074 DEBUG core 8892 14704 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:04:52,078 DEBUG http_protocol 8892 12892 HTTP 200 response started for ['127.0.0.1', 57187]
2023-07-03 14:04:52,078 DEBUG http_protocol 8892 12892 HTTP close for ['127.0.0.1', 57187]
2023-07-03 14:04:52,078 DEBUG http_protocol 8892 12892 HTTP response complete for ['127.0.0.1', 57187]
2023-07-03 14:04:52,078 INFO runserver 8892 12892 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:57187][0m
2023-07-03 14:05:28,595 INFO autoreload 8892 13296 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:05:29,877 DEBUG selector_events 8636 16920 Using selector: SelectSelector
2023-07-03 14:05:30,730 INFO autoreload 8636 16920 Watching for file changes with StatReloader
2023-07-03 14:05:31,253 INFO server 8636 21948 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:05:31,253 INFO server 8636 21948 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:05:31,253 INFO server 8636 21948 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:05:32,827 DEBUG selector_events 3880 14676 Using selector: SelectSelector
2023-07-03 14:05:33,900 DEBUG functional 3880 14676 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:05:33,901 DEBUG functional 3880 14676 
def db_update_task():
    return 1

2023-07-03 14:05:33,902 DEBUG functional 3880 14676 
def chunks(task, it, n):
    return 1

2023-07-03 14:05:33,903 DEBUG functional 3880 14676 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:05:33,903 DEBUG functional 3880 14676 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:05:33,904 DEBUG functional 3880 14676 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:05:33,904 DEBUG functional 3880 14676 
def backend_cleanup():
    return 1

2023-07-03 14:05:33,904 DEBUG functional 3880 14676 
def debug_task(self):
    return 1

2023-07-03 14:05:33,905 DEBUG functional 3880 14676 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:05:33,905 DEBUG functional 3880 14676 
def xmap(task, it):
    return 1

2023-07-03 14:05:33,905 DEBUG functional 3880 14676 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:05:33,906 DEBUG functional 3880 14676 
def xstarmap(task, it):
    return 1

2023-07-03 14:05:33,906 DEBUG functional 3880 14676 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:05:40,603 DEBUG http_protocol 8636 21948 HTTP b'POST' request for ['127.0.0.1', 57217]
2023-07-03 14:05:40,669 DEBUG functional 8636 9960 
def xstarmap(task, it):
    return 1

2023-07-03 14:05:40,671 DEBUG functional 8636 9960 
def db_update_task():
    return 1

2023-07-03 14:05:40,671 DEBUG functional 8636 9960 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:05:40,672 DEBUG functional 8636 9960 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:05:40,672 DEBUG functional 8636 9960 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:05:40,672 DEBUG functional 8636 9960 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:05:40,673 DEBUG functional 8636 9960 
def chunks(task, it, n):
    return 1

2023-07-03 14:05:40,673 DEBUG functional 8636 9960 
def debug_task(self):
    return 1

2023-07-03 14:05:40,674 DEBUG functional 8636 9960 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:05:40,674 DEBUG functional 8636 9960 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:05:40,674 DEBUG functional 8636 9960 
def xmap(task, it):
    return 1

2023-07-03 14:05:40,675 DEBUG functional 8636 9960 
def backend_cleanup():
    return 1

2023-07-03 14:05:40,675 DEBUG functional 8636 9960 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:05:40,781 DEBUG http_protocol 8636 21948 HTTP 200 response started for ['127.0.0.1', 57217]
2023-07-03 14:05:40,781 DEBUG http_protocol 8636 21948 HTTP close for ['127.0.0.1', 57217]
2023-07-03 14:05:40,781 DEBUG http_protocol 8636 21948 HTTP response complete for ['127.0.0.1', 57217]
2023-07-03 14:05:40,782 INFO runserver 8636 21948 [mHTTP POST /api/market_buy/ 200 [0.18, 127.0.0.1:57217][0m
2023-07-03 14:05:41,864 DEBUG http_protocol 8636 21948 HTTP b'GET' request for ['127.0.0.1', 57225]
2023-07-03 14:05:42,017 DEBUG core 8636 7800 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:05:42,017 DEBUG core 8636 7800 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:05:42,037 DEBUG http_protocol 8636 21948 HTTP 200 response started for ['127.0.0.1', 57225]
2023-07-03 14:05:42,038 DEBUG http_protocol 8636 21948 HTTP close for ['127.0.0.1', 57225]
2023-07-03 14:05:42,038 DEBUG http_protocol 8636 21948 HTTP response complete for ['127.0.0.1', 57225]
2023-07-03 14:05:42,038 INFO runserver 8636 21948 [mHTTP GET /api/open_positions/ 200 [0.18, 127.0.0.1:57225][0m
2023-07-03 14:06:02,218 DEBUG selector_events 532 4116 Using selector: SelectSelector
2023-07-03 14:06:03,268 DEBUG functional 532 4116 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:06:03,268 DEBUG functional 532 4116 
def db_update_task():
    return 1

2023-07-03 14:06:03,269 DEBUG functional 532 4116 
def chunks(task, it, n):
    return 1

2023-07-03 14:06:03,270 DEBUG functional 532 4116 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:06:03,270 DEBUG functional 532 4116 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:06:03,271 DEBUG functional 532 4116 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:06:03,271 DEBUG functional 532 4116 
def backend_cleanup():
    return 1

2023-07-03 14:06:03,271 DEBUG functional 532 4116 
def debug_task(self):
    return 1

2023-07-03 14:06:03,272 DEBUG functional 532 4116 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:06:03,272 DEBUG functional 532 4116 
def xmap(task, it):
    return 1

2023-07-03 14:06:03,272 DEBUG functional 532 4116 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:06:03,273 DEBUG functional 532 4116 
def xstarmap(task, it):
    return 1

2023-07-03 14:06:03,273 DEBUG functional 532 4116 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:06:09,272 DEBUG http_protocol 8636 21948 HTTP b'POST' request for ['127.0.0.1', 57217]
2023-07-03 14:06:09,410 DEBUG http_protocol 8636 21948 HTTP 200 response started for ['127.0.0.1', 57217]
2023-07-03 14:06:09,410 DEBUG http_protocol 8636 21948 HTTP close for ['127.0.0.1', 57217]
2023-07-03 14:06:09,411 DEBUG http_protocol 8636 21948 HTTP response complete for ['127.0.0.1', 57217]
2023-07-03 14:06:09,411 INFO runserver 8636 21948 [mHTTP POST /api/close_positions/ 200 [0.14, 127.0.0.1:57217][0m
2023-07-03 14:06:10,568 DEBUG http_protocol 8636 21948 HTTP b'GET' request for ['127.0.0.1', 57225]
2023-07-03 14:06:10,615 DEBUG core 8636 11196 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:06:10,616 DEBUG core 8636 11196 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:06:10,620 DEBUG http_protocol 8636 21948 HTTP 200 response started for ['127.0.0.1', 57225]
2023-07-03 14:06:10,621 DEBUG http_protocol 8636 21948 HTTP close for ['127.0.0.1', 57225]
2023-07-03 14:06:10,621 DEBUG http_protocol 8636 21948 HTTP response complete for ['127.0.0.1', 57225]
2023-07-03 14:06:10,621 INFO runserver 8636 21948 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:57225][0m
2023-07-03 14:06:18,743 INFO autoreload 8636 16920 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:06:19,834 DEBUG selector_events 21468 9716 Using selector: SelectSelector
2023-07-03 14:06:20,688 INFO autoreload 21468 9716 Watching for file changes with StatReloader
2023-07-03 14:06:21,236 INFO server 21468 1800 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:06:21,236 INFO server 21468 1800 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:06:21,237 INFO server 21468 1800 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:06:43,629 DEBUG selector_events 13908 21168 Using selector: SelectSelector
2023-07-03 14:06:44,781 DEBUG functional 13908 21168 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:06:44,781 DEBUG functional 13908 21168 
def db_update_task():
    return 1

2023-07-03 14:06:44,783 DEBUG functional 13908 21168 
def chunks(task, it, n):
    return 1

2023-07-03 14:06:44,783 DEBUG functional 13908 21168 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:06:44,783 DEBUG functional 13908 21168 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:06:44,784 DEBUG functional 13908 21168 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:06:44,784 DEBUG functional 13908 21168 
def backend_cleanup():
    return 1

2023-07-03 14:06:44,785 DEBUG functional 13908 21168 
def debug_task(self):
    return 1

2023-07-03 14:06:44,785 DEBUG functional 13908 21168 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:06:44,785 DEBUG functional 13908 21168 
def xmap(task, it):
    return 1

2023-07-03 14:06:44,785 DEBUG functional 13908 21168 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:06:44,786 DEBUG functional 13908 21168 
def xstarmap(task, it):
    return 1

2023-07-03 14:06:44,786 DEBUG functional 13908 21168 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:06:49,997 DEBUG http_protocol 21468 1800 HTTP b'POST' request for ['127.0.0.1', 57278]
2023-07-03 14:06:50,058 DEBUG functional 21468 17476 
def xstarmap(task, it):
    return 1

2023-07-03 14:06:50,059 DEBUG functional 21468 17476 
def db_update_task():
    return 1

2023-07-03 14:06:50,060 DEBUG functional 21468 17476 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:06:50,060 DEBUG functional 21468 17476 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:06:50,061 DEBUG functional 21468 17476 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:06:50,061 DEBUG functional 21468 17476 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:06:50,061 DEBUG functional 21468 17476 
def chunks(task, it, n):
    return 1

2023-07-03 14:06:50,061 DEBUG functional 21468 17476 
def debug_task(self):
    return 1

2023-07-03 14:06:50,062 DEBUG functional 21468 17476 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:06:50,062 DEBUG functional 21468 17476 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:06:50,063 DEBUG functional 21468 17476 
def xmap(task, it):
    return 1

2023-07-03 14:06:50,063 DEBUG functional 21468 17476 
def backend_cleanup():
    return 1

2023-07-03 14:06:50,063 DEBUG functional 21468 17476 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:06:50,155 DEBUG http_protocol 21468 1800 HTTP 200 response started for ['127.0.0.1', 57278]
2023-07-03 14:06:50,156 DEBUG http_protocol 21468 1800 HTTP close for ['127.0.0.1', 57278]
2023-07-03 14:06:50,156 DEBUG http_protocol 21468 1800 HTTP response complete for ['127.0.0.1', 57278]
2023-07-03 14:06:50,156 INFO runserver 21468 1800 [mHTTP POST /api/market_buy/ 200 [0.16, 127.0.0.1:57278][0m
2023-07-03 14:06:51,233 DEBUG http_protocol 21468 1800 HTTP b'GET' request for ['127.0.0.1', 57286]
2023-07-03 14:06:51,347 DEBUG core 21468 5820 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:06:51,347 DEBUG core 21468 5820 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:06:51,368 DEBUG http_protocol 21468 1800 HTTP 200 response started for ['127.0.0.1', 57286]
2023-07-03 14:06:51,369 DEBUG http_protocol 21468 1800 HTTP close for ['127.0.0.1', 57286]
2023-07-03 14:06:51,369 DEBUG http_protocol 21468 1800 HTTP response complete for ['127.0.0.1', 57286]
2023-07-03 14:06:51,369 INFO runserver 21468 1800 [mHTTP GET /api/open_positions/ 200 [0.14, 127.0.0.1:57286][0m
2023-07-03 14:07:07,578 DEBUG selector_events 5808 10540 Using selector: SelectSelector
2023-07-03 14:07:08,704 DEBUG functional 5808 10540 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:07:08,704 DEBUG functional 5808 10540 
def backend_cleanup():
    return 1

2023-07-03 14:07:08,705 DEBUG functional 5808 10540 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:07:08,705 DEBUG functional 5808 10540 
def xmap(task, it):
    return 1

2023-07-03 14:07:08,706 DEBUG functional 5808 10540 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:07:08,706 DEBUG functional 5808 10540 
def debug_task(self):
    return 1

2023-07-03 14:07:08,706 DEBUG functional 5808 10540 
def xstarmap(task, it):
    return 1

2023-07-03 14:07:08,706 DEBUG functional 5808 10540 
def db_update_task():
    return 1

2023-07-03 14:07:08,707 DEBUG functional 5808 10540 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:07:08,707 DEBUG functional 5808 10540 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:07:08,707 DEBUG functional 5808 10540 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:07:08,708 DEBUG functional 5808 10540 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:07:08,708 DEBUG functional 5808 10540 
def chunks(task, it, n):
    return 1

2023-07-03 14:07:10,900 DEBUG http_protocol 21468 1800 HTTP b'GET' request for ['127.0.0.1', 57286]
2023-07-03 14:07:10,947 DEBUG core 21468 16984 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:07:10,947 DEBUG core 21468 16984 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:07:10,952 DEBUG http_protocol 21468 1800 HTTP 200 response started for ['127.0.0.1', 57286]
2023-07-03 14:07:10,953 DEBUG http_protocol 21468 1800 HTTP close for ['127.0.0.1', 57286]
2023-07-03 14:07:10,953 DEBUG http_protocol 21468 1800 HTTP response complete for ['127.0.0.1', 57286]
2023-07-03 14:07:10,953 INFO runserver 21468 1800 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:57286][0m
2023-07-03 14:07:11,538 DEBUG http_protocol 21468 1800 HTTP b'GET' request for ['127.0.0.1', 57286]
2023-07-03 14:07:11,586 DEBUG core 21468 428 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:07:11,587 DEBUG core 21468 428 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:07:11,591 DEBUG http_protocol 21468 1800 HTTP 200 response started for ['127.0.0.1', 57286]
2023-07-03 14:07:11,592 DEBUG http_protocol 21468 1800 HTTP close for ['127.0.0.1', 57286]
2023-07-03 14:07:11,592 DEBUG http_protocol 21468 1800 HTTP response complete for ['127.0.0.1', 57286]
2023-07-03 14:07:11,592 INFO runserver 21468 1800 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:57286][0m
2023-07-03 14:07:11,960 DEBUG http_protocol 21468 1800 HTTP b'GET' request for ['127.0.0.1', 57286]
2023-07-03 14:07:12,009 DEBUG core 21468 10868 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:07:12,009 DEBUG core 21468 10868 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:07:12,014 DEBUG http_protocol 21468 1800 HTTP 200 response started for ['127.0.0.1', 57286]
2023-07-03 14:07:12,015 DEBUG http_protocol 21468 1800 HTTP close for ['127.0.0.1', 57286]
2023-07-03 14:07:12,015 DEBUG http_protocol 21468 1800 HTTP response complete for ['127.0.0.1', 57286]
2023-07-03 14:07:12,015 INFO runserver 21468 1800 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:57286][0m
2023-07-03 14:07:12,511 DEBUG http_protocol 21468 1800 HTTP b'GET' request for ['127.0.0.1', 57286]
2023-07-03 14:07:12,557 DEBUG core 21468 7188 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:07:12,557 DEBUG core 21468 7188 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:07:12,562 DEBUG http_protocol 21468 1800 HTTP 200 response started for ['127.0.0.1', 57286]
2023-07-03 14:07:12,562 DEBUG http_protocol 21468 1800 HTTP close for ['127.0.0.1', 57286]
2023-07-03 14:07:12,563 DEBUG http_protocol 21468 1800 HTTP response complete for ['127.0.0.1', 57286]
2023-07-03 14:07:12,563 INFO runserver 21468 1800 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:57286][0m
2023-07-03 14:07:13,472 DEBUG http_protocol 21468 1800 HTTP b'GET' request for ['127.0.0.1', 57286]
2023-07-03 14:07:13,518 DEBUG core 21468 18648 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:07:13,518 DEBUG core 21468 18648 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:07:13,522 DEBUG http_protocol 21468 1800 HTTP 200 response started for ['127.0.0.1', 57286]
2023-07-03 14:07:13,523 DEBUG http_protocol 21468 1800 HTTP close for ['127.0.0.1', 57286]
2023-07-03 14:07:13,523 DEBUG http_protocol 21468 1800 HTTP response complete for ['127.0.0.1', 57286]
2023-07-03 14:07:13,523 INFO runserver 21468 1800 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:57286][0m
2023-07-03 14:07:18,168 DEBUG http_protocol 21468 1800 HTTP b'GET' request for ['127.0.0.1', 57286]
2023-07-03 14:07:18,214 DEBUG core 21468 15928 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:07:18,215 DEBUG core 21468 15928 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:07:18,219 DEBUG http_protocol 21468 1800 HTTP 200 response started for ['127.0.0.1', 57286]
2023-07-03 14:07:18,219 DEBUG http_protocol 21468 1800 HTTP close for ['127.0.0.1', 57286]
2023-07-03 14:07:18,219 DEBUG http_protocol 21468 1800 HTTP response complete for ['127.0.0.1', 57286]
2023-07-03 14:07:18,220 INFO runserver 21468 1800 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:57286][0m
2023-07-03 14:07:18,604 DEBUG http_protocol 21468 1800 HTTP b'GET' request for ['127.0.0.1', 57286]
2023-07-03 14:07:18,651 DEBUG core 21468 19256 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:07:18,652 DEBUG core 21468 19256 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:07:18,657 DEBUG http_protocol 21468 1800 HTTP 200 response started for ['127.0.0.1', 57286]
2023-07-03 14:07:18,657 DEBUG http_protocol 21468 1800 HTTP close for ['127.0.0.1', 57286]
2023-07-03 14:07:18,657 DEBUG http_protocol 21468 1800 HTTP response complete for ['127.0.0.1', 57286]
2023-07-03 14:07:18,657 INFO runserver 21468 1800 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:57286][0m
2023-07-03 14:07:18,938 DEBUG http_protocol 21468 1800 HTTP b'GET' request for ['127.0.0.1', 57286]
2023-07-03 14:07:18,988 DEBUG core 21468 12560 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:07:18,988 DEBUG core 21468 12560 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:07:18,994 DEBUG http_protocol 21468 1800 HTTP 200 response started for ['127.0.0.1', 57286]
2023-07-03 14:07:18,994 DEBUG http_protocol 21468 1800 HTTP close for ['127.0.0.1', 57286]
2023-07-03 14:07:18,994 DEBUG http_protocol 21468 1800 HTTP response complete for ['127.0.0.1', 57286]
2023-07-03 14:07:18,994 INFO runserver 21468 1800 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:57286][0m
2023-07-03 14:07:19,325 DEBUG http_protocol 21468 1800 HTTP b'GET' request for ['127.0.0.1', 57286]
2023-07-03 14:07:19,373 DEBUG core 21468 8736 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:07:19,373 DEBUG core 21468 8736 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:07:19,378 DEBUG http_protocol 21468 1800 HTTP 200 response started for ['127.0.0.1', 57286]
2023-07-03 14:07:19,379 DEBUG http_protocol 21468 1800 HTTP close for ['127.0.0.1', 57286]
2023-07-03 14:07:19,379 DEBUG http_protocol 21468 1800 HTTP response complete for ['127.0.0.1', 57286]
2023-07-03 14:07:19,379 INFO runserver 21468 1800 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:57286][0m
2023-07-03 14:07:19,657 DEBUG http_protocol 21468 1800 HTTP b'GET' request for ['127.0.0.1', 57286]
2023-07-03 14:07:19,708 DEBUG core 21468 19856 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:07:19,708 DEBUG core 21468 19856 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:07:19,714 DEBUG http_protocol 21468 1800 HTTP 200 response started for ['127.0.0.1', 57286]
2023-07-03 14:07:19,714 DEBUG http_protocol 21468 1800 HTTP close for ['127.0.0.1', 57286]
2023-07-03 14:07:19,715 DEBUG http_protocol 21468 1800 HTTP response complete for ['127.0.0.1', 57286]
2023-07-03 14:07:19,715 INFO runserver 21468 1800 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:57286][0m
2023-07-03 14:07:27,832 DEBUG http_protocol 21468 1800 HTTP b'GET' request for ['127.0.0.1', 57286]
2023-07-03 14:07:27,882 DEBUG core 21468 14860 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:07:27,882 DEBUG core 21468 14860 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:07:27,887 DEBUG http_protocol 21468 1800 HTTP 200 response started for ['127.0.0.1', 57286]
2023-07-03 14:07:27,887 DEBUG http_protocol 21468 1800 HTTP close for ['127.0.0.1', 57286]
2023-07-03 14:07:27,887 DEBUG http_protocol 21468 1800 HTTP response complete for ['127.0.0.1', 57286]
2023-07-03 14:07:27,887 INFO runserver 21468 1800 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:57286][0m
2023-07-03 14:07:35,465 DEBUG http_protocol 21468 1800 HTTP b'POST' request for ['127.0.0.1', 57278]
2023-07-03 14:07:35,597 DEBUG http_protocol 21468 1800 HTTP 200 response started for ['127.0.0.1', 57278]
2023-07-03 14:07:35,598 DEBUG http_protocol 21468 1800 HTTP close for ['127.0.0.1', 57278]
2023-07-03 14:07:35,598 DEBUG http_protocol 21468 1800 HTTP response complete for ['127.0.0.1', 57278]
2023-07-03 14:07:35,598 INFO runserver 21468 1800 [mHTTP POST /api/close_positions/ 200 [0.13, 127.0.0.1:57278][0m
2023-07-03 14:09:14,980 INFO autoreload 21468 9716 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:09:16,269 DEBUG selector_events 5216 18596 Using selector: SelectSelector
2023-07-03 14:09:17,111 INFO autoreload 5216 18596 Watching for file changes with StatReloader
2023-07-03 14:09:17,525 INFO server 5216 4564 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:09:17,526 INFO server 5216 4564 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:09:17,526 INFO server 5216 4564 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:09:19,657 DEBUG selector_events 10388 2140 Using selector: SelectSelector
2023-07-03 14:09:20,816 DEBUG functional 10388 2140 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:09:20,816 DEBUG functional 10388 2140 
def db_update_task():
    return 1

2023-07-03 14:09:20,818 DEBUG functional 10388 2140 
def chunks(task, it, n):
    return 1

2023-07-03 14:09:20,818 DEBUG functional 10388 2140 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:09:20,818 DEBUG functional 10388 2140 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:09:20,819 DEBUG functional 10388 2140 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:09:20,819 DEBUG functional 10388 2140 
def backend_cleanup():
    return 1

2023-07-03 14:09:20,819 DEBUG functional 10388 2140 
def debug_task(self):
    return 1

2023-07-03 14:09:20,820 DEBUG functional 10388 2140 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:09:20,820 DEBUG functional 10388 2140 
def xmap(task, it):
    return 1

2023-07-03 14:09:20,820 DEBUG functional 10388 2140 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:09:20,821 DEBUG functional 10388 2140 
def xstarmap(task, it):
    return 1

2023-07-03 14:09:20,821 DEBUG functional 10388 2140 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:09:21,328 DEBUG http_protocol 5216 4564 HTTP b'GET' request for ['127.0.0.1', 57344]
2023-07-03 14:09:21,448 DEBUG core 5216 18148 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:09:21,449 DEBUG core 5216 18148 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:09:21,473 DEBUG http_protocol 5216 4564 HTTP 200 response started for ['127.0.0.1', 57344]
2023-07-03 14:09:21,473 DEBUG http_protocol 5216 4564 HTTP close for ['127.0.0.1', 57344]
2023-07-03 14:09:21,473 DEBUG http_protocol 5216 4564 HTTP response complete for ['127.0.0.1', 57344]
2023-07-03 14:09:21,473 INFO runserver 5216 4564 [mHTTP GET /api/open_positions/ 200 [0.15, 127.0.0.1:57344][0m
2023-07-03 14:09:26,068 DEBUG http_protocol 5216 4564 HTTP b'POST' request for ['127.0.0.1', 57352]
2023-07-03 14:09:26,128 DEBUG functional 5216 18396 
def xstarmap(task, it):
    return 1

2023-07-03 14:09:26,130 DEBUG functional 5216 18396 
def db_update_task():
    return 1

2023-07-03 14:09:26,130 DEBUG functional 5216 18396 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:09:26,131 DEBUG functional 5216 18396 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:09:26,131 DEBUG functional 5216 18396 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:09:26,131 DEBUG functional 5216 18396 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:09:26,133 DEBUG functional 5216 18396 
def chunks(task, it, n):
    return 1

2023-07-03 14:09:26,133 DEBUG functional 5216 18396 
def debug_task(self):
    return 1

2023-07-03 14:09:26,134 DEBUG functional 5216 18396 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:09:26,134 DEBUG functional 5216 18396 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:09:26,134 DEBUG functional 5216 18396 
def xmap(task, it):
    return 1

2023-07-03 14:09:26,135 DEBUG functional 5216 18396 
def backend_cleanup():
    return 1

2023-07-03 14:09:26,135 DEBUG functional 5216 18396 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:09:26,287 DEBUG http_protocol 5216 4564 HTTP 200 response started for ['127.0.0.1', 57352]
2023-07-03 14:09:26,287 DEBUG http_protocol 5216 4564 HTTP close for ['127.0.0.1', 57352]
2023-07-03 14:09:26,287 DEBUG http_protocol 5216 4564 HTTP response complete for ['127.0.0.1', 57352]
2023-07-03 14:09:26,287 INFO runserver 5216 4564 [mHTTP POST /api/market_buy/ 200 [0.22, 127.0.0.1:57352][0m
2023-07-03 14:09:28,008 DEBUG http_protocol 5216 4564 HTTP b'GET' request for ['127.0.0.1', 57344]
2023-07-03 14:09:28,057 DEBUG core 5216 14768 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:09:28,057 DEBUG core 5216 14768 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:09:28,062 DEBUG http_protocol 5216 4564 HTTP 200 response started for ['127.0.0.1', 57344]
2023-07-03 14:09:28,062 DEBUG http_protocol 5216 4564 HTTP close for ['127.0.0.1', 57344]
2023-07-03 14:09:28,062 DEBUG http_protocol 5216 4564 HTTP response complete for ['127.0.0.1', 57344]
2023-07-03 14:09:28,062 INFO runserver 5216 4564 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:57344][0m
2023-07-03 14:09:38,001 DEBUG http_protocol 5216 4564 HTTP b'POST' request for ['127.0.0.1', 57352]
2023-07-03 14:09:38,144 DEBUG http_protocol 5216 4564 HTTP 200 response started for ['127.0.0.1', 57352]
2023-07-03 14:09:38,145 DEBUG http_protocol 5216 4564 HTTP close for ['127.0.0.1', 57352]
2023-07-03 14:09:38,145 DEBUG http_protocol 5216 4564 HTTP response complete for ['127.0.0.1', 57352]
2023-07-03 14:09:38,145 INFO runserver 5216 4564 [mHTTP POST /api/close_positions/ 200 [0.14, 127.0.0.1:57352][0m
2023-07-03 14:10:06,439 DEBUG http_protocol 5216 4564 HTTP b'POST' request for ['127.0.0.1', 57352]
2023-07-03 14:10:06,562 DEBUG http_protocol 5216 4564 HTTP 200 response started for ['127.0.0.1', 57352]
2023-07-03 14:10:06,562 DEBUG http_protocol 5216 4564 HTTP close for ['127.0.0.1', 57352]
2023-07-03 14:10:06,562 DEBUG http_protocol 5216 4564 HTTP response complete for ['127.0.0.1', 57352]
2023-07-03 14:10:06,562 INFO runserver 5216 4564 [mHTTP POST /api/market_buy/ 200 [0.12, 127.0.0.1:57352][0m
2023-07-03 14:10:07,788 DEBUG http_protocol 5216 4564 HTTP b'GET' request for ['127.0.0.1', 57344]
2023-07-03 14:10:07,837 DEBUG core 5216 20584 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:10:07,837 DEBUG core 5216 20584 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:10:07,842 DEBUG http_protocol 5216 4564 HTTP 200 response started for ['127.0.0.1', 57344]
2023-07-03 14:10:07,843 DEBUG http_protocol 5216 4564 HTTP close for ['127.0.0.1', 57344]
2023-07-03 14:10:07,843 DEBUG http_protocol 5216 4564 HTTP response complete for ['127.0.0.1', 57344]
2023-07-03 14:10:07,843 INFO runserver 5216 4564 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:57344][0m
2023-07-03 14:10:13,785 DEBUG http_protocol 5216 4564 HTTP b'POST' request for ['127.0.0.1', 57352]
2023-07-03 14:10:13,918 DEBUG http_protocol 5216 4564 HTTP 200 response started for ['127.0.0.1', 57352]
2023-07-03 14:10:13,918 DEBUG http_protocol 5216 4564 HTTP close for ['127.0.0.1', 57352]
2023-07-03 14:10:13,918 DEBUG http_protocol 5216 4564 HTTP response complete for ['127.0.0.1', 57352]
2023-07-03 14:10:13,918 INFO runserver 5216 4564 [mHTTP POST /api/close_positions/ 200 [0.13, 127.0.0.1:57352][0m
2023-07-03 14:10:59,913 INFO autoreload 5216 18596 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:11:00,971 DEBUG selector_events 9996 11864 Using selector: SelectSelector
2023-07-03 14:11:01,801 INFO autoreload 9996 11864 Watching for file changes with StatReloader
2023-07-03 14:11:02,239 INFO server 9996 7956 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:11:02,239 INFO server 9996 7956 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:11:02,240 INFO server 9996 7956 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:11:07,839 DEBUG selector_events 17376 11568 Using selector: SelectSelector
2023-07-03 14:11:08,984 DEBUG functional 17376 11568 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:11:08,985 DEBUG functional 17376 11568 
def db_update_task():
    return 1

2023-07-03 14:11:08,986 DEBUG functional 17376 11568 
def chunks(task, it, n):
    return 1

2023-07-03 14:11:08,987 DEBUG functional 17376 11568 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:11:08,987 DEBUG functional 17376 11568 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:11:08,987 DEBUG functional 17376 11568 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:11:08,988 DEBUG functional 17376 11568 
def backend_cleanup():
    return 1

2023-07-03 14:11:08,988 DEBUG functional 17376 11568 
def debug_task(self):
    return 1

2023-07-03 14:11:08,988 DEBUG functional 17376 11568 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:11:08,989 DEBUG functional 17376 11568 
def xmap(task, it):
    return 1

2023-07-03 14:11:08,989 DEBUG functional 17376 11568 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:11:08,989 DEBUG functional 17376 11568 
def xstarmap(task, it):
    return 1

2023-07-03 14:11:08,990 DEBUG functional 17376 11568 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:11:12,773 DEBUG http_protocol 9996 7956 HTTP b'POST' request for ['127.0.0.1', 57408]
2023-07-03 14:11:12,835 DEBUG functional 9996 10064 
def xstarmap(task, it):
    return 1

2023-07-03 14:11:12,837 DEBUG functional 9996 10064 
def db_update_task():
    return 1

2023-07-03 14:11:12,837 DEBUG functional 9996 10064 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:11:12,838 DEBUG functional 9996 10064 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:11:12,838 DEBUG functional 9996 10064 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:11:12,838 DEBUG functional 9996 10064 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:11:12,839 DEBUG functional 9996 10064 
def chunks(task, it, n):
    return 1

2023-07-03 14:11:12,839 DEBUG functional 9996 10064 
def debug_task(self):
    return 1

2023-07-03 14:11:12,839 DEBUG functional 9996 10064 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:11:12,840 DEBUG functional 9996 10064 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:11:12,840 DEBUG functional 9996 10064 
def xmap(task, it):
    return 1

2023-07-03 14:11:12,841 DEBUG functional 9996 10064 
def backend_cleanup():
    return 1

2023-07-03 14:11:12,841 DEBUG functional 9996 10064 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:11:12,960 DEBUG http_protocol 9996 7956 HTTP 200 response started for ['127.0.0.1', 57408]
2023-07-03 14:11:12,960 DEBUG http_protocol 9996 7956 HTTP close for ['127.0.0.1', 57408]
2023-07-03 14:11:12,960 DEBUG http_protocol 9996 7956 HTTP response complete for ['127.0.0.1', 57408]
2023-07-03 14:11:12,960 INFO runserver 9996 7956 [mHTTP POST /api/market_buy/ 200 [0.19, 127.0.0.1:57408][0m
2023-07-03 14:11:22,491 DEBUG http_protocol 9996 7956 HTTP b'POST' request for ['127.0.0.1', 57408]
2023-07-03 14:11:22,637 DEBUG http_protocol 9996 7956 HTTP 200 response started for ['127.0.0.1', 57408]
2023-07-03 14:11:22,637 DEBUG http_protocol 9996 7956 HTTP close for ['127.0.0.1', 57408]
2023-07-03 14:11:22,637 DEBUG http_protocol 9996 7956 HTTP response complete for ['127.0.0.1', 57408]
2023-07-03 14:11:22,637 INFO runserver 9996 7956 [mHTTP POST /api/close_positions/ 200 [0.15, 127.0.0.1:57408][0m
2023-07-03 14:12:25,295 INFO autoreload 9996 11864 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:12:26,370 DEBUG selector_events 8388 3844 Using selector: SelectSelector
2023-07-03 14:12:27,209 INFO autoreload 8388 3844 Watching for file changes with StatReloader
2023-07-03 14:12:27,622 INFO server 8388 13840 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:12:27,622 INFO server 8388 13840 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:12:27,622 INFO server 8388 13840 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:13:22,695 INFO autoreload 8388 3844 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:13:23,815 DEBUG selector_events 20268 4760 Using selector: SelectSelector
2023-07-03 14:13:24,672 INFO autoreload 20268 4760 Watching for file changes with StatReloader
2023-07-03 14:13:25,087 INFO server 20268 14240 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:13:25,087 INFO server 20268 14240 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:13:25,088 INFO server 20268 14240 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:13:57,387 INFO autoreload 20268 4760 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:13:58,490 DEBUG selector_events 10216 13592 Using selector: SelectSelector
2023-07-03 14:13:59,451 INFO autoreload 10216 13592 Watching for file changes with StatReloader
2023-07-03 14:13:59,931 INFO server 10216 5568 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:13:59,932 INFO server 10216 5568 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:13:59,932 INFO server 10216 5568 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:14:19,059 DEBUG selector_events 8636 13624 Using selector: SelectSelector
2023-07-03 14:14:20,075 DEBUG functional 8636 13624 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:14:20,076 DEBUG functional 8636 13624 
def db_update_task():
    return 1

2023-07-03 14:14:20,077 DEBUG functional 8636 13624 
def chunks(task, it, n):
    return 1

2023-07-03 14:14:20,077 DEBUG functional 8636 13624 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:14:20,078 DEBUG functional 8636 13624 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:14:20,078 DEBUG functional 8636 13624 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:14:20,078 DEBUG functional 8636 13624 
def backend_cleanup():
    return 1

2023-07-03 14:14:20,079 DEBUG functional 8636 13624 
def debug_task(self):
    return 1

2023-07-03 14:14:20,079 DEBUG functional 8636 13624 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:14:20,079 DEBUG functional 8636 13624 
def xmap(task, it):
    return 1

2023-07-03 14:14:20,080 DEBUG functional 8636 13624 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:14:20,080 DEBUG functional 8636 13624 
def xstarmap(task, it):
    return 1

2023-07-03 14:14:20,080 DEBUG functional 8636 13624 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:14:28,981 DEBUG http_protocol 10216 5568 HTTP b'GET' request for ['127.0.0.1', 57505]
2023-07-03 14:14:29,099 DEBUG core 10216 7200 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:14:29,099 DEBUG core 10216 7200 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:14:29,120 DEBUG http_protocol 10216 5568 HTTP 200 response started for ['127.0.0.1', 57505]
2023-07-03 14:14:29,120 DEBUG http_protocol 10216 5568 HTTP close for ['127.0.0.1', 57505]
2023-07-03 14:14:29,120 DEBUG http_protocol 10216 5568 HTTP response complete for ['127.0.0.1', 57505]
2023-07-03 14:14:29,120 INFO runserver 10216 5568 [mHTTP GET /api/open_positions/ 200 [0.14, 127.0.0.1:57505][0m
2023-07-03 14:14:30,230 DEBUG http_protocol 10216 5568 HTTP b'POST' request for ['127.0.0.1', 57507]
2023-07-03 14:14:30,290 DEBUG functional 10216 12764 
def xstarmap(task, it):
    return 1

2023-07-03 14:14:30,292 DEBUG functional 10216 12764 
def db_update_task():
    return 1

2023-07-03 14:14:30,293 DEBUG functional 10216 12764 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:14:30,293 DEBUG functional 10216 12764 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:14:30,294 DEBUG functional 10216 12764 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:14:30,294 DEBUG functional 10216 12764 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:14:30,294 DEBUG functional 10216 12764 
def chunks(task, it, n):
    return 1

2023-07-03 14:14:30,295 DEBUG functional 10216 12764 
def debug_task(self):
    return 1

2023-07-03 14:14:30,295 DEBUG functional 10216 12764 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:14:30,296 DEBUG functional 10216 12764 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:14:30,296 DEBUG functional 10216 12764 
def xmap(task, it):
    return 1

2023-07-03 14:14:30,296 DEBUG functional 10216 12764 
def backend_cleanup():
    return 1

2023-07-03 14:14:30,297 DEBUG functional 10216 12764 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:14:30,469 DEBUG http_protocol 10216 5568 HTTP 200 response started for ['127.0.0.1', 57507]
2023-07-03 14:14:30,469 DEBUG http_protocol 10216 5568 HTTP close for ['127.0.0.1', 57507]
2023-07-03 14:14:30,470 DEBUG http_protocol 10216 5568 HTTP response complete for ['127.0.0.1', 57507]
2023-07-03 14:14:30,470 INFO runserver 10216 5568 [mHTTP POST /api/market_buy/ 200 [0.24, 127.0.0.1:57507][0m
2023-07-03 14:14:31,284 DEBUG http_protocol 10216 5568 HTTP b'GET' request for ['127.0.0.1', 57505]
2023-07-03 14:14:31,335 DEBUG core 10216 14888 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:14:31,335 DEBUG core 10216 14888 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:14:31,340 DEBUG http_protocol 10216 5568 HTTP 200 response started for ['127.0.0.1', 57505]
2023-07-03 14:14:31,341 DEBUG http_protocol 10216 5568 HTTP close for ['127.0.0.1', 57505]
2023-07-03 14:14:31,341 DEBUG http_protocol 10216 5568 HTTP response complete for ['127.0.0.1', 57505]
2023-07-03 14:14:31,341 INFO runserver 10216 5568 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:57505][0m
2023-07-03 14:14:42,494 DEBUG http_protocol 10216 5568 HTTP b'POST' request for ['127.0.0.1', 57507]
2023-07-03 14:14:42,629 DEBUG http_protocol 10216 5568 HTTP 200 response started for ['127.0.0.1', 57507]
2023-07-03 14:14:42,629 DEBUG http_protocol 10216 5568 HTTP close for ['127.0.0.1', 57507]
2023-07-03 14:14:42,629 DEBUG http_protocol 10216 5568 HTTP response complete for ['127.0.0.1', 57507]
2023-07-03 14:14:42,629 INFO runserver 10216 5568 [mHTTP POST /api/close_positions/ 200 [0.14, 127.0.0.1:57507][0m
2023-07-03 14:14:43,923 DEBUG http_protocol 10216 5568 HTTP b'GET' request for ['127.0.0.1', 57505]
2023-07-03 14:14:43,972 DEBUG core 10216 20980 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:14:43,972 DEBUG core 10216 20980 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:14:43,976 DEBUG http_protocol 10216 5568 HTTP 200 response started for ['127.0.0.1', 57505]
2023-07-03 14:14:43,977 DEBUG http_protocol 10216 5568 HTTP close for ['127.0.0.1', 57505]
2023-07-03 14:14:43,977 DEBUG http_protocol 10216 5568 HTTP response complete for ['127.0.0.1', 57505]
2023-07-03 14:14:43,977 INFO runserver 10216 5568 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:57505][0m
2023-07-03 14:15:22,300 INFO autoreload 10216 13592 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:15:23,570 DEBUG selector_events 14200 17128 Using selector: SelectSelector
2023-07-03 14:15:24,489 INFO autoreload 14200 17128 Watching for file changes with StatReloader
2023-07-03 14:15:24,932 INFO server 14200 7200 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:15:24,932 INFO server 14200 7200 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:15:24,933 INFO server 14200 7200 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:15:33,105 DEBUG selector_events 7644 15856 Using selector: SelectSelector
2023-07-03 14:15:34,158 DEBUG functional 7644 15856 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:15:34,159 DEBUG functional 7644 15856 
def chunks(task, it, n):
    return 1

2023-07-03 14:15:34,160 DEBUG functional 7644 15856 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:15:34,161 DEBUG functional 7644 15856 
def backend_cleanup():
    return 1

2023-07-03 14:15:34,161 DEBUG functional 7644 15856 
def debug_task(self):
    return 1

2023-07-03 14:15:34,162 DEBUG functional 7644 15856 
def db_update_task():
    return 1

2023-07-03 14:15:34,162 DEBUG functional 7644 15856 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:15:34,162 DEBUG functional 7644 15856 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:15:34,163 DEBUG functional 7644 15856 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:15:34,163 DEBUG functional 7644 15856 
def xmap(task, it):
    return 1

2023-07-03 14:15:34,163 DEBUG functional 7644 15856 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:15:34,163 DEBUG functional 7644 15856 
def xstarmap(task, it):
    return 1

2023-07-03 14:15:34,164 DEBUG functional 7644 15856 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:15:41,685 DEBUG http_protocol 14200 7200 HTTP b'POST' request for ['127.0.0.1', 57548]
2023-07-03 14:15:41,745 DEBUG functional 14200 19416 
def xstarmap(task, it):
    return 1

2023-07-03 14:15:41,747 DEBUG functional 14200 19416 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:15:41,747 DEBUG functional 14200 19416 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:15:41,747 DEBUG functional 14200 19416 
def chunks(task, it, n):
    return 1

2023-07-03 14:15:41,748 DEBUG functional 14200 19416 
def debug_task(self):
    return 1

2023-07-03 14:15:41,748 DEBUG functional 14200 19416 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:15:41,749 DEBUG functional 14200 19416 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:15:41,749 DEBUG functional 14200 19416 
def db_update_task():
    return 1

2023-07-03 14:15:41,749 DEBUG functional 14200 19416 
def xmap(task, it):
    return 1

2023-07-03 14:15:41,750 DEBUG functional 14200 19416 
def backend_cleanup():
    return 1

2023-07-03 14:15:41,750 DEBUG functional 14200 19416 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:15:41,750 DEBUG functional 14200 19416 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:15:41,751 DEBUG functional 14200 19416 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:15:41,861 DEBUG http_protocol 14200 7200 HTTP 200 response started for ['127.0.0.1', 57548]
2023-07-03 14:15:41,861 DEBUG http_protocol 14200 7200 HTTP close for ['127.0.0.1', 57548]
2023-07-03 14:15:41,861 DEBUG http_protocol 14200 7200 HTTP response complete for ['127.0.0.1', 57548]
2023-07-03 14:15:41,861 INFO runserver 14200 7200 [mHTTP POST /api/market_buy/ 200 [0.18, 127.0.0.1:57548][0m
2023-07-03 14:15:50,333 DEBUG http_protocol 14200 7200 HTTP b'GET' request for ['127.0.0.1', 57557]
2023-07-03 14:15:50,454 DEBUG core 14200 21820 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:15:50,454 DEBUG core 14200 21820 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:15:50,477 DEBUG http_protocol 14200 7200 HTTP 200 response started for ['127.0.0.1', 57557]
2023-07-03 14:15:50,477 DEBUG http_protocol 14200 7200 HTTP close for ['127.0.0.1', 57557]
2023-07-03 14:15:50,478 DEBUG http_protocol 14200 7200 HTTP response complete for ['127.0.0.1', 57557]
2023-07-03 14:15:50,478 INFO runserver 14200 7200 [mHTTP GET /api/open_positions/ 200 [0.15, 127.0.0.1:57557][0m
2023-07-03 14:15:53,857 DEBUG http_protocol 14200 7200 HTTP b'POST' request for ['127.0.0.1', 57548]
2023-07-03 14:15:53,990 DEBUG http_protocol 14200 7200 HTTP 200 response started for ['127.0.0.1', 57548]
2023-07-03 14:15:53,990 DEBUG http_protocol 14200 7200 HTTP close for ['127.0.0.1', 57548]
2023-07-03 14:15:53,990 DEBUG http_protocol 14200 7200 HTTP response complete for ['127.0.0.1', 57548]
2023-07-03 14:15:53,990 INFO runserver 14200 7200 [mHTTP POST /api/close_positions/ 200 [0.13, 127.0.0.1:57548][0m
2023-07-03 14:16:26,557 INFO autoreload 14200 17128 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:16:27,724 DEBUG selector_events 20560 11860 Using selector: SelectSelector
2023-07-03 14:16:28,664 INFO autoreload 20560 11860 Watching for file changes with StatReloader
2023-07-03 14:16:29,152 INFO server 20560 22064 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:16:29,152 INFO server 20560 22064 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:16:29,153 INFO server 20560 22064 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:16:35,050 DEBUG selector_events 15724 13044 Using selector: SelectSelector
2023-07-03 14:16:36,241 DEBUG functional 15724 13044 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:16:36,242 DEBUG functional 15724 13044 
def chunks(task, it, n):
    return 1

2023-07-03 14:16:36,243 DEBUG functional 15724 13044 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:16:36,244 DEBUG functional 15724 13044 
def backend_cleanup():
    return 1

2023-07-03 14:16:36,244 DEBUG functional 15724 13044 
def debug_task(self):
    return 1

2023-07-03 14:16:36,244 DEBUG functional 15724 13044 
def db_update_task():
    return 1

2023-07-03 14:16:36,245 DEBUG functional 15724 13044 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:16:36,245 DEBUG functional 15724 13044 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:16:36,245 DEBUG functional 15724 13044 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:16:36,246 DEBUG functional 15724 13044 
def xmap(task, it):
    return 1

2023-07-03 14:16:36,246 DEBUG functional 15724 13044 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:16:36,246 DEBUG functional 15724 13044 
def xstarmap(task, it):
    return 1

2023-07-03 14:16:36,247 DEBUG functional 15724 13044 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:16:36,361 DEBUG http_protocol 20560 22064 HTTP b'GET' request for ['127.0.0.1', 57583]
2023-07-03 14:16:36,505 DEBUG core 20560 1212 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:16:36,505 DEBUG core 20560 1212 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:16:36,531 DEBUG http_protocol 20560 22064 HTTP 200 response started for ['127.0.0.1', 57583]
2023-07-03 14:16:36,532 DEBUG http_protocol 20560 22064 HTTP close for ['127.0.0.1', 57583]
2023-07-03 14:16:36,532 DEBUG http_protocol 20560 22064 HTTP response complete for ['127.0.0.1', 57583]
2023-07-03 14:16:36,532 INFO runserver 20560 22064 [mHTTP GET /api/open_positions/ 200 [0.17, 127.0.0.1:57583][0m
2023-07-03 14:16:42,648 DEBUG http_protocol 20560 22064 HTTP b'POST' request for ['127.0.0.1', 57596]
2023-07-03 14:16:42,755 DEBUG functional 20560 19676 
def xstarmap(task, it):
    return 1

2023-07-03 14:16:42,757 DEBUG functional 20560 19676 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:16:42,758 DEBUG functional 20560 19676 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:16:42,758 DEBUG functional 20560 19676 
def chunks(task, it, n):
    return 1

2023-07-03 14:16:42,759 DEBUG functional 20560 19676 
def debug_task(self):
    return 1

2023-07-03 14:16:42,759 DEBUG functional 20560 19676 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:16:42,760 DEBUG functional 20560 19676 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:16:42,760 DEBUG functional 20560 19676 
def db_update_task():
    return 1

2023-07-03 14:16:42,760 DEBUG functional 20560 19676 
def xmap(task, it):
    return 1

2023-07-03 14:16:42,761 DEBUG functional 20560 19676 
def backend_cleanup():
    return 1

2023-07-03 14:16:42,761 DEBUG functional 20560 19676 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:16:42,761 DEBUG functional 20560 19676 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:16:42,762 DEBUG functional 20560 19676 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:16:42,896 DEBUG http_protocol 20560 22064 HTTP 200 response started for ['127.0.0.1', 57596]
2023-07-03 14:16:42,896 DEBUG http_protocol 20560 22064 HTTP close for ['127.0.0.1', 57596]
2023-07-03 14:16:42,896 DEBUG http_protocol 20560 22064 HTTP response complete for ['127.0.0.1', 57596]
2023-07-03 14:16:42,896 INFO runserver 20560 22064 [mHTTP POST /api/market_buy/ 200 [0.25, 127.0.0.1:57596][0m
2023-07-03 14:16:43,477 DEBUG http_protocol 20560 22064 HTTP b'GET' request for ['127.0.0.1', 57583]
2023-07-03 14:16:43,536 DEBUG core 20560 3224 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:16:43,536 DEBUG core 20560 3224 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:16:43,542 DEBUG http_protocol 20560 22064 HTTP 200 response started for ['127.0.0.1', 57583]
2023-07-03 14:16:43,543 DEBUG http_protocol 20560 22064 HTTP close for ['127.0.0.1', 57583]
2023-07-03 14:16:43,543 DEBUG http_protocol 20560 22064 HTTP response complete for ['127.0.0.1', 57583]
2023-07-03 14:16:43,543 INFO runserver 20560 22064 [mHTTP GET /api/open_positions/ 200 [0.07, 127.0.0.1:57583][0m
2023-07-03 14:16:47,645 DEBUG http_protocol 20560 22064 HTTP b'POST' request for ['127.0.0.1', 57596]
2023-07-03 14:16:47,780 DEBUG http_protocol 20560 22064 HTTP 200 response started for ['127.0.0.1', 57596]
2023-07-03 14:16:47,780 DEBUG http_protocol 20560 22064 HTTP close for ['127.0.0.1', 57596]
2023-07-03 14:16:47,780 DEBUG http_protocol 20560 22064 HTTP response complete for ['127.0.0.1', 57596]
2023-07-03 14:16:47,780 INFO runserver 20560 22064 [mHTTP POST /api/close_positions/ 200 [0.13, 127.0.0.1:57596][0m
2023-07-03 14:16:49,033 DEBUG http_protocol 20560 22064 HTTP b'GET' request for ['127.0.0.1', 57583]
2023-07-03 14:16:49,086 DEBUG core 20560 8264 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:16:49,086 DEBUG core 20560 8264 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:16:49,091 DEBUG http_protocol 20560 22064 HTTP 200 response started for ['127.0.0.1', 57583]
2023-07-03 14:16:49,091 DEBUG http_protocol 20560 22064 HTTP close for ['127.0.0.1', 57583]
2023-07-03 14:16:49,091 DEBUG http_protocol 20560 22064 HTTP response complete for ['127.0.0.1', 57583]
2023-07-03 14:16:49,091 INFO runserver 20560 22064 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:57583][0m
2023-07-03 14:17:01,335 INFO autoreload 20560 11860 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:17:02,403 DEBUG selector_events 13328 16920 Using selector: SelectSelector
2023-07-03 14:17:03,270 INFO autoreload 13328 16920 Watching for file changes with StatReloader
2023-07-03 14:17:03,694 INFO server 13328 8024 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:17:03,694 INFO server 13328 8024 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:17:03,695 INFO server 13328 8024 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:17:17,527 INFO autoreload 13328 16920 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:17:18,826 DEBUG selector_events 13428 4472 Using selector: SelectSelector
2023-07-03 14:17:19,691 INFO autoreload 13428 4472 Watching for file changes with StatReloader
2023-07-03 14:17:20,183 INFO server 13428 20848 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:17:20,183 INFO server 13428 20848 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:17:20,184 INFO server 13428 20848 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:17:20,544 DEBUG selector_events 22180 4228 Using selector: SelectSelector
2023-07-03 14:17:21,657 DEBUG functional 22180 4228 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:17:21,657 DEBUG functional 22180 4228 
def chunks(task, it, n):
    return 1

2023-07-03 14:17:21,659 DEBUG functional 22180 4228 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:17:21,659 DEBUG functional 22180 4228 
def backend_cleanup():
    return 1

2023-07-03 14:17:21,660 DEBUG functional 22180 4228 
def debug_task(self):
    return 1

2023-07-03 14:17:21,660 DEBUG functional 22180 4228 
def db_update_task():
    return 1

2023-07-03 14:17:21,661 DEBUG functional 22180 4228 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:17:21,661 DEBUG functional 22180 4228 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:17:21,661 DEBUG functional 22180 4228 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:17:21,662 DEBUG functional 22180 4228 
def xmap(task, it):
    return 1

2023-07-03 14:17:21,662 DEBUG functional 22180 4228 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:17:21,663 DEBUG functional 22180 4228 
def xstarmap(task, it):
    return 1

2023-07-03 14:17:21,663 DEBUG functional 22180 4228 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:17:28,702 DEBUG http_protocol 13428 20848 HTTP b'POST' request for ['127.0.0.1', 57645]
2023-07-03 14:17:28,763 DEBUG functional 13428 10660 
def xstarmap(task, it):
    return 1

2023-07-03 14:17:28,765 DEBUG functional 13428 10660 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:17:28,766 DEBUG functional 13428 10660 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:17:28,766 DEBUG functional 13428 10660 
def chunks(task, it, n):
    return 1

2023-07-03 14:17:28,767 DEBUG functional 13428 10660 
def debug_task(self):
    return 1

2023-07-03 14:17:28,767 DEBUG functional 13428 10660 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:17:28,767 DEBUG functional 13428 10660 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:17:28,768 DEBUG functional 13428 10660 
def db_update_task():
    return 1

2023-07-03 14:17:28,768 DEBUG functional 13428 10660 
def xmap(task, it):
    return 1

2023-07-03 14:17:28,769 DEBUG functional 13428 10660 
def backend_cleanup():
    return 1

2023-07-03 14:17:28,769 DEBUG functional 13428 10660 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:17:28,769 DEBUG functional 13428 10660 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:17:28,769 DEBUG functional 13428 10660 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:17:28,896 DEBUG http_protocol 13428 20848 HTTP 200 response started for ['127.0.0.1', 57645]
2023-07-03 14:17:28,896 DEBUG http_protocol 13428 20848 HTTP close for ['127.0.0.1', 57645]
2023-07-03 14:17:28,896 DEBUG http_protocol 13428 20848 HTTP response complete for ['127.0.0.1', 57645]
2023-07-03 14:17:28,897 INFO runserver 13428 20848 [mHTTP POST /api/market_buy/ 200 [0.19, 127.0.0.1:57645][0m
2023-07-03 14:17:35,414 DEBUG http_protocol 13428 20848 HTTP b'POST' request for ['127.0.0.1', 57645]
2023-07-03 14:17:35,552 DEBUG http_protocol 13428 20848 HTTP 200 response started for ['127.0.0.1', 57645]
2023-07-03 14:17:35,552 DEBUG http_protocol 13428 20848 HTTP close for ['127.0.0.1', 57645]
2023-07-03 14:17:35,553 DEBUG http_protocol 13428 20848 HTTP response complete for ['127.0.0.1', 57645]
2023-07-03 14:17:35,553 INFO runserver 13428 20848 [mHTTP POST /api/close_positions/ 200 [0.14, 127.0.0.1:57645][0m
2023-07-03 14:17:59,580 INFO autoreload 13428 4472 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:18:00,763 DEBUG selector_events 7752 17480 Using selector: SelectSelector
2023-07-03 14:18:01,657 INFO autoreload 7752 17480 Watching for file changes with StatReloader
2023-07-03 14:18:02,110 INFO server 7752 8812 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:18:02,110 INFO server 7752 8812 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:18:02,111 INFO server 7752 8812 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:18:21,356 INFO autoreload 7752 17480 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:18:22,515 DEBUG selector_events 7188 5596 Using selector: SelectSelector
2023-07-03 14:18:23,371 INFO autoreload 7188 5596 Watching for file changes with StatReloader
2023-07-03 14:18:23,786 INFO server 7188 21408 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:18:23,786 INFO server 7188 21408 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:18:23,787 INFO server 7188 21408 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:18:25,442 DEBUG selector_events 13244 11160 Using selector: SelectSelector
2023-07-03 14:18:26,601 DEBUG functional 13244 11160 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:18:26,601 DEBUG functional 13244 11160 
def db_update_task():
    return 1

2023-07-03 14:18:26,603 DEBUG functional 13244 11160 
def chunks(task, it, n):
    return 1

2023-07-03 14:18:26,603 DEBUG functional 13244 11160 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:18:26,604 DEBUG functional 13244 11160 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:18:26,604 DEBUG functional 13244 11160 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:18:26,604 DEBUG functional 13244 11160 
def backend_cleanup():
    return 1

2023-07-03 14:18:26,605 DEBUG functional 13244 11160 
def debug_task(self):
    return 1

2023-07-03 14:18:26,605 DEBUG functional 13244 11160 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:18:26,605 DEBUG functional 13244 11160 
def xmap(task, it):
    return 1

2023-07-03 14:18:26,606 DEBUG functional 13244 11160 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:18:26,606 DEBUG functional 13244 11160 
def xstarmap(task, it):
    return 1

2023-07-03 14:18:26,607 DEBUG functional 13244 11160 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:18:30,850 DEBUG http_protocol 7188 21408 HTTP b'POST' request for ['127.0.0.1', 57701]
2023-07-03 14:18:31,018 DEBUG functional 7188 11704 
def xstarmap(task, it):
    return 1

2023-07-03 14:18:31,020 DEBUG functional 7188 11704 
def db_update_task():
    return 1

2023-07-03 14:18:31,020 DEBUG functional 7188 11704 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:18:31,021 DEBUG functional 7188 11704 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:18:31,021 DEBUG functional 7188 11704 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:18:31,021 DEBUG functional 7188 11704 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:18:31,022 DEBUG functional 7188 11704 
def chunks(task, it, n):
    return 1

2023-07-03 14:18:31,022 DEBUG functional 7188 11704 
def debug_task(self):
    return 1

2023-07-03 14:18:31,023 DEBUG functional 7188 11704 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:18:31,023 DEBUG functional 7188 11704 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:18:31,023 DEBUG functional 7188 11704 
def xmap(task, it):
    return 1

2023-07-03 14:18:31,024 DEBUG functional 7188 11704 
def backend_cleanup():
    return 1

2023-07-03 14:18:31,024 DEBUG functional 7188 11704 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:18:31,142 DEBUG http_protocol 7188 21408 HTTP 200 response started for ['127.0.0.1', 57701]
2023-07-03 14:18:31,143 DEBUG http_protocol 7188 21408 HTTP close for ['127.0.0.1', 57701]
2023-07-03 14:18:31,143 DEBUG http_protocol 7188 21408 HTTP response complete for ['127.0.0.1', 57701]
2023-07-03 14:18:31,143 INFO runserver 7188 21408 [mHTTP POST /api/market_buy/ 200 [0.29, 127.0.0.1:57701][0m
2023-07-03 14:18:31,942 DEBUG http_protocol 7188 21408 HTTP b'GET' request for ['127.0.0.1', 57709]
2023-07-03 14:18:32,054 DEBUG core 7188 19348 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:18:32,054 DEBUG core 7188 19348 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:18:32,075 DEBUG http_protocol 7188 21408 HTTP 200 response started for ['127.0.0.1', 57709]
2023-07-03 14:18:32,075 DEBUG http_protocol 7188 21408 HTTP close for ['127.0.0.1', 57709]
2023-07-03 14:18:32,075 DEBUG http_protocol 7188 21408 HTTP response complete for ['127.0.0.1', 57709]
2023-07-03 14:18:32,075 INFO runserver 7188 21408 [mHTTP GET /api/open_positions/ 200 [0.13, 127.0.0.1:57709][0m
2023-07-03 14:18:38,861 DEBUG http_protocol 7188 21408 HTTP b'POST' request for ['127.0.0.1', 57701]
2023-07-03 14:18:38,992 DEBUG http_protocol 7188 21408 HTTP 200 response started for ['127.0.0.1', 57701]
2023-07-03 14:18:38,992 DEBUG http_protocol 7188 21408 HTTP close for ['127.0.0.1', 57701]
2023-07-03 14:18:38,992 DEBUG http_protocol 7188 21408 HTTP response complete for ['127.0.0.1', 57701]
2023-07-03 14:18:38,992 INFO runserver 7188 21408 [mHTTP POST /api/close_positions/ 200 [0.13, 127.0.0.1:57701][0m
2023-07-03 14:18:40,262 DEBUG http_protocol 7188 21408 HTTP b'GET' request for ['127.0.0.1', 57709]
2023-07-03 14:18:40,411 DEBUG core 7188 18380 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:18:40,411 DEBUG core 7188 18380 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:18:40,416 DEBUG http_protocol 7188 21408 HTTP 200 response started for ['127.0.0.1', 57709]
2023-07-03 14:18:40,417 DEBUG http_protocol 7188 21408 HTTP close for ['127.0.0.1', 57709]
2023-07-03 14:18:40,417 DEBUG http_protocol 7188 21408 HTTP response complete for ['127.0.0.1', 57709]
2023-07-03 14:18:40,417 INFO runserver 7188 21408 [mHTTP GET /api/open_positions/ 200 [0.16, 127.0.0.1:57709][0m
2023-07-03 14:18:41,200 DEBUG http_protocol 7188 21408 HTTP b'GET' request for ['127.0.0.1', 57709]
2023-07-03 14:18:41,250 DEBUG core 7188 12028 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:18:41,250 DEBUG core 7188 12028 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:18:41,255 DEBUG http_protocol 7188 21408 HTTP 200 response started for ['127.0.0.1', 57709]
2023-07-03 14:18:41,256 DEBUG http_protocol 7188 21408 HTTP close for ['127.0.0.1', 57709]
2023-07-03 14:18:41,256 DEBUG http_protocol 7188 21408 HTTP response complete for ['127.0.0.1', 57709]
2023-07-03 14:18:41,256 INFO runserver 7188 21408 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:57709][0m
2023-07-03 14:18:53,946 INFO autoreload 7188 5596 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:18:55,092 DEBUG selector_events 3924 11600 Using selector: SelectSelector
2023-07-03 14:18:55,954 INFO autoreload 3924 11600 Watching for file changes with StatReloader
2023-07-03 14:18:56,378 INFO server 3924 17860 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:18:56,379 INFO server 3924 17860 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:18:56,380 INFO server 3924 17860 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:20:39,300 INFO autoreload 3924 11600 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:20:40,379 DEBUG selector_events 19696 5864 Using selector: SelectSelector
2023-07-03 14:20:41,223 INFO autoreload 19696 5864 Watching for file changes with StatReloader
2023-07-03 14:20:41,650 INFO server 19696 9064 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:20:41,651 INFO server 19696 9064 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:20:41,651 INFO server 19696 9064 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:20:50,003 INFO autoreload 19696 5864 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:20:51,182 DEBUG selector_events 628 22076 Using selector: SelectSelector
2023-07-03 14:20:52,019 INFO autoreload 628 22076 Watching for file changes with StatReloader
2023-07-03 14:20:52,431 INFO server 628 21712 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:20:52,431 INFO server 628 21712 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:20:52,432 INFO server 628 21712 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:20:53,807 DEBUG selector_events 17484 11592 Using selector: SelectSelector
2023-07-03 14:20:54,915 DEBUG functional 17484 11592 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:20:54,915 DEBUG functional 17484 11592 
def db_update_task():
    return 1

2023-07-03 14:20:54,916 DEBUG functional 17484 11592 
def chunks(task, it, n):
    return 1

2023-07-03 14:20:54,917 DEBUG functional 17484 11592 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:20:54,917 DEBUG functional 17484 11592 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:20:54,918 DEBUG functional 17484 11592 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:20:54,918 DEBUG functional 17484 11592 
def backend_cleanup():
    return 1

2023-07-03 14:20:54,918 DEBUG functional 17484 11592 
def debug_task(self):
    return 1

2023-07-03 14:20:54,919 DEBUG functional 17484 11592 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:20:54,919 DEBUG functional 17484 11592 
def xmap(task, it):
    return 1

2023-07-03 14:20:54,919 DEBUG functional 17484 11592 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:20:54,920 DEBUG functional 17484 11592 
def xstarmap(task, it):
    return 1

2023-07-03 14:20:54,920 DEBUG functional 17484 11592 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:21:02,482 DEBUG http_protocol 628 21712 HTTP b'GET' request for ['127.0.0.1', 57778]
2023-07-03 14:21:02,597 DEBUG core 628 1908 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:21:02,597 DEBUG core 628 1908 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:21:02,619 DEBUG http_protocol 628 21712 HTTP 200 response started for ['127.0.0.1', 57778]
2023-07-03 14:21:02,619 DEBUG http_protocol 628 21712 HTTP close for ['127.0.0.1', 57778]
2023-07-03 14:21:02,619 DEBUG http_protocol 628 21712 HTTP response complete for ['127.0.0.1', 57778]
2023-07-03 14:21:02,619 INFO runserver 628 21712 [mHTTP GET /api/open_positions/ 200 [0.14, 127.0.0.1:57778][0m
2023-07-03 14:21:04,239 DEBUG http_protocol 628 21712 HTTP b'POST' request for ['127.0.0.1', 57782]
2023-07-03 14:21:04,298 DEBUG functional 628 21572 
def xstarmap(task, it):
    return 1

2023-07-03 14:21:04,299 DEBUG functional 628 21572 
def db_update_task():
    return 1

2023-07-03 14:21:04,300 DEBUG functional 628 21572 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:21:04,300 DEBUG functional 628 21572 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:21:04,302 DEBUG functional 628 21572 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:21:04,302 DEBUG functional 628 21572 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:21:04,302 DEBUG functional 628 21572 
def chunks(task, it, n):
    return 1

2023-07-03 14:21:04,303 DEBUG functional 628 21572 
def debug_task(self):
    return 1

2023-07-03 14:21:04,303 DEBUG functional 628 21572 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:21:04,303 DEBUG functional 628 21572 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:21:04,304 DEBUG functional 628 21572 
def xmap(task, it):
    return 1

2023-07-03 14:21:04,304 DEBUG functional 628 21572 
def backend_cleanup():
    return 1

2023-07-03 14:21:04,305 DEBUG functional 628 21572 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:21:04,437 DEBUG http_protocol 628 21712 HTTP 200 response started for ['127.0.0.1', 57782]
2023-07-03 14:21:04,437 DEBUG http_protocol 628 21712 HTTP close for ['127.0.0.1', 57782]
2023-07-03 14:21:04,437 DEBUG http_protocol 628 21712 HTTP response complete for ['127.0.0.1', 57782]
2023-07-03 14:21:04,437 INFO runserver 628 21712 [mHTTP POST /api/close_positions/ 200 [0.20, 127.0.0.1:57782][0m
2023-07-03 14:21:12,448 DEBUG http_protocol 628 21712 HTTP b'GET' request for ['127.0.0.1', 57778]
2023-07-03 14:21:12,494 DEBUG core 628 15720 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:21:12,495 DEBUG core 628 15720 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:21:12,499 DEBUG http_protocol 628 21712 HTTP 200 response started for ['127.0.0.1', 57778]
2023-07-03 14:21:12,499 DEBUG http_protocol 628 21712 HTTP close for ['127.0.0.1', 57778]
2023-07-03 14:21:12,499 DEBUG http_protocol 628 21712 HTTP response complete for ['127.0.0.1', 57778]
2023-07-03 14:21:12,499 INFO runserver 628 21712 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:57778][0m
2023-07-03 14:21:25,672 INFO autoreload 628 22076 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:21:26,887 DEBUG selector_events 4724 16492 Using selector: SelectSelector
2023-07-03 14:21:27,830 INFO autoreload 4724 16492 Watching for file changes with StatReloader
2023-07-03 14:21:28,336 INFO server 4724 20560 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:21:28,336 INFO server 4724 20560 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:21:28,337 INFO server 4724 20560 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:21:31,851 DEBUG http_protocol 4724 20560 HTTP b'GET' request for ['127.0.0.1', 57806]
2023-07-03 14:21:31,974 DEBUG core 4724 13976 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:21:31,975 DEBUG core 4724 13976 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:21:31,996 DEBUG http_protocol 4724 20560 HTTP 200 response started for ['127.0.0.1', 57806]
2023-07-03 14:21:31,996 DEBUG http_protocol 4724 20560 HTTP close for ['127.0.0.1', 57806]
2023-07-03 14:21:31,997 DEBUG http_protocol 4724 20560 HTTP response complete for ['127.0.0.1', 57806]
2023-07-03 14:21:31,997 INFO runserver 4724 20560 [mHTTP GET /api/open_positions/ 200 [0.15, 127.0.0.1:57806][0m
2023-07-03 14:21:41,900 DEBUG selector_events 19396 8172 Using selector: SelectSelector
2023-07-03 14:21:42,975 DEBUG functional 19396 8172 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:21:42,975 DEBUG functional 19396 8172 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:21:42,976 DEBUG functional 19396 8172 
def chunks(task, it, n):
    return 1

2023-07-03 14:21:42,977 DEBUG functional 19396 8172 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:21:42,977 DEBUG functional 19396 8172 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:21:42,978 DEBUG functional 19396 8172 
def backend_cleanup():
    return 1

2023-07-03 14:21:42,978 DEBUG functional 19396 8172 
def debug_task(self):
    return 1

2023-07-03 14:21:42,978 DEBUG functional 19396 8172 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:21:42,979 DEBUG functional 19396 8172 
def db_update_task():
    return 1

2023-07-03 14:21:42,979 DEBUG functional 19396 8172 
def xmap(task, it):
    return 1

2023-07-03 14:21:42,979 DEBUG functional 19396 8172 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:21:42,979 DEBUG functional 19396 8172 
def xstarmap(task, it):
    return 1

2023-07-03 14:21:42,980 DEBUG functional 19396 8172 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:21:47,228 DEBUG http_protocol 4724 20560 HTTP b'POST' request for ['127.0.0.1', 57829]
2023-07-03 14:21:47,288 DEBUG functional 4724 21300 
def xstarmap(task, it):
    return 1

2023-07-03 14:21:47,290 DEBUG functional 4724 21300 
def db_update_task():
    return 1

2023-07-03 14:21:47,290 DEBUG functional 4724 21300 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:21:47,291 DEBUG functional 4724 21300 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:21:47,291 DEBUG functional 4724 21300 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:21:47,291 DEBUG functional 4724 21300 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:21:47,292 DEBUG functional 4724 21300 
def chunks(task, it, n):
    return 1

2023-07-03 14:21:47,292 DEBUG functional 4724 21300 
def debug_task(self):
    return 1

2023-07-03 14:21:47,293 DEBUG functional 4724 21300 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:21:47,293 DEBUG functional 4724 21300 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:21:47,293 DEBUG functional 4724 21300 
def xmap(task, it):
    return 1

2023-07-03 14:21:47,294 DEBUG functional 4724 21300 
def backend_cleanup():
    return 1

2023-07-03 14:21:47,294 DEBUG functional 4724 21300 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:21:47,439 DEBUG http_protocol 4724 20560 HTTP 200 response started for ['127.0.0.1', 57829]
2023-07-03 14:21:47,439 DEBUG http_protocol 4724 20560 HTTP close for ['127.0.0.1', 57829]
2023-07-03 14:21:47,439 DEBUG http_protocol 4724 20560 HTTP response complete for ['127.0.0.1', 57829]
2023-07-03 14:21:47,439 INFO runserver 4724 20560 [mHTTP POST /api/market_buy/ 200 [0.21, 127.0.0.1:57829][0m
2023-07-03 14:21:53,405 DEBUG http_protocol 4724 20560 HTTP b'GET' request for ['127.0.0.1', 57806]
2023-07-03 14:21:53,455 DEBUG core 4724 15304 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:21:53,455 DEBUG core 4724 15304 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:21:53,460 DEBUG http_protocol 4724 20560 HTTP 200 response started for ['127.0.0.1', 57806]
2023-07-03 14:21:53,460 DEBUG http_protocol 4724 20560 HTTP close for ['127.0.0.1', 57806]
2023-07-03 14:21:53,460 DEBUG http_protocol 4724 20560 HTTP response complete for ['127.0.0.1', 57806]
2023-07-03 14:21:53,460 INFO runserver 4724 20560 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:57806][0m
2023-07-03 14:21:57,801 DEBUG http_protocol 4724 20560 HTTP b'POST' request for ['127.0.0.1', 57829]
2023-07-03 14:21:57,933 DEBUG http_protocol 4724 20560 HTTP 200 response started for ['127.0.0.1', 57829]
2023-07-03 14:21:57,933 DEBUG http_protocol 4724 20560 HTTP close for ['127.0.0.1', 57829]
2023-07-03 14:21:57,933 DEBUG http_protocol 4724 20560 HTTP response complete for ['127.0.0.1', 57829]
2023-07-03 14:21:57,933 INFO runserver 4724 20560 [mHTTP POST /api/close_positions/ 200 [0.13, 127.0.0.1:57829][0m
2023-07-03 14:21:58,726 DEBUG http_protocol 4724 20560 HTTP b'GET' request for ['127.0.0.1', 57806]
2023-07-03 14:21:58,773 DEBUG core 4724 13440 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:21:58,773 DEBUG core 4724 13440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:21:58,777 DEBUG http_protocol 4724 20560 HTTP 200 response started for ['127.0.0.1', 57806]
2023-07-03 14:21:58,778 DEBUG http_protocol 4724 20560 HTTP close for ['127.0.0.1', 57806]
2023-07-03 14:21:58,778 DEBUG http_protocol 4724 20560 HTTP response complete for ['127.0.0.1', 57806]
2023-07-03 14:21:58,778 INFO runserver 4724 20560 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:57806][0m
2023-07-03 14:22:11,858 INFO autoreload 4724 16492 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:22:13,052 DEBUG selector_events 6824 15652 Using selector: SelectSelector
2023-07-03 14:22:13,971 INFO autoreload 6824 15652 Watching for file changes with StatReloader
2023-07-03 14:22:14,444 INFO server 6824 21948 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:22:14,444 INFO server 6824 21948 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:22:14,445 INFO server 6824 21948 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:22:36,995 INFO autoreload 6824 15652 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:22:38,093 DEBUG selector_events 17868 12460 Using selector: SelectSelector
2023-07-03 14:22:38,941 INFO autoreload 17868 12460 Watching for file changes with StatReloader
2023-07-03 14:22:39,366 INFO server 17868 2300 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:22:39,366 INFO server 17868 2300 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:22:39,367 INFO server 17868 2300 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:23:20,353 INFO autoreload 17868 12460 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:23:21,477 DEBUG selector_events 21224 17396 Using selector: SelectSelector
2023-07-03 14:23:22,425 INFO autoreload 21224 17396 Watching for file changes with StatReloader
2023-07-03 14:23:22,871 INFO server 21224 15832 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:23:22,871 INFO server 21224 15832 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:23:22,872 INFO server 21224 15832 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:23:25,725 DEBUG selector_events 9716 14664 Using selector: SelectSelector
2023-07-03 14:23:26,819 DEBUG functional 9716 14664 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:23:26,819 DEBUG functional 9716 14664 
def chunks(task, it, n):
    return 1

2023-07-03 14:23:26,821 DEBUG functional 9716 14664 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:23:26,821 DEBUG functional 9716 14664 
def backend_cleanup():
    return 1

2023-07-03 14:23:26,821 DEBUG functional 9716 14664 
def debug_task(self):
    return 1

2023-07-03 14:23:26,822 DEBUG functional 9716 14664 
def db_update_task():
    return 1

2023-07-03 14:23:26,822 DEBUG functional 9716 14664 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:23:26,822 DEBUG functional 9716 14664 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:23:26,823 DEBUG functional 9716 14664 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:23:26,823 DEBUG functional 9716 14664 
def xmap(task, it):
    return 1

2023-07-03 14:23:26,823 DEBUG functional 9716 14664 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:23:26,824 DEBUG functional 9716 14664 
def xstarmap(task, it):
    return 1

2023-07-03 14:23:26,824 DEBUG functional 9716 14664 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:23:32,663 DEBUG http_protocol 21224 15832 HTTP b'POST' request for ['127.0.0.1', 57903]
2023-07-03 14:23:32,726 DEBUG functional 21224 21716 
def xstarmap(task, it):
    return 1

2023-07-03 14:23:32,728 DEBUG functional 21224 21716 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:23:32,729 DEBUG functional 21224 21716 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:23:32,729 DEBUG functional 21224 21716 
def chunks(task, it, n):
    return 1

2023-07-03 14:23:32,729 DEBUG functional 21224 21716 
def debug_task(self):
    return 1

2023-07-03 14:23:32,730 DEBUG functional 21224 21716 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:23:32,730 DEBUG functional 21224 21716 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:23:32,731 DEBUG functional 21224 21716 
def db_update_task():
    return 1

2023-07-03 14:23:32,731 DEBUG functional 21224 21716 
def xmap(task, it):
    return 1

2023-07-03 14:23:32,731 DEBUG functional 21224 21716 
def backend_cleanup():
    return 1

2023-07-03 14:23:32,732 DEBUG functional 21224 21716 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:23:32,732 DEBUG functional 21224 21716 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:23:32,732 DEBUG functional 21224 21716 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:23:32,849 DEBUG http_protocol 21224 15832 HTTP 200 response started for ['127.0.0.1', 57903]
2023-07-03 14:23:32,849 DEBUG http_protocol 21224 15832 HTTP close for ['127.0.0.1', 57903]
2023-07-03 14:23:32,849 DEBUG http_protocol 21224 15832 HTTP response complete for ['127.0.0.1', 57903]
2023-07-03 14:23:32,850 INFO runserver 21224 15832 [mHTTP POST /api/market_buy/ 200 [0.19, 127.0.0.1:57903][0m
2023-07-03 14:23:40,475 DEBUG http_protocol 21224 15832 HTTP b'POST' request for ['127.0.0.1', 57903]
2023-07-03 14:23:40,704 DEBUG http_protocol 21224 15832 HTTP 200 response started for ['127.0.0.1', 57903]
2023-07-03 14:23:40,705 DEBUG http_protocol 21224 15832 HTTP close for ['127.0.0.1', 57903]
2023-07-03 14:23:40,705 DEBUG http_protocol 21224 15832 HTTP response complete for ['127.0.0.1', 57903]
2023-07-03 14:23:40,705 INFO runserver 21224 15832 [mHTTP POST /api/close_positions/ 200 [0.23, 127.0.0.1:57903][0m
2023-07-03 14:24:06,134 DEBUG http_protocol 21224 15832 HTTP b'GET' request for ['127.0.0.1', 63023]
2023-07-03 14:24:06,244 DEBUG core 21224 3844 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:24:06,244 DEBUG core 21224 3844 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:24:06,266 DEBUG http_protocol 21224 15832 HTTP 200 response started for ['127.0.0.1', 63023]
2023-07-03 14:24:06,266 DEBUG http_protocol 21224 15832 HTTP close for ['127.0.0.1', 63023]
2023-07-03 14:24:06,266 DEBUG http_protocol 21224 15832 HTTP response complete for ['127.0.0.1', 63023]
2023-07-03 14:24:06,266 INFO runserver 21224 15832 [mHTTP GET /api/open_positions/ 200 [0.13, 127.0.0.1:63023][0m
2023-07-03 14:25:18,127 INFO autoreload 21224 17396 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:25:19,367 DEBUG selector_events 13284 17780 Using selector: SelectSelector
2023-07-03 14:25:20,239 INFO autoreload 13284 17780 Watching for file changes with StatReloader
2023-07-03 14:25:20,675 INFO server 13284 21832 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:25:20,675 INFO server 13284 21832 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:25:20,676 INFO server 13284 21832 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:25:22,523 DEBUG selector_events 6072 14796 Using selector: SelectSelector
2023-07-03 14:25:23,674 DEBUG functional 6072 14796 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:25:23,675 DEBUG functional 6072 14796 
def chunks(task, it, n):
    return 1

2023-07-03 14:25:23,676 DEBUG functional 6072 14796 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:25:23,676 DEBUG functional 6072 14796 
def backend_cleanup():
    return 1

2023-07-03 14:25:23,677 DEBUG functional 6072 14796 
def debug_task(self):
    return 1

2023-07-03 14:25:23,677 DEBUG functional 6072 14796 
def db_update_task():
    return 1

2023-07-03 14:25:23,677 DEBUG functional 6072 14796 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:25:23,678 DEBUG functional 6072 14796 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:25:23,678 DEBUG functional 6072 14796 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:25:23,678 DEBUG functional 6072 14796 
def xmap(task, it):
    return 1

2023-07-03 14:25:23,679 DEBUG functional 6072 14796 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:25:23,679 DEBUG functional 6072 14796 
def xstarmap(task, it):
    return 1

2023-07-03 14:25:23,679 DEBUG functional 6072 14796 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:25:28,305 DEBUG http_protocol 13284 21832 HTTP b'POST' request for ['127.0.0.1', 63064]
2023-07-03 14:25:28,364 DEBUG functional 13284 19628 
def xstarmap(task, it):
    return 1

2023-07-03 14:25:28,366 DEBUG functional 13284 19628 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:25:28,366 DEBUG functional 13284 19628 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:25:28,367 DEBUG functional 13284 19628 
def chunks(task, it, n):
    return 1

2023-07-03 14:25:28,367 DEBUG functional 13284 19628 
def debug_task(self):
    return 1

2023-07-03 14:25:28,368 DEBUG functional 13284 19628 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:25:28,368 DEBUG functional 13284 19628 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:25:28,368 DEBUG functional 13284 19628 
def db_update_task():
    return 1

2023-07-03 14:25:28,369 DEBUG functional 13284 19628 
def xmap(task, it):
    return 1

2023-07-03 14:25:28,369 DEBUG functional 13284 19628 
def backend_cleanup():
    return 1

2023-07-03 14:25:28,369 DEBUG functional 13284 19628 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:25:28,370 DEBUG functional 13284 19628 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:25:28,370 DEBUG functional 13284 19628 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:25:28,473 DEBUG http_protocol 13284 21832 HTTP 200 response started for ['127.0.0.1', 63064]
2023-07-03 14:25:28,473 DEBUG http_protocol 13284 21832 HTTP close for ['127.0.0.1', 63064]
2023-07-03 14:25:28,473 DEBUG http_protocol 13284 21832 HTTP response complete for ['127.0.0.1', 63064]
2023-07-03 14:25:28,473 INFO runserver 13284 21832 [mHTTP POST /api/market_buy/ 200 [0.17, 127.0.0.1:63064][0m
2023-07-03 14:25:35,952 DEBUG http_protocol 13284 21832 HTTP b'POST' request for ['127.0.0.1', 63064]
2023-07-03 14:25:36,087 DEBUG http_protocol 13284 21832 HTTP 200 response started for ['127.0.0.1', 63064]
2023-07-03 14:25:36,087 DEBUG http_protocol 13284 21832 HTTP close for ['127.0.0.1', 63064]
2023-07-03 14:25:36,088 DEBUG http_protocol 13284 21832 HTTP response complete for ['127.0.0.1', 63064]
2023-07-03 14:25:36,088 INFO runserver 13284 21832 [mHTTP POST /api/close_positions/ 200 [0.14, 127.0.0.1:63064][0m
2023-07-03 14:25:50,243 INFO autoreload 13284 17780 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:25:51,459 DEBUG selector_events 13320 7784 Using selector: SelectSelector
2023-07-03 14:25:52,350 INFO autoreload 13320 7784 Watching for file changes with StatReloader
2023-07-03 14:25:52,773 INFO server 13320 14904 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:25:52,774 INFO server 13320 14904 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:25:52,774 INFO server 13320 14904 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:25:58,729 DEBUG selector_events 8884 3080 Using selector: SelectSelector
2023-07-03 14:25:59,568 DEBUG http_protocol 13320 14904 HTTP b'GET' request for ['127.0.0.1', 63092]
2023-07-03 14:25:59,710 DEBUG core 13320 19572 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:25:59,711 DEBUG core 13320 19572 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:25:59,735 DEBUG http_protocol 13320 14904 HTTP 200 response started for ['127.0.0.1', 63092]
2023-07-03 14:25:59,735 DEBUG http_protocol 13320 14904 HTTP close for ['127.0.0.1', 63092]
2023-07-03 14:25:59,735 DEBUG http_protocol 13320 14904 HTTP response complete for ['127.0.0.1', 63092]
2023-07-03 14:25:59,735 INFO runserver 13320 14904 [mHTTP GET /api/open_positions/ 200 [0.17, 127.0.0.1:63092][0m
2023-07-03 14:25:59,958 DEBUG functional 8884 3080 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:25:59,958 DEBUG functional 8884 3080 
def chunks(task, it, n):
    return 1

2023-07-03 14:25:59,960 DEBUG functional 8884 3080 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:25:59,960 DEBUG functional 8884 3080 
def backend_cleanup():
    return 1

2023-07-03 14:25:59,961 DEBUG functional 8884 3080 
def debug_task(self):
    return 1

2023-07-03 14:25:59,961 DEBUG functional 8884 3080 
def db_update_task():
    return 1

2023-07-03 14:25:59,961 DEBUG functional 8884 3080 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:25:59,962 DEBUG functional 8884 3080 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:25:59,962 DEBUG functional 8884 3080 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:25:59,962 DEBUG functional 8884 3080 
def xmap(task, it):
    return 1

2023-07-03 14:25:59,963 DEBUG functional 8884 3080 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:25:59,963 DEBUG functional 8884 3080 
def xstarmap(task, it):
    return 1

2023-07-03 14:25:59,963 DEBUG functional 8884 3080 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:26:03,899 DEBUG http_protocol 13320 14904 HTTP b'POST' request for ['127.0.0.1', 63105]
2023-07-03 14:26:03,958 DEBUG functional 13320 21808 
def xstarmap(task, it):
    return 1

2023-07-03 14:26:03,959 DEBUG functional 13320 21808 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:26:03,960 DEBUG functional 13320 21808 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:26:03,960 DEBUG functional 13320 21808 
def chunks(task, it, n):
    return 1

2023-07-03 14:26:03,960 DEBUG functional 13320 21808 
def debug_task(self):
    return 1

2023-07-03 14:26:03,962 DEBUG functional 13320 21808 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:26:03,963 DEBUG functional 13320 21808 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:26:03,963 DEBUG functional 13320 21808 
def db_update_task():
    return 1

2023-07-03 14:26:03,963 DEBUG functional 13320 21808 
def xmap(task, it):
    return 1

2023-07-03 14:26:03,963 DEBUG functional 13320 21808 
def backend_cleanup():
    return 1

2023-07-03 14:26:03,964 DEBUG functional 13320 21808 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:26:03,964 DEBUG functional 13320 21808 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:26:03,964 DEBUG functional 13320 21808 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:26:04,113 DEBUG http_protocol 13320 14904 HTTP 200 response started for ['127.0.0.1', 63105]
2023-07-03 14:26:04,114 DEBUG http_protocol 13320 14904 HTTP close for ['127.0.0.1', 63105]
2023-07-03 14:26:04,114 DEBUG http_protocol 13320 14904 HTTP response complete for ['127.0.0.1', 63105]
2023-07-03 14:26:04,114 INFO runserver 13320 14904 [mHTTP POST /api/market_buy/ 200 [0.22, 127.0.0.1:63105][0m
2023-07-03 14:26:07,084 DEBUG http_protocol 13320 14904 HTTP b'POST' request for ['127.0.0.1', 63105]
2023-07-03 14:26:07,237 DEBUG http_protocol 13320 14904 HTTP 200 response started for ['127.0.0.1', 63105]
2023-07-03 14:26:07,237 DEBUG http_protocol 13320 14904 HTTP close for ['127.0.0.1', 63105]
2023-07-03 14:26:07,237 DEBUG http_protocol 13320 14904 HTTP response complete for ['127.0.0.1', 63105]
2023-07-03 14:26:07,238 INFO runserver 13320 14904 [mHTTP POST /api/close_positions/ 200 [0.15, 127.0.0.1:63105][0m
2023-07-03 14:28:06,310 INFO autoreload 13320 7784 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:28:07,546 DEBUG selector_events 5328 19304 Using selector: SelectSelector
2023-07-03 14:28:08,431 INFO autoreload 5328 19304 Watching for file changes with StatReloader
2023-07-03 14:28:08,907 INFO server 5328 16448 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:28:08,907 INFO server 5328 16448 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:28:08,908 INFO server 5328 16448 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:28:18,266 DEBUG selector_events 2820 17200 Using selector: SelectSelector
2023-07-03 14:28:19,413 DEBUG functional 2820 17200 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:28:19,414 DEBUG functional 2820 17200 
def db_update_task():
    return 1

2023-07-03 14:28:19,415 DEBUG functional 2820 17200 
def chunks(task, it, n):
    return 1

2023-07-03 14:28:19,416 DEBUG functional 2820 17200 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:28:19,416 DEBUG functional 2820 17200 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:28:19,417 DEBUG functional 2820 17200 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:28:19,417 DEBUG functional 2820 17200 
def backend_cleanup():
    return 1

2023-07-03 14:28:19,417 DEBUG functional 2820 17200 
def debug_task(self):
    return 1

2023-07-03 14:28:19,418 DEBUG functional 2820 17200 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:28:19,418 DEBUG functional 2820 17200 
def xmap(task, it):
    return 1

2023-07-03 14:28:19,418 DEBUG functional 2820 17200 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:28:19,419 DEBUG functional 2820 17200 
def xstarmap(task, it):
    return 1

2023-07-03 14:28:19,419 DEBUG functional 2820 17200 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:28:23,686 DEBUG http_protocol 5328 16448 HTTP b'POST' request for ['127.0.0.1', 63188]
2023-07-03 14:28:23,748 DEBUG functional 5328 19040 
def xstarmap(task, it):
    return 1

2023-07-03 14:28:23,749 DEBUG functional 5328 19040 
def db_update_task():
    return 1

2023-07-03 14:28:23,750 DEBUG functional 5328 19040 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:28:23,750 DEBUG functional 5328 19040 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:28:23,750 DEBUG functional 5328 19040 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:28:23,751 DEBUG functional 5328 19040 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:28:23,751 DEBUG functional 5328 19040 
def chunks(task, it, n):
    return 1

2023-07-03 14:28:23,751 DEBUG functional 5328 19040 
def debug_task(self):
    return 1

2023-07-03 14:28:23,752 DEBUG functional 5328 19040 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:28:23,752 DEBUG functional 5328 19040 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:28:23,753 DEBUG functional 5328 19040 
def xmap(task, it):
    return 1

2023-07-03 14:28:23,753 DEBUG functional 5328 19040 
def backend_cleanup():
    return 1

2023-07-03 14:28:23,753 DEBUG functional 5328 19040 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:28:23,898 DEBUG http_protocol 5328 16448 HTTP 200 response started for ['127.0.0.1', 63188]
2023-07-03 14:28:23,899 DEBUG http_protocol 5328 16448 HTTP close for ['127.0.0.1', 63188]
2023-07-03 14:28:23,899 DEBUG http_protocol 5328 16448 HTTP response complete for ['127.0.0.1', 63188]
2023-07-03 14:28:23,899 INFO runserver 5328 16448 [mHTTP POST /api/market_buy/ 200 [0.21, 127.0.0.1:63188][0m
2023-07-03 14:28:25,110 DEBUG http_protocol 5328 16448 HTTP b'GET' request for ['127.0.0.1', 63196]
2023-07-03 14:28:25,268 DEBUG core 5328 19992 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:28:25,269 DEBUG core 5328 19992 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:28:25,293 DEBUG http_protocol 5328 16448 HTTP 200 response started for ['127.0.0.1', 63196]
2023-07-03 14:28:25,293 DEBUG http_protocol 5328 16448 HTTP close for ['127.0.0.1', 63196]
2023-07-03 14:28:25,293 DEBUG http_protocol 5328 16448 HTTP response complete for ['127.0.0.1', 63196]
2023-07-03 14:28:25,293 INFO runserver 5328 16448 [mHTTP GET /api/open_positions/ 200 [0.18, 127.0.0.1:63196][0m
2023-07-03 14:28:32,214 DEBUG http_protocol 5328 16448 HTTP b'POST' request for ['127.0.0.1', 63188]
2023-07-03 14:28:32,336 DEBUG http_protocol 5328 16448 HTTP 200 response started for ['127.0.0.1', 63188]
2023-07-03 14:28:32,336 DEBUG http_protocol 5328 16448 HTTP close for ['127.0.0.1', 63188]
2023-07-03 14:28:32,336 DEBUG http_protocol 5328 16448 HTTP response complete for ['127.0.0.1', 63188]
2023-07-03 14:28:32,336 INFO runserver 5328 16448 [mHTTP POST /api/close_positions/ 200 [0.12, 127.0.0.1:63188][0m
2023-07-03 14:28:33,789 DEBUG http_protocol 5328 16448 HTTP b'GET' request for ['127.0.0.1', 63196]
2023-07-03 14:28:33,839 DEBUG core 5328 18412 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:28:33,839 DEBUG core 5328 18412 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:28:33,843 DEBUG http_protocol 5328 16448 HTTP 200 response started for ['127.0.0.1', 63196]
2023-07-03 14:28:33,844 DEBUG http_protocol 5328 16448 HTTP close for ['127.0.0.1', 63196]
2023-07-03 14:28:33,844 DEBUG http_protocol 5328 16448 HTTP response complete for ['127.0.0.1', 63196]
2023-07-03 14:28:33,844 INFO runserver 5328 16448 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:63196][0m
2023-07-03 14:29:07,235 INFO autoreload 5328 19304 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:29:08,427 DEBUG selector_events 5216 10172 Using selector: SelectSelector
2023-07-03 14:29:09,416 INFO autoreload 5216 10172 Watching for file changes with StatReloader
2023-07-03 14:29:09,875 INFO server 5216 16876 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:29:09,876 INFO server 5216 16876 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:29:09,876 INFO server 5216 16876 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:29:11,870 DEBUG selector_events 19528 2176 Using selector: SelectSelector
2023-07-03 14:29:12,899 DEBUG functional 19528 2176 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:29:12,899 DEBUG functional 19528 2176 
def db_update_task():
    return 1

2023-07-03 14:29:12,900 DEBUG functional 19528 2176 
def chunks(task, it, n):
    return 1

2023-07-03 14:29:12,901 DEBUG functional 19528 2176 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:29:12,901 DEBUG functional 19528 2176 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:29:12,902 DEBUG functional 19528 2176 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:29:12,902 DEBUG functional 19528 2176 
def backend_cleanup():
    return 1

2023-07-03 14:29:12,902 DEBUG functional 19528 2176 
def debug_task(self):
    return 1

2023-07-03 14:29:12,903 DEBUG functional 19528 2176 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:29:12,903 DEBUG functional 19528 2176 
def xmap(task, it):
    return 1

2023-07-03 14:29:12,903 DEBUG functional 19528 2176 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:29:12,904 DEBUG functional 19528 2176 
def xstarmap(task, it):
    return 1

2023-07-03 14:29:12,904 DEBUG functional 19528 2176 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:29:21,998 DEBUG http_protocol 5216 16876 HTTP b'POST' request for ['127.0.0.1', 63234]
2023-07-03 14:29:22,060 DEBUG functional 5216 10660 
def xstarmap(task, it):
    return 1

2023-07-03 14:29:22,062 DEBUG functional 5216 10660 
def db_update_task():
    return 1

2023-07-03 14:29:22,062 DEBUG functional 5216 10660 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:29:22,063 DEBUG functional 5216 10660 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:29:22,063 DEBUG functional 5216 10660 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:29:22,063 DEBUG functional 5216 10660 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:29:22,064 DEBUG functional 5216 10660 
def chunks(task, it, n):
    return 1

2023-07-03 14:29:22,064 DEBUG functional 5216 10660 
def debug_task(self):
    return 1

2023-07-03 14:29:22,064 DEBUG functional 5216 10660 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:29:22,065 DEBUG functional 5216 10660 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:29:22,065 DEBUG functional 5216 10660 
def xmap(task, it):
    return 1

2023-07-03 14:29:22,065 DEBUG functional 5216 10660 
def backend_cleanup():
    return 1

2023-07-03 14:29:22,066 DEBUG functional 5216 10660 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:29:22,169 DEBUG http_protocol 5216 16876 HTTP 200 response started for ['127.0.0.1', 63234]
2023-07-03 14:29:22,169 DEBUG http_protocol 5216 16876 HTTP close for ['127.0.0.1', 63234]
2023-07-03 14:29:22,170 DEBUG http_protocol 5216 16876 HTTP response complete for ['127.0.0.1', 63234]
2023-07-03 14:29:22,170 INFO runserver 5216 16876 [mHTTP POST /api/market_buy/ 200 [0.17, 127.0.0.1:63234][0m
2023-07-03 14:29:30,536 DEBUG http_protocol 5216 16876 HTTP b'GET' request for ['127.0.0.1', 63242]
2023-07-03 14:29:30,647 DEBUG core 5216 21580 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:29:30,648 DEBUG core 5216 21580 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:29:30,668 DEBUG http_protocol 5216 16876 HTTP 200 response started for ['127.0.0.1', 63242]
2023-07-03 14:29:30,669 DEBUG http_protocol 5216 16876 HTTP close for ['127.0.0.1', 63242]
2023-07-03 14:29:30,669 DEBUG http_protocol 5216 16876 HTTP response complete for ['127.0.0.1', 63242]
2023-07-03 14:29:30,669 INFO runserver 5216 16876 [mHTTP GET /api/open_positions/ 200 [0.13, 127.0.0.1:63242][0m
2023-07-03 14:30:36,617 DEBUG http_protocol 5216 16876 HTTP b'POST' request for ['127.0.0.1', 63249]
2023-07-03 14:30:36,832 DEBUG http_protocol 5216 16876 HTTP 200 response started for ['127.0.0.1', 63249]
2023-07-03 14:30:36,833 DEBUG http_protocol 5216 16876 HTTP close for ['127.0.0.1', 63249]
2023-07-03 14:30:36,833 DEBUG http_protocol 5216 16876 HTTP response complete for ['127.0.0.1', 63249]
2023-07-03 14:30:36,833 INFO runserver 5216 16876 [mHTTP POST /api/close_positions/ 200 [0.22, 127.0.0.1:63249][0m
2023-07-03 14:32:25,420 INFO autoreload 5216 10172 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:32:26,539 DEBUG selector_events 8388 9760 Using selector: SelectSelector
2023-07-03 14:32:27,394 INFO autoreload 8388 9760 Watching for file changes with StatReloader
2023-07-03 14:32:27,827 INFO server 8388 21456 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:32:27,827 INFO server 8388 21456 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:32:27,828 INFO server 8388 21456 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:32:56,824 INFO autoreload 8388 9760 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-03 14:32:57,950 DEBUG selector_events 22052 11684 Using selector: SelectSelector
2023-07-03 14:32:58,883 INFO autoreload 22052 11684 Watching for file changes with StatReloader
2023-07-03 14:32:59,380 INFO server 22052 21808 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 14:32:59,380 INFO server 22052 21808 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 14:32:59,381 INFO server 22052 21808 Listening on TCP address 127.0.0.1:8000
2023-07-03 14:33:11,065 DEBUG selector_events 6008 19860 Using selector: SelectSelector
2023-07-03 14:33:12,132 DEBUG functional 6008 19860 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:33:12,132 DEBUG functional 6008 19860 
def db_update_task():
    return 1

2023-07-03 14:33:12,134 DEBUG functional 6008 19860 
def chunks(task, it, n):
    return 1

2023-07-03 14:33:12,134 DEBUG functional 6008 19860 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:33:12,134 DEBUG functional 6008 19860 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:33:12,135 DEBUG functional 6008 19860 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:33:12,135 DEBUG functional 6008 19860 
def backend_cleanup():
    return 1

2023-07-03 14:33:12,136 DEBUG functional 6008 19860 
def debug_task(self):
    return 1

2023-07-03 14:33:12,136 DEBUG functional 6008 19860 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:33:12,136 DEBUG functional 6008 19860 
def xmap(task, it):
    return 1

2023-07-03 14:33:12,137 DEBUG functional 6008 19860 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:33:12,137 DEBUG functional 6008 19860 
def xstarmap(task, it):
    return 1

2023-07-03 14:33:12,137 DEBUG functional 6008 19860 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:33:19,971 DEBUG http_protocol 22052 21808 HTTP b'POST' request for ['127.0.0.1', 63301]
2023-07-03 14:33:20,143 DEBUG functional 22052 21184 
def xstarmap(task, it):
    return 1

2023-07-03 14:33:20,145 DEBUG functional 22052 21184 
def db_update_task():
    return 1

2023-07-03 14:33:20,146 DEBUG functional 22052 21184 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 14:33:20,146 DEBUG functional 22052 21184 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 14:33:20,147 DEBUG functional 22052 21184 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 14:33:20,147 DEBUG functional 22052 21184 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 14:33:20,147 DEBUG functional 22052 21184 
def chunks(task, it, n):
    return 1

2023-07-03 14:33:20,148 DEBUG functional 22052 21184 
def debug_task(self):
    return 1

2023-07-03 14:33:20,148 DEBUG functional 22052 21184 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 14:33:20,149 DEBUG functional 22052 21184 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 14:33:20,149 DEBUG functional 22052 21184 
def xmap(task, it):
    return 1

2023-07-03 14:33:20,149 DEBUG functional 22052 21184 
def backend_cleanup():
    return 1

2023-07-03 14:33:20,150 DEBUG functional 22052 21184 
def chain(*args, **kwargs):
    return 1

2023-07-03 14:33:20,274 DEBUG http_protocol 22052 21808 HTTP 200 response started for ['127.0.0.1', 63301]
2023-07-03 14:33:20,274 DEBUG http_protocol 22052 21808 HTTP close for ['127.0.0.1', 63301]
2023-07-03 14:33:20,274 DEBUG http_protocol 22052 21808 HTTP response complete for ['127.0.0.1', 63301]
2023-07-03 14:33:20,274 INFO runserver 22052 21808 [mHTTP POST /api/market_buy/ 200 [0.30, 127.0.0.1:63301][0m
2023-07-03 14:40:12,985 DEBUG http_protocol 22052 21808 HTTP b'GET' request for ['127.0.0.1', 63324]
2023-07-03 14:40:13,101 DEBUG core 22052 5020 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:40:13,102 DEBUG core 22052 5020 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:40:13,123 DEBUG http_protocol 22052 21808 HTTP 200 response started for ['127.0.0.1', 63324]
2023-07-03 14:40:13,123 DEBUG http_protocol 22052 21808 HTTP close for ['127.0.0.1', 63324]
2023-07-03 14:40:13,123 DEBUG http_protocol 22052 21808 HTTP response complete for ['127.0.0.1', 63324]
2023-07-03 14:40:13,124 INFO runserver 22052 21808 [mHTTP GET /api/open_positions/ 200 [0.14, 127.0.0.1:63324][0m
2023-07-03 14:40:17,301 DEBUG http_protocol 22052 21808 HTTP b'POST' request for ['127.0.0.1', 63326]
2023-07-03 14:40:17,423 DEBUG http_protocol 22052 21808 HTTP 200 response started for ['127.0.0.1', 63326]
2023-07-03 14:40:17,423 DEBUG http_protocol 22052 21808 HTTP close for ['127.0.0.1', 63326]
2023-07-03 14:40:17,424 DEBUG http_protocol 22052 21808 HTTP response complete for ['127.0.0.1', 63326]
2023-07-03 14:40:17,424 INFO runserver 22052 21808 [mHTTP POST /api/close_positions/ 200 [0.12, 127.0.0.1:63326][0m
2023-07-03 14:40:18,457 DEBUG http_protocol 22052 21808 HTTP b'GET' request for ['127.0.0.1', 63324]
2023-07-03 14:40:18,507 DEBUG core 22052 18708 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 14:40:18,507 DEBUG core 22052 18708 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 14:40:18,512 DEBUG http_protocol 22052 21808 HTTP 200 response started for ['127.0.0.1', 63324]
2023-07-03 14:40:18,512 DEBUG http_protocol 22052 21808 HTTP close for ['127.0.0.1', 63324]
2023-07-03 14:40:18,513 DEBUG http_protocol 22052 21808 HTTP response complete for ['127.0.0.1', 63324]
2023-07-03 14:40:18,513 INFO runserver 22052 21808 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:63324][0m
2023-07-03 14:48:17,714 DEBUG selector_events 15596 11936 Using selector: SelectSelector
2023-07-03 14:48:23,903 DEBUG selector_events 19908 9192 Using selector: SelectSelector
2023-07-03 17:58:06,724 DEBUG selector_events 9592 12164 Using selector: SelectSelector
2023-07-03 17:58:15,115 DEBUG selector_events 4136 17548 Using selector: SelectSelector
2023-07-03 17:58:16,880 DEBUG selector_events 21872 10432 Using selector: SelectSelector
2023-07-03 17:58:17,699 INFO autoreload 21872 10432 Watching for file changes with StatReloader
2023-07-03 17:58:18,157 INFO server 21872 13648 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-03 17:58:18,157 INFO server 21872 13648 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-03 17:58:18,158 INFO server 21872 13648 Listening on TCP address 127.0.0.1:8000
2023-07-03 17:58:33,449 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 57075]
2023-07-03 17:58:33,476 DEBUG http_protocol 21872 13648 HTTP 301 response started for ['127.0.0.1', 57075]
2023-07-03 17:58:33,476 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 57075]
2023-07-03 17:58:33,476 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 57075]
2023-07-03 17:58:33,476 INFO runserver 21872 13648 [32mHTTP GET /api/game 301 [0.03, 127.0.0.1:57075][0m
2023-07-03 17:58:33,482 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 57075]
2023-07-03 17:58:33,556 DEBUG core 21872 17676 Successfully imported extension module "markdown.extensions.toc".
2023-07-03 17:58:33,556 DEBUG core 21872 17676 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-03 17:58:33,587 WARNING log 21872 4864 Method Not Allowed: /api/game/
2023-07-03 17:58:33,588 DEBUG http_protocol 21872 13648 HTTP 405 response started for ['127.0.0.1', 57075]
2023-07-03 17:58:33,588 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 57075]
2023-07-03 17:58:33,588 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 57075]
2023-07-03 17:58:33,588 WARNING runserver 21872 13648 [31;1mHTTP GET /api/game/ 405 [0.11, 127.0.0.1:57075][0m
2023-07-03 17:58:33,665 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 57075]
2023-07-03 17:58:33,666 DEBUG http_protocol 21872 13648 HTTP disconnect for ['127.0.0.1', 57075]
2023-07-03 17:58:33,694 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 57078]
2023-07-03 17:58:33,696 DEBUG http_protocol 21872 13648 HTTP disconnect for ['127.0.0.1', 57078]
2023-07-03 17:58:33,709 WARNING log 21872 3960 Not Found: /favicon.ico
2023-07-03 17:59:08,533 DEBUG http_protocol 21872 13648 HTTP b'OPTIONS' request for ['127.0.0.1', 63940]
2023-07-03 17:59:08,536 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 63940]
2023-07-03 17:59:08,536 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 63940]
2023-07-03 17:59:08,536 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 63940]
2023-07-03 17:59:08,536 INFO runserver 21872 13648 [mHTTP OPTIONS /api/login/ 200 [0.00, 127.0.0.1:63940][0m
2023-07-03 17:59:08,539 DEBUG http_protocol 21872 13648 HTTP b'POST' request for ['127.0.0.1', 63940]
2023-07-03 17:59:08,847 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 63940]
2023-07-03 17:59:08,848 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 63940]
2023-07-03 17:59:08,848 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 63940]
2023-07-03 17:59:08,848 INFO runserver 21872 13648 [mHTTP POST /api/login/ 200 [0.31, 127.0.0.1:63940][0m
2023-07-03 17:59:08,918 DEBUG http_protocol 21872 13648 HTTP b'OPTIONS' request for ['127.0.0.1', 63940]
2023-07-03 17:59:08,921 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 63940]
2023-07-03 17:59:08,922 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 63940]
2023-07-03 17:59:08,922 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 63940]
2023-07-03 17:59:08,922 INFO runserver 21872 13648 [mHTTP OPTIONS /api/profile_dashboard/ 200 [0.00, 127.0.0.1:63940][0m
2023-07-03 17:59:08,966 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 63940]
2023-07-03 17:59:09,023 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 63940]
2023-07-03 17:59:09,023 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 63940]
2023-07-03 17:59:09,023 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 63940]
2023-07-03 17:59:09,023 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:63940][0m
2023-07-03 17:59:09,027 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 63940]
2023-07-03 17:59:09,084 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 63940]
2023-07-03 17:59:09,084 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 63940]
2023-07-03 17:59:09,084 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 63940]
2023-07-03 17:59:09,085 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:63940][0m
2023-07-03 17:59:15,934 DEBUG http_protocol 21872 13648 HTTP b'POST' request for ['127.0.0.1', 63940]
2023-07-03 17:59:16,240 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 63940]
2023-07-03 17:59:16,241 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 63940]
2023-07-03 17:59:16,241 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 63940]
2023-07-03 17:59:16,241 INFO runserver 21872 13648 [mHTTP POST /api/login/ 200 [0.31, 127.0.0.1:63940][0m
2023-07-03 17:59:16,259 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 63940]
2023-07-03 17:59:16,316 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 63940]
2023-07-03 17:59:16,316 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 63940]
2023-07-03 17:59:16,316 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 63940]
2023-07-03 17:59:16,316 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:63940][0m
2023-07-03 17:59:16,319 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 63940]
2023-07-03 17:59:16,376 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 63940]
2023-07-03 17:59:16,377 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 63940]
2023-07-03 17:59:16,377 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 63940]
2023-07-03 17:59:16,377 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:63940][0m
2023-07-03 18:01:39,303 DEBUG http_protocol 21872 13648 HTTP b'POST' request for ['127.0.0.1', 58895]
2023-07-03 18:01:39,712 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 58895]
2023-07-03 18:01:39,713 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 58895]
2023-07-03 18:01:39,713 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 58895]
2023-07-03 18:01:39,713 INFO runserver 21872 13648 [mHTTP POST /api/login/ 200 [0.41, 127.0.0.1:58895][0m
2023-07-03 18:01:39,732 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 58895]
2023-07-03 18:01:39,734 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 58897]
2023-07-03 18:01:39,796 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 58895]
2023-07-03 18:01:39,796 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 58895]
2023-07-03 18:01:39,796 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 58895]
2023-07-03 18:01:39,796 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:58895][0m
2023-07-03 18:01:39,799 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 58897]
2023-07-03 18:01:39,800 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 58897]
2023-07-03 18:01:39,800 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 58897]
2023-07-03 18:01:39,800 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:58897][0m
2023-07-03 18:01:42,142 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 58895]
2023-07-03 18:01:42,143 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 58897]
2023-07-03 18:01:42,203 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 58895]
2023-07-03 18:01:42,204 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 58895]
2023-07-03 18:01:42,204 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 58895]
2023-07-03 18:01:42,204 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:58895][0m
2023-07-03 18:01:42,207 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 58897]
2023-07-03 18:01:42,207 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 58897]
2023-07-03 18:01:42,208 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 58897]
2023-07-03 18:01:42,208 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:58897][0m
2023-07-03 18:01:43,819 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 58895]
2023-07-03 18:01:43,820 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 58897]
2023-07-03 18:01:43,884 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 58897]
2023-07-03 18:01:43,884 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 58897]
2023-07-03 18:01:43,885 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 58897]
2023-07-03 18:01:43,885 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:58897][0m
2023-07-03 18:01:43,886 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 58895]
2023-07-03 18:01:43,886 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 58895]
2023-07-03 18:01:43,886 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 58895]
2023-07-03 18:01:43,886 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:58895][0m
2023-07-03 18:03:04,540 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 53397]
2023-07-03 18:03:04,542 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 53398]
2023-07-03 18:03:04,605 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 53397]
2023-07-03 18:03:04,605 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 53397]
2023-07-03 18:03:04,605 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 53397]
2023-07-03 18:03:04,605 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:53397][0m
2023-07-03 18:03:04,609 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 53398]
2023-07-03 18:03:04,609 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 53398]
2023-07-03 18:03:04,609 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 53398]
2023-07-03 18:03:04,609 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:53398][0m
2023-07-03 18:03:05,681 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 53397]
2023-07-03 18:03:05,683 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 53398]
2023-07-03 18:03:05,747 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 53397]
2023-07-03 18:03:05,748 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 53397]
2023-07-03 18:03:05,748 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 53397]
2023-07-03 18:03:05,748 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:53397][0m
2023-07-03 18:03:05,749 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 53398]
2023-07-03 18:03:05,750 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 53398]
2023-07-03 18:03:05,750 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 53398]
2023-07-03 18:03:05,750 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:53398][0m
2023-07-03 18:03:06,373 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 53397]
2023-07-03 18:03:06,374 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 53398]
2023-07-03 18:03:06,436 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 53397]
2023-07-03 18:03:06,436 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 53397]
2023-07-03 18:03:06,436 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 53397]
2023-07-03 18:03:06,436 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:53397][0m
2023-07-03 18:03:06,438 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 53398]
2023-07-03 18:03:06,438 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 53398]
2023-07-03 18:03:06,438 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 53398]
2023-07-03 18:03:06,438 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:53398][0m
2023-07-03 18:03:07,266 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 53397]
2023-07-03 18:03:07,268 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 53398]
2023-07-03 18:03:07,330 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 53397]
2023-07-03 18:03:07,331 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 53397]
2023-07-03 18:03:07,331 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 53397]
2023-07-03 18:03:07,331 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:53397][0m
2023-07-03 18:03:07,334 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 53398]
2023-07-03 18:03:07,334 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 53398]
2023-07-03 18:03:07,334 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 53398]
2023-07-03 18:03:07,335 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:53398][0m
2023-07-03 18:03:20,253 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 53397]
2023-07-03 18:03:20,254 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 53398]
2023-07-03 18:03:20,329 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 53397]
2023-07-03 18:03:20,329 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 53397]
2023-07-03 18:03:20,329 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 53397]
2023-07-03 18:03:20,330 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.08, 127.0.0.1:53397][0m
2023-07-03 18:03:20,333 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 53398]
2023-07-03 18:03:20,333 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 53398]
2023-07-03 18:03:20,334 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 53398]
2023-07-03 18:03:20,334 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.08, 127.0.0.1:53398][0m
2023-07-03 18:03:28,793 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 53397]
2023-07-03 18:03:28,794 DEBUG http_protocol 21872 13648 HTTP b'GET' request for ['127.0.0.1', 53398]
2023-07-03 18:03:28,859 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 53397]
2023-07-03 18:03:28,860 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 53397]
2023-07-03 18:03:28,860 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 53397]
2023-07-03 18:03:28,860 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:53397][0m
2023-07-03 18:03:28,863 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 53398]
2023-07-03 18:03:28,863 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 53398]
2023-07-03 18:03:28,863 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 53398]
2023-07-03 18:03:28,863 INFO runserver 21872 13648 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:53398][0m
2023-07-03 18:04:34,359 DEBUG selector_events 1140 22056 Using selector: SelectSelector
2023-07-03 18:04:35,542 DEBUG functional 1140 22056 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-03 18:04:35,542 DEBUG functional 1140 22056 
def db_update_task():
    return 1

2023-07-03 18:04:35,543 DEBUG functional 1140 22056 
def chunks(task, it, n):
    return 1

2023-07-03 18:04:35,587 DEBUG functional 1140 22056 
def place_order_task(*args, **kwds):
    return 1

2023-07-03 18:04:35,587 DEBUG functional 1140 22056 
def close_position_task(*args, **kwds):
    return 1

2023-07-03 18:04:35,588 DEBUG functional 1140 22056 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-03 18:04:35,588 DEBUG functional 1140 22056 
def backend_cleanup():
    return 1

2023-07-03 18:04:35,589 DEBUG functional 1140 22056 
def debug_task(self):
    return 1

2023-07-03 18:04:35,589 DEBUG functional 1140 22056 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-03 18:04:35,589 DEBUG functional 1140 22056 
def xmap(task, it):
    return 1

2023-07-03 18:04:35,590 DEBUG functional 1140 22056 
def chain(*args, **kwargs):
    return 1

2023-07-03 18:04:35,590 DEBUG functional 1140 22056 
def xstarmap(task, it):
    return 1

2023-07-03 18:04:35,590 DEBUG functional 1140 22056 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-03 18:04:40,250 DEBUG http_protocol 21872 13648 HTTP b'OPTIONS' request for ['127.0.0.1', 60723]
2023-07-03 18:04:40,253 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 60723]
2023-07-03 18:04:40,254 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 60723]
2023-07-03 18:04:40,254 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 60723]
2023-07-03 18:04:40,254 INFO runserver 21872 13648 [mHTTP OPTIONS /api/game/ 200 [0.00, 127.0.0.1:60723][0m
2023-07-03 18:04:40,256 DEBUG http_protocol 21872 13648 HTTP b'POST' request for ['127.0.0.1', 60723]
2023-07-03 18:04:40,308 WARNING log 21872 3960 Bad Request: /api/game/
2023-07-03 18:04:40,308 DEBUG http_protocol 21872 13648 HTTP 400 response started for ['127.0.0.1', 60723]
2023-07-03 18:04:40,309 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 60723]
2023-07-03 18:04:40,309 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 60723]
2023-07-03 18:04:40,309 WARNING runserver 21872 13648 [31;1mHTTP POST /api/game/ 400 [0.05, 127.0.0.1:60723][0m
2023-07-03 18:06:39,635 DEBUG http_protocol 21872 13648 HTTP b'POST' request for ['127.0.0.1', 55736]
2023-07-03 18:06:39,688 WARNING log 21872 4864 Bad Request: /api/game/
2023-07-03 18:06:39,689 DEBUG http_protocol 21872 13648 HTTP 400 response started for ['127.0.0.1', 55736]
2023-07-03 18:06:39,689 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 55736]
2023-07-03 18:06:39,689 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 55736]
2023-07-03 18:06:39,690 WARNING runserver 21872 13648 [31;1mHTTP POST /api/game/ 400 [0.05, 127.0.0.1:55736][0m
2023-07-03 18:17:03,813 DEBUG http_protocol 21872 13648 HTTP b'POST' request for ['127.0.0.1', 52111]
2023-07-03 18:17:18,998 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 52111]
2023-07-03 18:17:18,998 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 52111]
2023-07-03 18:17:18,998 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 52111]
2023-07-03 18:17:18,998 INFO runserver 21872 13648 [mHTTP POST /api/game/ 200 [15.18, 127.0.0.1:52111][0m
2023-07-03 18:17:28,088 DEBUG http_protocol 21872 13648 HTTP b'POST' request for ['127.0.0.1', 52111]
2023-07-03 18:17:43,151 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 52111]
2023-07-03 18:17:43,151 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 52111]
2023-07-03 18:17:43,151 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 52111]
2023-07-03 18:17:43,151 INFO runserver 21872 13648 [mHTTP POST /api/game/ 200 [15.06, 127.0.0.1:52111][0m
2023-07-03 18:17:48,615 DEBUG http_protocol 21872 13648 HTTP b'POST' request for ['127.0.0.1', 52111]
2023-07-03 18:18:03,681 DEBUG http_protocol 21872 13648 HTTP 200 response started for ['127.0.0.1', 52111]
2023-07-03 18:18:03,681 DEBUG http_protocol 21872 13648 HTTP close for ['127.0.0.1', 52111]
2023-07-03 18:18:03,682 DEBUG http_protocol 21872 13648 HTTP response complete for ['127.0.0.1', 52111]
2023-07-03 18:18:03,682 INFO runserver 21872 13648 [mHTTP POST /api/game/ 200 [15.07, 127.0.0.1:52111][0m
2023-07-05 11:49:44,460 DEBUG selector_events 10140 21920 Using selector: SelectSelector
2023-07-05 11:49:46,382 DEBUG selector_events 11988 22352 Using selector: SelectSelector
2023-07-05 11:49:47,178 INFO autoreload 11988 22352 Watching for file changes with StatReloader
2023-07-05 11:49:47,828 INFO server 11988 17348 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 11:49:47,828 INFO server 11988 17348 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 11:49:47,829 INFO server 11988 17348 Listening on TCP address 127.0.0.1:8000
2023-07-05 11:50:13,798 DEBUG http_protocol 11988 17348 HTTP b'OPTIONS' request for ['127.0.0.1', 53234]
2023-07-05 11:50:13,803 DEBUG http_protocol 11988 17348 HTTP 200 response started for ['127.0.0.1', 53234]
2023-07-05 11:50:13,804 DEBUG http_protocol 11988 17348 HTTP close for ['127.0.0.1', 53234]
2023-07-05 11:50:13,804 DEBUG http_protocol 11988 17348 HTTP response complete for ['127.0.0.1', 53234]
2023-07-05 11:50:13,804 INFO runserver 11988 17348 [mHTTP OPTIONS /api/login/ 200 [0.01, 127.0.0.1:53234][0m
2023-07-05 11:50:13,807 DEBUG http_protocol 11988 17348 HTTP b'POST' request for ['127.0.0.1', 53234]
2023-07-05 11:50:14,122 DEBUG http_protocol 11988 17348 HTTP 200 response started for ['127.0.0.1', 53234]
2023-07-05 11:50:14,122 DEBUG http_protocol 11988 17348 HTTP close for ['127.0.0.1', 53234]
2023-07-05 11:50:14,122 DEBUG http_protocol 11988 17348 HTTP response complete for ['127.0.0.1', 53234]
2023-07-05 11:50:14,122 INFO runserver 11988 17348 [mHTTP POST /api/login/ 200 [0.32, 127.0.0.1:53234][0m
2023-07-05 11:50:14,191 DEBUG http_protocol 11988 17348 HTTP b'OPTIONS' request for ['127.0.0.1', 53234]
2023-07-05 11:50:14,193 DEBUG http_protocol 11988 17348 HTTP 200 response started for ['127.0.0.1', 53234]
2023-07-05 11:50:14,193 DEBUG http_protocol 11988 17348 HTTP close for ['127.0.0.1', 53234]
2023-07-05 11:50:14,194 DEBUG http_protocol 11988 17348 HTTP response complete for ['127.0.0.1', 53234]
2023-07-05 11:50:14,194 INFO runserver 11988 17348 [mHTTP OPTIONS /api/profile_dashboard/ 200 [0.00, 127.0.0.1:53234][0m
2023-07-05 11:50:14,241 DEBUG http_protocol 11988 17348 HTTP b'GET' request for ['127.0.0.1', 53234]
2023-07-05 11:50:14,296 DEBUG http_protocol 11988 17348 HTTP 200 response started for ['127.0.0.1', 53234]
2023-07-05 11:50:14,297 DEBUG http_protocol 11988 17348 HTTP close for ['127.0.0.1', 53234]
2023-07-05 11:50:14,297 DEBUG http_protocol 11988 17348 HTTP response complete for ['127.0.0.1', 53234]
2023-07-05 11:50:14,297 INFO runserver 11988 17348 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:53234][0m
2023-07-05 11:50:14,300 DEBUG http_protocol 11988 17348 HTTP b'GET' request for ['127.0.0.1', 53234]
2023-07-05 11:50:14,356 DEBUG http_protocol 11988 17348 HTTP 200 response started for ['127.0.0.1', 53234]
2023-07-05 11:50:14,356 DEBUG http_protocol 11988 17348 HTTP close for ['127.0.0.1', 53234]
2023-07-05 11:50:14,357 DEBUG http_protocol 11988 17348 HTTP response complete for ['127.0.0.1', 53234]
2023-07-05 11:50:14,357 INFO runserver 11988 17348 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:53234][0m
2023-07-05 11:50:17,269 DEBUG http_protocol 11988 17348 HTTP b'GET' request for ['127.0.0.1', 53234]
2023-07-05 11:50:17,271 DEBUG http_protocol 11988 17348 HTTP b'GET' request for ['127.0.0.1', 53238]
2023-07-05 11:50:17,331 DEBUG http_protocol 11988 17348 HTTP 200 response started for ['127.0.0.1', 53234]
2023-07-05 11:50:17,332 DEBUG http_protocol 11988 17348 HTTP close for ['127.0.0.1', 53234]
2023-07-05 11:50:17,332 DEBUG http_protocol 11988 17348 HTTP response complete for ['127.0.0.1', 53234]
2023-07-05 11:50:17,332 INFO runserver 11988 17348 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:53234][0m
2023-07-05 11:50:17,334 DEBUG http_protocol 11988 17348 HTTP 200 response started for ['127.0.0.1', 53238]
2023-07-05 11:50:17,335 DEBUG http_protocol 11988 17348 HTTP close for ['127.0.0.1', 53238]
2023-07-05 11:50:17,335 DEBUG http_protocol 11988 17348 HTTP response complete for ['127.0.0.1', 53238]
2023-07-05 11:50:17,335 INFO runserver 11988 17348 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:53238][0m
2023-07-05 11:50:18,637 DEBUG http_protocol 11988 17348 HTTP b'GET' request for ['127.0.0.1', 53234]
2023-07-05 11:50:18,639 DEBUG http_protocol 11988 17348 HTTP b'GET' request for ['127.0.0.1', 53238]
2023-07-05 11:50:18,701 DEBUG http_protocol 11988 17348 HTTP 200 response started for ['127.0.0.1', 53238]
2023-07-05 11:50:18,701 DEBUG http_protocol 11988 17348 HTTP close for ['127.0.0.1', 53238]
2023-07-05 11:50:18,701 DEBUG http_protocol 11988 17348 HTTP response complete for ['127.0.0.1', 53238]
2023-07-05 11:50:18,701 INFO runserver 11988 17348 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:53238][0m
2023-07-05 11:50:18,702 DEBUG http_protocol 11988 17348 HTTP 200 response started for ['127.0.0.1', 53234]
2023-07-05 11:50:18,702 DEBUG http_protocol 11988 17348 HTTP close for ['127.0.0.1', 53234]
2023-07-05 11:50:18,703 DEBUG http_protocol 11988 17348 HTTP response complete for ['127.0.0.1', 53234]
2023-07-05 11:50:18,703 INFO runserver 11988 17348 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:53234][0m
2023-07-05 11:53:02,155 DEBUG selector_events 296 11160 Using selector: SelectSelector
2023-07-05 11:53:03,826 DEBUG selector_events 21436 14168 Using selector: SelectSelector
2023-07-05 11:53:04,622 INFO autoreload 21436 14168 Watching for file changes with StatReloader
2023-07-05 11:53:05,040 INFO server 21436 21000 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 11:53:05,041 INFO server 21436 21000 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 11:53:05,041 INFO server 21436 21000 Listening on TCP address 127.0.0.1:8000
2023-07-05 12:03:26,247 DEBUG selector_events 16420 20816 Using selector: SelectSelector
2023-07-05 12:10:08,900 DEBUG selector_events 18988 17252 Using selector: SelectSelector
2023-07-05 12:10:36,413 DEBUG selector_events 18224 10908 Using selector: SelectSelector
2023-07-05 12:11:14,419 DEBUG selector_events 19132 7600 Using selector: SelectSelector
2023-07-05 12:11:43,127 DEBUG selector_events 19412 19508 Using selector: SelectSelector
2023-07-05 12:11:56,927 DEBUG selector_events 15960 3696 Using selector: SelectSelector
2023-07-05 12:11:58,701 DEBUG selector_events 17360 5288 Using selector: SelectSelector
2023-07-05 12:11:59,480 INFO autoreload 17360 5288 Watching for file changes with StatReloader
2023-07-05 12:11:59,889 INFO server 17360 19676 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 12:11:59,889 INFO server 17360 19676 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 12:11:59,890 INFO server 17360 19676 Listening on TCP address 127.0.0.1:8000
2023-07-05 12:12:27,640 DEBUG http_protocol 17360 19676 HTTP b'OPTIONS' request for ['127.0.0.1', 51509]
2023-07-05 12:12:27,643 DEBUG http_protocol 17360 19676 HTTP 200 response started for ['127.0.0.1', 51509]
2023-07-05 12:12:27,644 DEBUG http_protocol 17360 19676 HTTP close for ['127.0.0.1', 51509]
2023-07-05 12:12:27,644 DEBUG http_protocol 17360 19676 HTTP response complete for ['127.0.0.1', 51509]
2023-07-05 12:12:27,644 INFO runserver 17360 19676 [mHTTP OPTIONS /api/register/ 200 [0.00, 127.0.0.1:51509][0m
2023-07-05 12:12:27,646 DEBUG http_protocol 17360 19676 HTTP b'POST' request for ['127.0.0.1', 51509]
2023-07-05 12:12:27,696 DEBUG views 17360 20816 Serializer is valid
2023-07-05 12:12:27,956 DEBUG views 17360 20816 User profile saved
2023-07-05 12:12:27,960 DEBUG http_protocol 17360 19676 HTTP 201 response started for ['127.0.0.1', 51509]
2023-07-05 12:12:27,961 DEBUG http_protocol 17360 19676 HTTP close for ['127.0.0.1', 51509]
2023-07-05 12:12:27,961 DEBUG http_protocol 17360 19676 HTTP response complete for ['127.0.0.1', 51509]
2023-07-05 12:12:27,961 INFO runserver 17360 19676 [mHTTP POST /api/register/ 201 [0.32, 127.0.0.1:51509][0m
2023-07-05 12:12:27,982 DEBUG http_protocol 17360 19676 HTTP b'GET' request for ['127.0.0.1', 51509]
2023-07-05 12:12:27,983 DEBUG http_protocol 17360 19676 HTTP b'GET' request for ['127.0.0.1', 51511]
2023-07-05 12:12:28,257 ERROR log 17360 15708 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 237, in get
    user_profile_data = UserProfileSerializer(user_profile).data
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 555, in data
    ret = super().data
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 253, in data
    self._data = self.to_representation(self.instance)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 507, in to_representation
    for field in fields:
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 368, in _readable_fields
    for field in self.fields.values():
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\utils\functional.py", line 57, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 356, in fields
    for key, value in self.get_fields().items():
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 1076, in get_fields
    field_class, field_kwargs = self.build_field(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 1222, in build_field
    return self.build_unknown_field(field_name, model_class)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 1340, in build_unknown_field
    raise ImproperlyConfigured(
django.core.exceptions.ImproperlyConfigured: Field name `balance` is not valid for model `UserProfile`.
2023-07-05 12:12:28,284 DEBUG http_protocol 17360 19676 HTTP 500 response started for ['127.0.0.1', 51511]
2023-07-05 12:12:28,284 DEBUG http_protocol 17360 19676 HTTP response chunk for ['127.0.0.1', 51511]
2023-07-05 12:12:28,284 DEBUG http_protocol 17360 19676 HTTP response chunk for ['127.0.0.1', 51511]
2023-07-05 12:12:28,284 DEBUG http_protocol 17360 19676 HTTP close for ['127.0.0.1', 51511]
2023-07-05 12:12:28,285 DEBUG http_protocol 17360 19676 HTTP response complete for ['127.0.0.1', 51511]
2023-07-05 12:12:28,270 ERROR log 17360 11868 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 237, in get
    user_profile_data = UserProfileSerializer(user_profile).data
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 555, in data
    ret = super().data
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 253, in data
    self._data = self.to_representation(self.instance)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 507, in to_representation
    for field in fields:
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 368, in _readable_fields
    for field in self.fields.values():
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\utils\functional.py", line 57, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 356, in fields
    for key, value in self.get_fields().items():
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 1076, in get_fields
    field_class, field_kwargs = self.build_field(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 1222, in build_field
    return self.build_unknown_field(field_name, model_class)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 1340, in build_unknown_field
    raise ImproperlyConfigured(
django.core.exceptions.ImproperlyConfigured: Field name `balance` is not valid for model `UserProfile`.
2023-07-05 12:12:28,285 ERROR runserver 17360 19676 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.30, 127.0.0.1:51511][0m
2023-07-05 12:12:28,294 DEBUG http_protocol 17360 19676 HTTP 500 response started for ['127.0.0.1', 51509]
2023-07-05 12:12:28,295 DEBUG http_protocol 17360 19676 HTTP response chunk for ['127.0.0.1', 51509]
2023-07-05 12:12:28,295 DEBUG http_protocol 17360 19676 HTTP response chunk for ['127.0.0.1', 51509]
2023-07-05 12:12:28,295 DEBUG http_protocol 17360 19676 HTTP close for ['127.0.0.1', 51509]
2023-07-05 12:12:28,295 DEBUG http_protocol 17360 19676 HTTP response complete for ['127.0.0.1', 51509]
2023-07-05 12:12:28,295 ERROR runserver 17360 19676 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.31, 127.0.0.1:51509][0m
2023-07-05 12:12:31,114 DEBUG http_protocol 17360 19676 HTTP b'GET' request for ['127.0.0.1', 51511]
2023-07-05 12:12:31,116 DEBUG http_protocol 17360 19676 HTTP b'GET' request for ['127.0.0.1', 51509]
2023-07-05 12:12:31,251 ERROR log 17360 15708 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 237, in get
    user_profile_data = UserProfileSerializer(user_profile).data
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 555, in data
    ret = super().data
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 253, in data
    self._data = self.to_representation(self.instance)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 507, in to_representation
    for field in fields:
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 368, in _readable_fields
    for field in self.fields.values():
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\utils\functional.py", line 57, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 356, in fields
    for key, value in self.get_fields().items():
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 1076, in get_fields
    field_class, field_kwargs = self.build_field(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 1222, in build_field
    return self.build_unknown_field(field_name, model_class)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 1340, in build_unknown_field
    raise ImproperlyConfigured(
django.core.exceptions.ImproperlyConfigured: Field name `balance` is not valid for model `UserProfile`.
2023-07-05 12:12:31,266 DEBUG http_protocol 17360 19676 HTTP 500 response started for ['127.0.0.1', 51511]
2023-07-05 12:12:31,267 DEBUG http_protocol 17360 19676 HTTP response chunk for ['127.0.0.1', 51511]
2023-07-05 12:12:31,267 DEBUG http_protocol 17360 19676 HTTP response chunk for ['127.0.0.1', 51511]
2023-07-05 12:12:31,267 DEBUG http_protocol 17360 19676 HTTP close for ['127.0.0.1', 51511]
2023-07-05 12:12:31,267 DEBUG http_protocol 17360 19676 HTTP response complete for ['127.0.0.1', 51511]
2023-07-05 12:12:31,256 ERROR log 17360 11868 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 237, in get
    user_profile_data = UserProfileSerializer(user_profile).data
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 555, in data
    ret = super().data
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 253, in data
    self._data = self.to_representation(self.instance)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 507, in to_representation
    for field in fields:
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 368, in _readable_fields
    for field in self.fields.values():
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\utils\functional.py", line 57, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 356, in fields
    for key, value in self.get_fields().items():
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 1076, in get_fields
    field_class, field_kwargs = self.build_field(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 1222, in build_field
    return self.build_unknown_field(field_name, model_class)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 1340, in build_unknown_field
    raise ImproperlyConfigured(
django.core.exceptions.ImproperlyConfigured: Field name `balance` is not valid for model `UserProfile`.
2023-07-05 12:12:31,267 ERROR runserver 17360 19676 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.15, 127.0.0.1:51511][0m
2023-07-05 12:12:31,274 DEBUG http_protocol 17360 19676 HTTP 500 response started for ['127.0.0.1', 51509]
2023-07-05 12:12:31,274 DEBUG http_protocol 17360 19676 HTTP response chunk for ['127.0.0.1', 51509]
2023-07-05 12:12:31,274 DEBUG http_protocol 17360 19676 HTTP response chunk for ['127.0.0.1', 51509]
2023-07-05 12:12:31,274 DEBUG http_protocol 17360 19676 HTTP close for ['127.0.0.1', 51509]
2023-07-05 12:12:31,275 DEBUG http_protocol 17360 19676 HTTP response complete for ['127.0.0.1', 51509]
2023-07-05 12:12:31,275 ERROR runserver 17360 19676 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.16, 127.0.0.1:51509][0m
2023-07-05 12:12:32,823 DEBUG http_protocol 17360 19676 HTTP b'GET' request for ['127.0.0.1', 51511]
2023-07-05 12:12:32,824 DEBUG http_protocol 17360 19676 HTTP b'GET' request for ['127.0.0.1', 51509]
2023-07-05 12:12:32,925 ERROR log 17360 11868 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 237, in get
    user_profile_data = UserProfileSerializer(user_profile).data
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 555, in data
    ret = super().data
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 253, in data
    self._data = self.to_representation(self.instance)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 507, in to_representation
    for field in fields:
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 368, in _readable_fields
    for field in self.fields.values():
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\utils\functional.py", line 57, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 356, in fields
    for key, value in self.get_fields().items():
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 1076, in get_fields
    field_class, field_kwargs = self.build_field(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 1222, in build_field
    return self.build_unknown_field(field_name, model_class)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 1340, in build_unknown_field
    raise ImproperlyConfigured(
django.core.exceptions.ImproperlyConfigured: Field name `balance` is not valid for model `UserProfile`.
2023-07-05 12:12:32,933 DEBUG http_protocol 17360 19676 HTTP 500 response started for ['127.0.0.1', 51509]
2023-07-05 12:12:32,933 DEBUG http_protocol 17360 19676 HTTP response chunk for ['127.0.0.1', 51509]
2023-07-05 12:12:32,933 DEBUG http_protocol 17360 19676 HTTP response chunk for ['127.0.0.1', 51509]
2023-07-05 12:12:32,934 DEBUG http_protocol 17360 19676 HTTP close for ['127.0.0.1', 51509]
2023-07-05 12:12:32,934 DEBUG http_protocol 17360 19676 HTTP response complete for ['127.0.0.1', 51509]
2023-07-05 12:12:32,934 ERROR runserver 17360 19676 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.11, 127.0.0.1:51509][0m
2023-07-05 12:12:33,023 ERROR log 17360 11868 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 237, in get
    user_profile_data = UserProfileSerializer(user_profile).data
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 555, in data
    ret = super().data
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 253, in data
    self._data = self.to_representation(self.instance)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 507, in to_representation
    for field in fields:
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 368, in _readable_fields
    for field in self.fields.values():
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\utils\functional.py", line 57, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 356, in fields
    for key, value in self.get_fields().items():
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 1076, in get_fields
    field_class, field_kwargs = self.build_field(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 1222, in build_field
    return self.build_unknown_field(field_name, model_class)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 1340, in build_unknown_field
    raise ImproperlyConfigured(
django.core.exceptions.ImproperlyConfigured: Field name `balance` is not valid for model `UserProfile`.
2023-07-05 12:12:33,031 DEBUG http_protocol 17360 19676 HTTP 500 response started for ['127.0.0.1', 51511]
2023-07-05 12:12:33,032 DEBUG http_protocol 17360 19676 HTTP response chunk for ['127.0.0.1', 51511]
2023-07-05 12:12:33,032 DEBUG http_protocol 17360 19676 HTTP response chunk for ['127.0.0.1', 51511]
2023-07-05 12:12:33,032 DEBUG http_protocol 17360 19676 HTTP close for ['127.0.0.1', 51511]
2023-07-05 12:12:33,032 DEBUG http_protocol 17360 19676 HTTP response complete for ['127.0.0.1', 51511]
2023-07-05 12:12:33,032 ERROR runserver 17360 19676 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.21, 127.0.0.1:51511][0m
2023-07-05 12:14:04,975 DEBUG selector_events 14588 9048 Using selector: SelectSelector
2023-07-05 12:14:06,714 DEBUG selector_events 3900 1872 Using selector: SelectSelector
2023-07-05 12:14:07,509 INFO autoreload 3900 1872 Watching for file changes with StatReloader
2023-07-05 12:14:07,936 INFO server 3900 9524 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 12:14:07,937 INFO server 3900 9524 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 12:14:07,937 INFO server 3900 9524 Listening on TCP address 127.0.0.1:8000
2023-07-05 12:14:23,525 DEBUG http_protocol 3900 9524 HTTP b'POST' request for ['127.0.0.1', 50659]
2023-07-05 12:14:23,815 WARNING log 3900 8472 Bad Request: /api/login/
2023-07-05 12:14:23,816 DEBUG http_protocol 3900 9524 HTTP 400 response started for ['127.0.0.1', 50659]
2023-07-05 12:14:23,816 DEBUG http_protocol 3900 9524 HTTP close for ['127.0.0.1', 50659]
2023-07-05 12:14:23,816 DEBUG http_protocol 3900 9524 HTTP response complete for ['127.0.0.1', 50659]
2023-07-05 12:14:23,816 WARNING runserver 3900 9524 [31;1mHTTP POST /api/login/ 400 [0.29, 127.0.0.1:50659][0m
2023-07-05 12:14:25,489 DEBUG http_protocol 3900 9524 HTTP b'POST' request for ['127.0.0.1', 50659]
2023-07-05 12:14:25,787 DEBUG http_protocol 3900 9524 HTTP 200 response started for ['127.0.0.1', 50659]
2023-07-05 12:14:25,788 DEBUG http_protocol 3900 9524 HTTP close for ['127.0.0.1', 50659]
2023-07-05 12:14:25,788 DEBUG http_protocol 3900 9524 HTTP response complete for ['127.0.0.1', 50659]
2023-07-05 12:14:25,788 INFO runserver 3900 9524 [mHTTP POST /api/login/ 200 [0.30, 127.0.0.1:50659][0m
2023-07-05 12:14:25,802 DEBUG http_protocol 3900 9524 HTTP b'GET' request for ['127.0.0.1', 50659]
2023-07-05 12:14:25,803 DEBUG http_protocol 3900 9524 HTTP b'GET' request for ['127.0.0.1', 50575]
2023-07-05 12:14:26,057 ERROR log 3900 8472 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 240, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 12:14:26,075 DEBUG http_protocol 3900 9524 HTTP 500 response started for ['127.0.0.1', 50659]
2023-07-05 12:14:26,075 DEBUG http_protocol 3900 9524 HTTP response chunk for ['127.0.0.1', 50659]
2023-07-05 12:14:26,075 DEBUG http_protocol 3900 9524 HTTP response chunk for ['127.0.0.1', 50659]
2023-07-05 12:14:26,075 DEBUG http_protocol 3900 9524 HTTP close for ['127.0.0.1', 50659]
2023-07-05 12:14:26,076 DEBUG http_protocol 3900 9524 HTTP response complete for ['127.0.0.1', 50659]
2023-07-05 12:14:26,063 ERROR log 3900 13108 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 240, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 12:14:26,076 ERROR runserver 3900 9524 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.27, 127.0.0.1:50659][0m
2023-07-05 12:14:26,083 DEBUG http_protocol 3900 9524 HTTP 500 response started for ['127.0.0.1', 50575]
2023-07-05 12:14:26,084 DEBUG http_protocol 3900 9524 HTTP response chunk for ['127.0.0.1', 50575]
2023-07-05 12:14:26,084 DEBUG http_protocol 3900 9524 HTTP response chunk for ['127.0.0.1', 50575]
2023-07-05 12:14:26,084 DEBUG http_protocol 3900 9524 HTTP close for ['127.0.0.1', 50575]
2023-07-05 12:14:26,084 DEBUG http_protocol 3900 9524 HTTP response complete for ['127.0.0.1', 50575]
2023-07-05 12:14:26,084 ERROR runserver 3900 9524 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.28, 127.0.0.1:50575][0m
2023-07-05 12:14:27,585 DEBUG http_protocol 3900 9524 HTTP b'GET' request for ['127.0.0.1', 50575]
2023-07-05 12:14:27,586 DEBUG http_protocol 3900 9524 HTTP b'GET' request for ['127.0.0.1', 50659]
2023-07-05 12:14:27,706 ERROR log 3900 13108 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 240, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 12:14:27,737 DEBUG http_protocol 3900 9524 HTTP 500 response started for ['127.0.0.1', 50575]
2023-07-05 12:14:27,737 DEBUG http_protocol 3900 9524 HTTP response chunk for ['127.0.0.1', 50575]
2023-07-05 12:14:27,737 DEBUG http_protocol 3900 9524 HTTP response chunk for ['127.0.0.1', 50575]
2023-07-05 12:14:27,738 DEBUG http_protocol 3900 9524 HTTP close for ['127.0.0.1', 50575]
2023-07-05 12:14:27,738 DEBUG http_protocol 3900 9524 HTTP response complete for ['127.0.0.1', 50575]
2023-07-05 12:14:27,728 ERROR log 3900 8472 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 240, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 12:14:27,738 ERROR runserver 3900 9524 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.15, 127.0.0.1:50575][0m
2023-07-05 12:14:27,745 DEBUG http_protocol 3900 9524 HTTP 500 response started for ['127.0.0.1', 50659]
2023-07-05 12:14:27,745 DEBUG http_protocol 3900 9524 HTTP response chunk for ['127.0.0.1', 50659]
2023-07-05 12:14:27,745 DEBUG http_protocol 3900 9524 HTTP response chunk for ['127.0.0.1', 50659]
2023-07-05 12:14:27,745 DEBUG http_protocol 3900 9524 HTTP close for ['127.0.0.1', 50659]
2023-07-05 12:14:27,745 DEBUG http_protocol 3900 9524 HTTP response complete for ['127.0.0.1', 50659]
2023-07-05 12:14:27,745 ERROR runserver 3900 9524 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.16, 127.0.0.1:50659][0m
2023-07-05 12:38:39,372 DEBUG selector_events 4400 8948 Using selector: SelectSelector
2023-07-05 12:38:41,054 DEBUG selector_events 17316 9440 Using selector: SelectSelector
2023-07-05 12:38:41,836 INFO autoreload 17316 9440 Watching for file changes with StatReloader
2023-07-05 12:38:42,268 INFO server 17316 8716 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 12:38:42,268 INFO server 17316 8716 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 12:38:42,268 INFO server 17316 8716 Listening on TCP address 127.0.0.1:8000
2023-07-05 12:40:14,338 DEBUG selector_events 11724 12108 Using selector: SelectSelector
2023-07-05 12:40:15,460 DEBUG functional 11724 12108 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-05 12:40:15,461 DEBUG functional 11724 12108 
def chunks(task, it, n):
    return 1

2023-07-05 12:40:15,461 DEBUG functional 11724 12108 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-05 12:40:15,462 DEBUG functional 11724 12108 
def backend_cleanup():
    return 1

2023-07-05 12:40:15,462 DEBUG functional 11724 12108 
def debug_task(self):
    return 1

2023-07-05 12:40:15,462 DEBUG functional 11724 12108 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-05 12:40:15,463 DEBUG functional 11724 12108 
def xmap(task, it):
    return 1

2023-07-05 12:40:15,463 DEBUG functional 11724 12108 
def db_update_task():
    return 1

2023-07-05 12:40:15,463 DEBUG functional 11724 12108 
def chain(*args, **kwargs):
    return 1

2023-07-05 12:40:15,464 DEBUG functional 11724 12108 
def place_order_task(*args, **kwds):
    return 1

2023-07-05 12:40:15,464 DEBUG functional 11724 12108 
def close_position_task(*args, **kwds):
    return 1

2023-07-05 12:40:15,464 DEBUG functional 11724 12108 
def xstarmap(task, it):
    return 1

2023-07-05 12:40:15,465 DEBUG functional 11724 12108 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-05 12:40:31,968 DEBUG http_protocol 17316 8716 HTTP b'POST' request for ['127.0.0.1', 55837]
2023-07-05 12:40:32,268 DEBUG http_protocol 17316 8716 HTTP 200 response started for ['127.0.0.1', 55837]
2023-07-05 12:40:32,268 DEBUG http_protocol 17316 8716 HTTP close for ['127.0.0.1', 55837]
2023-07-05 12:40:32,268 DEBUG http_protocol 17316 8716 HTTP response complete for ['127.0.0.1', 55837]
2023-07-05 12:40:32,269 INFO runserver 17316 8716 [mHTTP POST /api/login/ 200 [0.30, 127.0.0.1:55837][0m
2023-07-05 12:40:32,284 DEBUG http_protocol 17316 8716 HTTP b'GET' request for ['127.0.0.1', 55837]
2023-07-05 12:40:32,286 DEBUG http_protocol 17316 8716 HTTP b'GET' request for ['127.0.0.1', 55839]
2023-07-05 12:40:32,474 ERROR log 17316 15600 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 246, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 12:40:32,492 DEBUG http_protocol 17316 8716 HTTP 500 response started for ['127.0.0.1', 55837]
2023-07-05 12:40:32,492 DEBUG http_protocol 17316 8716 HTTP response chunk for ['127.0.0.1', 55837]
2023-07-05 12:40:32,492 DEBUG http_protocol 17316 8716 HTTP response chunk for ['127.0.0.1', 55837]
2023-07-05 12:40:32,492 DEBUG http_protocol 17316 8716 HTTP close for ['127.0.0.1', 55837]
2023-07-05 12:40:32,492 DEBUG http_protocol 17316 8716 HTTP response complete for ['127.0.0.1', 55837]
2023-07-05 12:40:32,480 ERROR log 17316 15916 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 246, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 12:40:32,492 ERROR runserver 17316 8716 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.21, 127.0.0.1:55837][0m
2023-07-05 12:40:32,499 DEBUG http_protocol 17316 8716 HTTP 500 response started for ['127.0.0.1', 55839]
2023-07-05 12:40:32,500 DEBUG http_protocol 17316 8716 HTTP response chunk for ['127.0.0.1', 55839]
2023-07-05 12:40:32,500 DEBUG http_protocol 17316 8716 HTTP response chunk for ['127.0.0.1', 55839]
2023-07-05 12:40:32,500 DEBUG http_protocol 17316 8716 HTTP close for ['127.0.0.1', 55839]
2023-07-05 12:40:32,500 DEBUG http_protocol 17316 8716 HTTP response complete for ['127.0.0.1', 55839]
2023-07-05 12:40:32,500 ERROR runserver 17316 8716 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.21, 127.0.0.1:55839][0m
2023-07-05 12:40:39,456 DEBUG http_protocol 17316 8716 HTTP b'OPTIONS' request for ['127.0.0.1', 55837]
2023-07-05 12:40:39,459 DEBUG http_protocol 17316 8716 HTTP 200 response started for ['127.0.0.1', 55837]
2023-07-05 12:40:39,459 DEBUG http_protocol 17316 8716 HTTP close for ['127.0.0.1', 55837]
2023-07-05 12:40:39,459 DEBUG http_protocol 17316 8716 HTTP response complete for ['127.0.0.1', 55837]
2023-07-05 12:40:39,459 INFO runserver 17316 8716 [mHTTP OPTIONS /api/market_buy/ 200 [0.00, 127.0.0.1:55837][0m
2023-07-05 12:40:39,461 DEBUG http_protocol 17316 8716 HTTP b'POST' request for ['127.0.0.1', 55839]
2023-07-05 12:40:39,508 WARNING log 17316 15916 Bad Request: /api/market_buy/
2023-07-05 12:40:39,509 DEBUG http_protocol 17316 8716 HTTP 400 response started for ['127.0.0.1', 55839]
2023-07-05 12:40:39,509 DEBUG http_protocol 17316 8716 HTTP close for ['127.0.0.1', 55839]
2023-07-05 12:40:39,509 DEBUG http_protocol 17316 8716 HTTP response complete for ['127.0.0.1', 55839]
2023-07-05 12:40:39,509 WARNING runserver 17316 8716 [31;1mHTTP POST /api/market_buy/ 400 [0.05, 127.0.0.1:55839][0m
2023-07-05 12:42:15,882 DEBUG selector_events 9324 20692 Using selector: SelectSelector
2023-07-05 12:42:17,883 DEBUG selector_events 21992 16048 Using selector: SelectSelector
2023-07-05 12:42:18,843 INFO autoreload 21992 16048 Watching for file changes with StatReloader
2023-07-05 12:42:19,375 INFO server 21992 9892 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 12:42:19,375 INFO server 21992 9892 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 12:42:19,376 INFO server 21992 9892 Listening on TCP address 127.0.0.1:8000
2023-07-05 12:51:16,016 DEBUG selector_events 10476 20824 Using selector: SelectSelector
2023-07-05 12:51:22,650 DEBUG selector_events 9592 16292 Using selector: SelectSelector
2023-07-05 12:51:29,071 DEBUG selector_events 1804 16204 Using selector: SelectSelector
2023-07-05 12:51:30,747 DEBUG selector_events 14416 17036 Using selector: SelectSelector
2023-07-05 12:51:31,539 INFO autoreload 14416 17036 Watching for file changes with StatReloader
2023-07-05 12:51:31,951 INFO server 14416 19988 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 12:51:31,951 INFO server 14416 19988 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 12:51:31,952 INFO server 14416 19988 Listening on TCP address 127.0.0.1:8000
2023-07-05 12:54:20,995 DEBUG selector_events 21424 21492 Using selector: SelectSelector
2023-07-05 12:54:22,780 DEBUG selector_events 10840 20284 Using selector: SelectSelector
2023-07-05 12:54:23,584 INFO autoreload 10840 20284 Watching for file changes with StatReloader
2023-07-05 12:54:23,996 INFO server 10840 18512 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 12:54:23,996 INFO server 10840 18512 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 12:54:23,997 INFO server 10840 18512 Listening on TCP address 127.0.0.1:8000
2023-07-05 12:54:43,093 DEBUG http_protocol 10840 18512 HTTP b'POST' request for ['127.0.0.1', 61805]
2023-07-05 12:54:43,144 DEBUG views 10840 12264 Serializer is valid
2023-07-05 12:54:43,399 DEBUG views 10840 12264 User profile saved
2023-07-05 12:54:43,404 DEBUG http_protocol 10840 18512 HTTP 201 response started for ['127.0.0.1', 61805]
2023-07-05 12:54:43,404 DEBUG http_protocol 10840 18512 HTTP close for ['127.0.0.1', 61805]
2023-07-05 12:54:43,405 DEBUG http_protocol 10840 18512 HTTP response complete for ['127.0.0.1', 61805]
2023-07-05 12:54:43,405 INFO runserver 10840 18512 [mHTTP POST /api/register/ 201 [0.31, 127.0.0.1:61805][0m
2023-07-05 12:54:43,429 DEBUG http_protocol 10840 18512 HTTP b'GET' request for ['127.0.0.1', 61805]
2023-07-05 12:54:43,431 DEBUG http_protocol 10840 18512 HTTP b'GET' request for ['127.0.0.1', 61807]
2023-07-05 12:54:43,677 ERROR log 10840 14896 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 246, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 12:54:43,697 DEBUG http_protocol 10840 18512 HTTP 500 response started for ['127.0.0.1', 61805]
2023-07-05 12:54:43,698 DEBUG http_protocol 10840 18512 HTTP response chunk for ['127.0.0.1', 61805]
2023-07-05 12:54:43,698 DEBUG http_protocol 10840 18512 HTTP response chunk for ['127.0.0.1', 61805]
2023-07-05 12:54:43,698 DEBUG http_protocol 10840 18512 HTTP close for ['127.0.0.1', 61805]
2023-07-05 12:54:43,698 DEBUG http_protocol 10840 18512 HTTP response complete for ['127.0.0.1', 61805]
2023-07-05 12:54:43,683 ERROR log 10840 10776 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 246, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 12:54:43,698 ERROR runserver 10840 18512 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.27, 127.0.0.1:61805][0m
2023-07-05 12:54:43,705 DEBUG http_protocol 10840 18512 HTTP 500 response started for ['127.0.0.1', 61807]
2023-07-05 12:54:43,706 DEBUG http_protocol 10840 18512 HTTP response chunk for ['127.0.0.1', 61807]
2023-07-05 12:54:43,706 DEBUG http_protocol 10840 18512 HTTP response chunk for ['127.0.0.1', 61807]
2023-07-05 12:54:43,706 DEBUG http_protocol 10840 18512 HTTP close for ['127.0.0.1', 61807]
2023-07-05 12:54:43,706 DEBUG http_protocol 10840 18512 HTTP response complete for ['127.0.0.1', 61807]
2023-07-05 12:54:43,706 ERROR runserver 10840 18512 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.28, 127.0.0.1:61807][0m
2023-07-05 13:06:07,355 DEBUG selector_events 21016 20792 Using selector: SelectSelector
2023-07-05 13:06:09,087 DEBUG selector_events 20156 13592 Using selector: SelectSelector
2023-07-05 13:06:09,900 INFO autoreload 20156 13592 Watching for file changes with StatReloader
2023-07-05 13:06:10,334 INFO server 20156 19796 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 13:06:10,334 INFO server 20156 19796 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 13:06:10,335 INFO server 20156 19796 Listening on TCP address 127.0.0.1:8000
2023-07-05 13:07:04,269 DEBUG selector_events 1916 16008 Using selector: SelectSelector
2023-07-05 13:07:05,372 DEBUG functional 1916 16008 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-05 13:07:05,373 DEBUG functional 1916 16008 
def place_order_task(*args, **kwds):
    return 1

2023-07-05 13:07:05,373 DEBUG functional 1916 16008 
def close_position_task(*args, **kwds):
    return 1

2023-07-05 13:07:05,373 DEBUG functional 1916 16008 
def chunks(task, it, n):
    return 1

2023-07-05 13:07:05,374 DEBUG functional 1916 16008 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-05 13:07:05,374 DEBUG functional 1916 16008 
def backend_cleanup():
    return 1

2023-07-05 13:07:05,375 DEBUG functional 1916 16008 
def debug_task(self):
    return 1

2023-07-05 13:07:05,375 DEBUG functional 1916 16008 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-05 13:07:05,375 DEBUG functional 1916 16008 
def xmap(task, it):
    return 1

2023-07-05 13:07:05,376 DEBUG functional 1916 16008 
def chain(*args, **kwargs):
    return 1

2023-07-05 13:07:05,376 DEBUG functional 1916 16008 
def xstarmap(task, it):
    return 1

2023-07-05 13:07:05,376 DEBUG functional 1916 16008 
def db_update_task():
    return 1

2023-07-05 13:07:05,377 DEBUG functional 1916 16008 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-05 13:07:09,470 DEBUG http_protocol 20156 19796 HTTP b'POST' request for ['127.0.0.1', 55488]
2023-07-05 13:07:09,768 DEBUG http_protocol 20156 19796 HTTP 200 response started for ['127.0.0.1', 55488]
2023-07-05 13:07:09,769 DEBUG http_protocol 20156 19796 HTTP close for ['127.0.0.1', 55488]
2023-07-05 13:07:09,769 DEBUG http_protocol 20156 19796 HTTP response complete for ['127.0.0.1', 55488]
2023-07-05 13:07:09,769 INFO runserver 20156 19796 [mHTTP POST /api/login/ 200 [0.30, 127.0.0.1:55488][0m
2023-07-05 13:07:09,786 DEBUG http_protocol 20156 19796 HTTP b'GET' request for ['127.0.0.1', 55488]
2023-07-05 13:07:09,788 DEBUG http_protocol 20156 19796 HTTP b'GET' request for ['127.0.0.1', 55490]
2023-07-05 13:07:09,989 ERROR log 20156 14896 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 246, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 13:07:10,008 DEBUG http_protocol 20156 19796 HTTP 500 response started for ['127.0.0.1', 55490]
2023-07-05 13:07:10,008 DEBUG http_protocol 20156 19796 HTTP response chunk for ['127.0.0.1', 55490]
2023-07-05 13:07:10,008 DEBUG http_protocol 20156 19796 HTTP response chunk for ['127.0.0.1', 55490]
2023-07-05 13:07:10,009 DEBUG http_protocol 20156 19796 HTTP close for ['127.0.0.1', 55490]
2023-07-05 13:07:10,009 DEBUG http_protocol 20156 19796 HTTP response complete for ['127.0.0.1', 55490]
2023-07-05 13:07:09,996 ERROR log 20156 10144 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 246, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 13:07:10,009 ERROR runserver 20156 19796 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.22, 127.0.0.1:55490][0m
2023-07-05 13:07:10,019 DEBUG http_protocol 20156 19796 HTTP 500 response started for ['127.0.0.1', 55488]
2023-07-05 13:07:10,019 DEBUG http_protocol 20156 19796 HTTP response chunk for ['127.0.0.1', 55488]
2023-07-05 13:07:10,019 DEBUG http_protocol 20156 19796 HTTP response chunk for ['127.0.0.1', 55488]
2023-07-05 13:07:10,019 DEBUG http_protocol 20156 19796 HTTP close for ['127.0.0.1', 55488]
2023-07-05 13:07:10,020 DEBUG http_protocol 20156 19796 HTTP response complete for ['127.0.0.1', 55488]
2023-07-05 13:07:10,020 ERROR runserver 20156 19796 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.23, 127.0.0.1:55488][0m
2023-07-05 13:07:15,330 DEBUG http_protocol 20156 19796 HTTP b'POST' request for ['127.0.0.1', 55488]
2023-07-05 13:07:15,394 DEBUG functional 20156 1872 
def xstarmap(task, it):
    return 1

2023-07-05 13:07:15,396 DEBUG functional 20156 1872 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-05 13:07:15,396 DEBUG functional 20156 1872 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-05 13:07:15,397 DEBUG functional 20156 1872 
def chunks(task, it, n):
    return 1

2023-07-05 13:07:15,397 DEBUG functional 20156 1872 
def debug_task(self):
    return 1

2023-07-05 13:07:15,397 DEBUG functional 20156 1872 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-05 13:07:15,398 DEBUG functional 20156 1872 
def db_update_task():
    return 1

2023-07-05 13:07:15,398 DEBUG functional 20156 1872 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-05 13:07:15,398 DEBUG functional 20156 1872 
def place_order_task(*args, **kwds):
    return 1

2023-07-05 13:07:15,399 DEBUG functional 20156 1872 
def close_position_task(*args, **kwds):
    return 1

2023-07-05 13:07:15,399 DEBUG functional 20156 1872 
def xmap(task, it):
    return 1

2023-07-05 13:07:15,399 DEBUG functional 20156 1872 
def backend_cleanup():
    return 1

2023-07-05 13:07:15,400 DEBUG functional 20156 1872 
def chain(*args, **kwargs):
    return 1

2023-07-05 13:07:15,514 DEBUG http_protocol 20156 19796 HTTP 200 response started for ['127.0.0.1', 55488]
2023-07-05 13:07:15,514 DEBUG http_protocol 20156 19796 HTTP close for ['127.0.0.1', 55488]
2023-07-05 13:07:15,515 DEBUG http_protocol 20156 19796 HTTP response complete for ['127.0.0.1', 55488]
2023-07-05 13:07:15,515 INFO runserver 20156 19796 [mHTTP POST /api/market_buy/ 200 [0.19, 127.0.0.1:55488][0m
2023-07-05 13:09:19,184 DEBUG http_protocol 20156 19796 HTTP b'GET' request for ['127.0.0.1', 53244]
2023-07-05 13:09:19,300 DEBUG core 20156 7196 Successfully imported extension module "markdown.extensions.toc".
2023-07-05 13:09:19,300 DEBUG core 20156 7196 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-05 13:09:19,320 DEBUG http_protocol 20156 19796 HTTP 200 response started for ['127.0.0.1', 53244]
2023-07-05 13:09:19,321 DEBUG http_protocol 20156 19796 HTTP close for ['127.0.0.1', 53244]
2023-07-05 13:09:19,321 DEBUG http_protocol 20156 19796 HTTP response complete for ['127.0.0.1', 53244]
2023-07-05 13:09:19,321 INFO runserver 20156 19796 [mHTTP GET /api/open_positions/ 200 [0.14, 127.0.0.1:53244][0m
2023-07-05 13:09:19,382 DEBUG http_protocol 20156 19796 HTTP b'GET' request for ['127.0.0.1', 53244]
2023-07-05 13:09:19,383 DEBUG http_protocol 20156 19796 HTTP disconnect for ['127.0.0.1', 53244]
2023-07-05 13:09:19,400 DEBUG http_protocol 20156 19796 HTTP b'GET' request for ['127.0.0.1', 53248]
2023-07-05 13:09:19,401 DEBUG http_protocol 20156 19796 HTTP disconnect for ['127.0.0.1', 53248]
2023-07-05 13:09:19,414 WARNING log 20156 14896 Not Found: /favicon.ico
2023-07-05 13:11:23,612 DEBUG http_protocol 20156 19796 HTTP b'GET' request for ['127.0.0.1', 60939]
2023-07-05 13:11:23,706 ERROR log 20156 14896 Internal Server Error: /api/profiles/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\generics.py", line 239, in get
    return self.list(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\mixins.py", line 46, in list
    return Response(serializer.data)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 768, in data
    ret = super().data
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 253, in data
    self._data = self.to_representation(self.instance)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 686, in to_representation
    return [
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 687, in <listcomp>
    self.child.to_representation(item) for item in iterable
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 507, in to_representation
    for field in fields:
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 368, in _readable_fields
    for field in self.fields.values():
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\utils\functional.py", line 57, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 356, in fields
    for key, value in self.get_fields().items():
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 1076, in get_fields
    field_class, field_kwargs = self.build_field(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 1222, in build_field
    return self.build_unknown_field(field_name, model_class)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\serializers.py", line 1340, in build_unknown_field
    raise ImproperlyConfigured(
django.core.exceptions.ImproperlyConfigured: Field name `balance` is not valid for model `UserProfile`.
2023-07-05 13:11:23,717 DEBUG http_protocol 20156 19796 HTTP 500 response started for ['127.0.0.1', 60939]
2023-07-05 13:11:23,717 DEBUG http_protocol 20156 19796 HTTP response chunk for ['127.0.0.1', 60939]
2023-07-05 13:11:23,717 DEBUG http_protocol 20156 19796 HTTP response chunk for ['127.0.0.1', 60939]
2023-07-05 13:11:23,717 DEBUG http_protocol 20156 19796 HTTP close for ['127.0.0.1', 60939]
2023-07-05 13:11:23,718 DEBUG http_protocol 20156 19796 HTTP response complete for ['127.0.0.1', 60939]
2023-07-05 13:11:23,718 ERROR runserver 20156 19796 [35;1mHTTP GET /api/profiles/ 500 [0.11, 127.0.0.1:60939][0m
2023-07-05 13:12:30,690 INFO autoreload 20156 13592 C:\Users\Evert\Desktop\Django\monreal\api\serializers.py changed, reloading.
2023-07-05 13:12:31,784 DEBUG selector_events 5104 11188 Using selector: SelectSelector
2023-07-05 13:12:32,710 INFO autoreload 5104 11188 Watching for file changes with StatReloader
2023-07-05 13:12:33,211 INFO server 5104 9884 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 13:12:33,211 INFO server 5104 9884 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 13:12:33,212 INFO server 5104 9884 Listening on TCP address 127.0.0.1:8000
2023-07-05 13:12:35,709 DEBUG http_protocol 5104 9884 HTTP b'GET' request for ['127.0.0.1', 51574]
2023-07-05 13:12:35,829 DEBUG core 5104 11304 Successfully imported extension module "markdown.extensions.toc".
2023-07-05 13:12:35,829 DEBUG core 5104 11304 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-05 13:12:35,869 DEBUG http_protocol 5104 9884 HTTP 200 response started for ['127.0.0.1', 51574]
2023-07-05 13:12:35,870 DEBUG http_protocol 5104 9884 HTTP close for ['127.0.0.1', 51574]
2023-07-05 13:12:35,870 DEBUG http_protocol 5104 9884 HTTP response complete for ['127.0.0.1', 51574]
2023-07-05 13:12:35,870 INFO runserver 5104 9884 [mHTTP GET /api/profiles/ 200 [0.16, 127.0.0.1:51574][0m
2023-07-05 13:12:35,906 DEBUG http_protocol 5104 9884 HTTP b'GET' request for ['127.0.0.1', 51574]
2023-07-05 13:12:35,907 DEBUG http_protocol 5104 9884 HTTP disconnect for ['127.0.0.1', 51574]
2023-07-05 17:57:51,829 DEBUG selector_events 13104 15476 Using selector: SelectSelector
2023-07-05 17:57:59,463 DEBUG selector_events 20496 17164 Using selector: SelectSelector
2023-07-05 17:58:05,797 DEBUG selector_events 11168 10544 Using selector: SelectSelector
2023-07-05 17:58:07,496 DEBUG selector_events 14632 8900 Using selector: SelectSelector
2023-07-05 17:58:08,297 INFO autoreload 14632 8900 Watching for file changes with StatReloader
2023-07-05 17:58:08,732 INFO server 14632 13804 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 17:58:08,732 INFO server 14632 13804 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 17:58:08,733 INFO server 14632 13804 Listening on TCP address 127.0.0.1:8000
2023-07-05 17:58:24,617 DEBUG http_protocol 14632 13804 HTTP b'GET' request for ['127.0.0.1', 64063]
2023-07-05 17:58:24,748 DEBUG core 14632 4004 Successfully imported extension module "markdown.extensions.toc".
2023-07-05 17:58:24,748 DEBUG core 14632 4004 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-05 17:58:24,787 DEBUG http_protocol 14632 13804 HTTP 200 response started for ['127.0.0.1', 64063]
2023-07-05 17:58:24,788 DEBUG http_protocol 14632 13804 HTTP close for ['127.0.0.1', 64063]
2023-07-05 17:58:24,788 DEBUG http_protocol 14632 13804 HTTP response complete for ['127.0.0.1', 64063]
2023-07-05 17:58:24,788 INFO runserver 14632 13804 [mHTTP GET /api/open_positions/ 200 [0.17, 127.0.0.1:64063][0m
2023-07-05 17:58:24,882 DEBUG http_protocol 14632 13804 HTTP b'GET' request for ['127.0.0.1', 64063]
2023-07-05 17:58:24,883 DEBUG http_protocol 14632 13804 HTTP disconnect for ['127.0.0.1', 64063]
2023-07-05 17:58:24,884 DEBUG http_protocol 14632 13804 HTTP b'GET' request for ['127.0.0.1', 64065]
2023-07-05 17:58:24,886 DEBUG http_protocol 14632 13804 HTTP disconnect for ['127.0.0.1', 64065]
2023-07-05 17:58:31,970 DEBUG http_protocol 14632 13804 HTTP b'OPTIONS' request for ['127.0.0.1', 64069]
2023-07-05 17:58:31,972 DEBUG http_protocol 14632 13804 HTTP 200 response started for ['127.0.0.1', 64069]
2023-07-05 17:58:31,973 DEBUG http_protocol 14632 13804 HTTP close for ['127.0.0.1', 64069]
2023-07-05 17:58:31,973 DEBUG http_protocol 14632 13804 HTTP response complete for ['127.0.0.1', 64069]
2023-07-05 17:58:31,973 INFO runserver 14632 13804 [mHTTP OPTIONS /api/login/ 200 [0.00, 127.0.0.1:64069][0m
2023-07-05 17:58:31,975 DEBUG http_protocol 14632 13804 HTTP b'POST' request for ['127.0.0.1', 64069]
2023-07-05 17:58:32,269 WARNING log 14632 18368 Bad Request: /api/login/
2023-07-05 17:58:32,270 DEBUG http_protocol 14632 13804 HTTP 400 response started for ['127.0.0.1', 64069]
2023-07-05 17:58:32,270 DEBUG http_protocol 14632 13804 HTTP close for ['127.0.0.1', 64069]
2023-07-05 17:58:32,271 DEBUG http_protocol 14632 13804 HTTP response complete for ['127.0.0.1', 64069]
2023-07-05 17:58:32,271 WARNING runserver 14632 13804 [31;1mHTTP POST /api/login/ 400 [0.30, 127.0.0.1:64069][0m
2023-07-05 17:58:34,159 DEBUG http_protocol 14632 13804 HTTP b'POST' request for ['127.0.0.1', 64069]
2023-07-05 17:58:34,458 DEBUG http_protocol 14632 13804 HTTP 200 response started for ['127.0.0.1', 64069]
2023-07-05 17:58:34,458 DEBUG http_protocol 14632 13804 HTTP close for ['127.0.0.1', 64069]
2023-07-05 17:58:34,459 DEBUG http_protocol 14632 13804 HTTP response complete for ['127.0.0.1', 64069]
2023-07-05 17:58:34,459 INFO runserver 14632 13804 [mHTTP POST /api/login/ 200 [0.30, 127.0.0.1:64069][0m
2023-07-05 17:58:34,482 DEBUG http_protocol 14632 13804 HTTP b'OPTIONS' request for ['127.0.0.1', 64069]
2023-07-05 17:58:34,485 DEBUG http_protocol 14632 13804 HTTP 200 response started for ['127.0.0.1', 64069]
2023-07-05 17:58:34,486 DEBUG http_protocol 14632 13804 HTTP close for ['127.0.0.1', 64069]
2023-07-05 17:58:34,486 DEBUG http_protocol 14632 13804 HTTP response complete for ['127.0.0.1', 64069]
2023-07-05 17:58:34,486 INFO runserver 14632 13804 [mHTTP OPTIONS /api/profile_dashboard/ 200 [0.00, 127.0.0.1:64069][0m
2023-07-05 17:58:34,487 DEBUG http_protocol 14632 13804 HTTP b'OPTIONS' request for ['127.0.0.1', 64072]
2023-07-05 17:58:34,490 DEBUG http_protocol 14632 13804 HTTP 200 response started for ['127.0.0.1', 64072]
2023-07-05 17:58:34,490 DEBUG http_protocol 14632 13804 HTTP close for ['127.0.0.1', 64072]
2023-07-05 17:58:34,490 DEBUG http_protocol 14632 13804 HTTP response complete for ['127.0.0.1', 64072]
2023-07-05 17:58:34,490 INFO runserver 14632 13804 [mHTTP OPTIONS /api/trading_profile/ 200 [0.00, 127.0.0.1:64072][0m
2023-07-05 17:58:34,516 DEBUG http_protocol 14632 13804 HTTP b'OPTIONS' request for ['127.0.0.1', 64069]
2023-07-05 17:58:34,518 DEBUG http_protocol 14632 13804 HTTP b'GET' request for ['127.0.0.1', 64072]
2023-07-05 17:58:34,562 DEBUG http_protocol 14632 13804 HTTP b'GET' request for ['127.0.0.1', 64073]
2023-07-05 17:58:34,563 DEBUG http_protocol 14632 13804 HTTP b'OPTIONS' request for ['127.0.0.1', 64074]
2023-07-05 17:58:34,568 DEBUG http_protocol 14632 13804 HTTP 200 response started for ['127.0.0.1', 64069]
2023-07-05 17:58:34,568 DEBUG http_protocol 14632 13804 HTTP close for ['127.0.0.1', 64069]
2023-07-05 17:58:34,568 DEBUG http_protocol 14632 13804 HTTP response complete for ['127.0.0.1', 64069]
2023-07-05 17:58:34,568 INFO runserver 14632 13804 [mHTTP OPTIONS /api/profile_dashboard/ 200 [0.05, 127.0.0.1:64069][0m
2023-07-05 17:58:34,571 DEBUG http_protocol 14632 13804 HTTP 200 response started for ['127.0.0.1', 64074]
2023-07-05 17:58:34,572 DEBUG http_protocol 14632 13804 HTTP close for ['127.0.0.1', 64074]
2023-07-05 17:58:34,572 DEBUG http_protocol 14632 13804 HTTP response complete for ['127.0.0.1', 64074]
2023-07-05 17:58:34,572 INFO runserver 14632 13804 [mHTTP OPTIONS /api/trading_profile/ 200 [0.01, 127.0.0.1:64074][0m
2023-07-05 17:58:34,573 DEBUG http_protocol 14632 13804 HTTP b'GET' request for ['127.0.0.1', 64069]
2023-07-05 17:58:34,576 DEBUG http_protocol 14632 13804 HTTP b'GET' request for ['127.0.0.1', 64074]
2023-07-05 17:58:34,634 DEBUG http_protocol 14632 13804 HTTP 200 response started for ['127.0.0.1', 64073]
2023-07-05 17:58:34,635 DEBUG http_protocol 14632 13804 HTTP close for ['127.0.0.1', 64073]
2023-07-05 17:58:34,635 DEBUG http_protocol 14632 13804 HTTP response complete for ['127.0.0.1', 64073]
2023-07-05 17:58:34,635 INFO runserver 14632 13804 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:64073][0m
2023-07-05 17:58:34,655 DEBUG http_protocol 14632 13804 HTTP 200 response started for ['127.0.0.1', 64074]
2023-07-05 17:58:34,655 DEBUG http_protocol 14632 13804 HTTP close for ['127.0.0.1', 64074]
2023-07-05 17:58:34,655 DEBUG http_protocol 14632 13804 HTTP response complete for ['127.0.0.1', 64074]
2023-07-05 17:58:34,656 INFO runserver 14632 13804 [mHTTP GET /api/trading_profile/ 200 [0.08, 127.0.0.1:64074][0m
2023-07-05 17:58:34,865 ERROR log 14632 14988 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 255, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 17:58:34,881 DEBUG http_protocol 14632 13804 HTTP 500 response started for ['127.0.0.1', 64072]
2023-07-05 17:58:34,882 DEBUG http_protocol 14632 13804 HTTP response chunk for ['127.0.0.1', 64072]
2023-07-05 17:58:34,882 DEBUG http_protocol 14632 13804 HTTP response chunk for ['127.0.0.1', 64072]
2023-07-05 17:58:34,882 DEBUG http_protocol 14632 13804 HTTP close for ['127.0.0.1', 64072]
2023-07-05 17:58:34,882 DEBUG http_protocol 14632 13804 HTTP response complete for ['127.0.0.1', 64072]
2023-07-05 17:58:34,866 ERROR log 14632 18368 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 255, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 17:58:34,882 ERROR runserver 14632 13804 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.36, 127.0.0.1:64072][0m
2023-07-05 17:58:34,891 DEBUG http_protocol 14632 13804 HTTP 500 response started for ['127.0.0.1', 64069]
2023-07-05 17:58:34,891 DEBUG http_protocol 14632 13804 HTTP response chunk for ['127.0.0.1', 64069]
2023-07-05 17:58:34,891 DEBUG http_protocol 14632 13804 HTTP response chunk for ['127.0.0.1', 64069]
2023-07-05 17:58:34,891 DEBUG http_protocol 14632 13804 HTTP close for ['127.0.0.1', 64069]
2023-07-05 17:58:34,892 DEBUG http_protocol 14632 13804 HTTP response complete for ['127.0.0.1', 64069]
2023-07-05 17:58:34,892 ERROR runserver 14632 13804 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.32, 127.0.0.1:64069][0m
2023-07-05 17:58:50,429 DEBUG http_protocol 14632 13804 HTTP b'POST' request for ['127.0.0.1', 64072]
2023-07-05 17:58:50,741 DEBUG http_protocol 14632 13804 HTTP 200 response started for ['127.0.0.1', 64072]
2023-07-05 17:58:50,741 DEBUG http_protocol 14632 13804 HTTP close for ['127.0.0.1', 64072]
2023-07-05 17:58:50,741 DEBUG http_protocol 14632 13804 HTTP response complete for ['127.0.0.1', 64072]
2023-07-05 17:58:50,742 INFO runserver 14632 13804 [mHTTP POST /api/login/ 200 [0.31, 127.0.0.1:64072][0m
2023-07-05 17:58:50,763 DEBUG http_protocol 14632 13804 HTTP b'GET' request for ['127.0.0.1', 64069]
2023-07-05 17:58:50,766 DEBUG http_protocol 14632 13804 HTTP b'GET' request for ['127.0.0.1', 64072]
2023-07-05 17:58:50,767 DEBUG http_protocol 14632 13804 HTTP b'GET' request for ['127.0.0.1', 64073]
2023-07-05 17:58:50,768 DEBUG http_protocol 14632 13804 HTTP b'GET' request for ['127.0.0.1', 64074]
2023-07-05 17:58:50,854 DEBUG http_protocol 14632 13804 HTTP 200 response started for ['127.0.0.1', 64072]
2023-07-05 17:58:50,854 DEBUG http_protocol 14632 13804 HTTP close for ['127.0.0.1', 64072]
2023-07-05 17:58:50,855 DEBUG http_protocol 14632 13804 HTTP response complete for ['127.0.0.1', 64072]
2023-07-05 17:58:50,855 INFO runserver 14632 13804 [mHTTP GET /api/trading_profile/ 200 [0.09, 127.0.0.1:64072][0m
2023-07-05 17:58:50,857 DEBUG http_protocol 14632 13804 HTTP 200 response started for ['127.0.0.1', 64074]
2023-07-05 17:58:50,858 DEBUG http_protocol 14632 13804 HTTP close for ['127.0.0.1', 64074]
2023-07-05 17:58:50,858 DEBUG http_protocol 14632 13804 HTTP response complete for ['127.0.0.1', 64074]
2023-07-05 17:58:50,858 INFO runserver 14632 13804 [mHTTP GET /api/trading_profile/ 200 [0.09, 127.0.0.1:64074][0m
2023-07-05 17:58:50,903 ERROR log 14632 18368 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 255, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 17:58:50,937 DEBUG http_protocol 14632 13804 HTTP 500 response started for ['127.0.0.1', 64069]
2023-07-05 17:58:50,937 DEBUG http_protocol 14632 13804 HTTP response chunk for ['127.0.0.1', 64069]
2023-07-05 17:58:50,937 DEBUG http_protocol 14632 13804 HTTP response chunk for ['127.0.0.1', 64069]
2023-07-05 17:58:50,937 DEBUG http_protocol 14632 13804 HTTP close for ['127.0.0.1', 64069]
2023-07-05 17:58:50,938 DEBUG http_protocol 14632 13804 HTTP response complete for ['127.0.0.1', 64069]
2023-07-05 17:58:50,934 ERROR log 14632 14988 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 255, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 17:58:50,938 ERROR runserver 14632 13804 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.17, 127.0.0.1:64069][0m
2023-07-05 17:58:50,946 DEBUG http_protocol 14632 13804 HTTP 500 response started for ['127.0.0.1', 64073]
2023-07-05 17:58:50,946 DEBUG http_protocol 14632 13804 HTTP response chunk for ['127.0.0.1', 64073]
2023-07-05 17:58:50,946 DEBUG http_protocol 14632 13804 HTTP response chunk for ['127.0.0.1', 64073]
2023-07-05 17:58:50,946 DEBUG http_protocol 14632 13804 HTTP close for ['127.0.0.1', 64073]
2023-07-05 17:58:50,946 DEBUG http_protocol 14632 13804 HTTP response complete for ['127.0.0.1', 64073]
2023-07-05 17:58:50,946 ERROR runserver 14632 13804 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.18, 127.0.0.1:64073][0m
2023-07-05 17:59:27,140 DEBUG http_protocol 14632 13804 HTTP b'GET' request for ['127.0.0.1', 64072]
2023-07-05 17:59:27,199 DEBUG http_protocol 14632 13804 HTTP 200 response started for ['127.0.0.1', 64072]
2023-07-05 17:59:27,199 DEBUG http_protocol 14632 13804 HTTP close for ['127.0.0.1', 64072]
2023-07-05 17:59:27,199 DEBUG http_protocol 14632 13804 HTTP response complete for ['127.0.0.1', 64072]
2023-07-05 17:59:27,199 INFO runserver 14632 13804 [mHTTP GET /api/trading_profile/ 200 [0.06, 127.0.0.1:64072][0m
2023-07-05 18:02:18,376 DEBUG http_protocol 14632 13804 HTTP b'GET' request for ['127.0.0.1', 64181]
2023-07-05 18:02:18,378 DEBUG http_protocol 14632 13804 HTTP b'GET' request for ['127.0.0.1', 64182]
2023-07-05 18:02:18,437 DEBUG http_protocol 14632 13804 HTTP 200 response started for ['127.0.0.1', 64181]
2023-07-05 18:02:18,438 DEBUG http_protocol 14632 13804 HTTP close for ['127.0.0.1', 64181]
2023-07-05 18:02:18,438 DEBUG http_protocol 14632 13804 HTTP response complete for ['127.0.0.1', 64181]
2023-07-05 18:02:18,439 INFO runserver 14632 13804 [mHTTP GET /api/trading_profile/ 200 [0.06, 127.0.0.1:64181][0m
2023-07-05 18:02:18,442 DEBUG http_protocol 14632 13804 HTTP 200 response started for ['127.0.0.1', 64182]
2023-07-05 18:02:18,443 DEBUG http_protocol 14632 13804 HTTP close for ['127.0.0.1', 64182]
2023-07-05 18:02:18,443 DEBUG http_protocol 14632 13804 HTTP response complete for ['127.0.0.1', 64182]
2023-07-05 18:02:18,443 INFO runserver 14632 13804 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:64182][0m
2023-07-05 18:02:57,227 DEBUG selector_events 20564 1872 Using selector: SelectSelector
2023-07-05 18:02:59,035 DEBUG selector_events 13584 2000 Using selector: SelectSelector
2023-07-05 18:02:59,833 INFO autoreload 13584 2000 Watching for file changes with StatReloader
2023-07-05 18:03:00,251 INFO server 13584 21012 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 18:03:00,251 INFO server 13584 21012 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 18:03:00,252 INFO server 13584 21012 Listening on TCP address 127.0.0.1:8000
2023-07-05 18:03:18,004 DEBUG http_protocol 13584 21012 HTTP b'POST' request for ['127.0.0.1', 64227]
2023-07-05 18:03:18,306 DEBUG http_protocol 13584 21012 HTTP 200 response started for ['127.0.0.1', 64227]
2023-07-05 18:03:18,306 DEBUG http_protocol 13584 21012 HTTP close for ['127.0.0.1', 64227]
2023-07-05 18:03:18,307 DEBUG http_protocol 13584 21012 HTTP response complete for ['127.0.0.1', 64227]
2023-07-05 18:03:18,307 INFO runserver 13584 21012 [mHTTP POST /api/login/ 200 [0.30, 127.0.0.1:64227][0m
2023-07-05 18:03:18,323 DEBUG http_protocol 13584 21012 HTTP b'GET' request for ['127.0.0.1', 64227]
2023-07-05 18:03:18,324 DEBUG http_protocol 13584 21012 HTTP b'GET' request for ['127.0.0.1', 64229]
2023-07-05 18:03:18,515 ERROR log 13584 18208 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 255, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 18:03:18,541 DEBUG http_protocol 13584 21012 HTTP 500 response started for ['127.0.0.1', 64227]
2023-07-05 18:03:18,541 DEBUG http_protocol 13584 21012 HTTP response chunk for ['127.0.0.1', 64227]
2023-07-05 18:03:18,541 DEBUG http_protocol 13584 21012 HTTP response chunk for ['127.0.0.1', 64227]
2023-07-05 18:03:18,542 DEBUG http_protocol 13584 21012 HTTP close for ['127.0.0.1', 64227]
2023-07-05 18:03:18,542 DEBUG http_protocol 13584 21012 HTTP response complete for ['127.0.0.1', 64227]
2023-07-05 18:03:18,522 ERROR log 13584 20232 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 255, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 18:03:18,542 ERROR runserver 13584 21012 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.22, 127.0.0.1:64227][0m
2023-07-05 18:03:18,550 DEBUG http_protocol 13584 21012 HTTP 500 response started for ['127.0.0.1', 64229]
2023-07-05 18:03:18,550 DEBUG http_protocol 13584 21012 HTTP response chunk for ['127.0.0.1', 64229]
2023-07-05 18:03:18,550 DEBUG http_protocol 13584 21012 HTTP response chunk for ['127.0.0.1', 64229]
2023-07-05 18:03:18,551 DEBUG http_protocol 13584 21012 HTTP close for ['127.0.0.1', 64229]
2023-07-05 18:03:18,551 DEBUG http_protocol 13584 21012 HTTP response complete for ['127.0.0.1', 64229]
2023-07-05 18:03:18,551 ERROR runserver 13584 21012 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.23, 127.0.0.1:64229][0m
2023-07-05 18:03:19,016 DEBUG http_protocol 13584 21012 HTTP b'GET' request for ['127.0.0.1', 64227]
2023-07-05 18:03:19,020 DEBUG http_protocol 13584 21012 HTTP b'GET' request for ['127.0.0.1', 64229]
2023-07-05 18:03:19,083 DEBUG http_protocol 13584 21012 HTTP 200 response started for ['127.0.0.1', 64229]
2023-07-05 18:03:19,084 DEBUG http_protocol 13584 21012 HTTP close for ['127.0.0.1', 64229]
2023-07-05 18:03:19,084 DEBUG http_protocol 13584 21012 HTTP response complete for ['127.0.0.1', 64229]
2023-07-05 18:03:19,084 INFO runserver 13584 21012 [mHTTP GET /api/trading_profile/ 200 [0.06, 127.0.0.1:64229][0m
2023-07-05 18:03:19,084 DEBUG http_protocol 13584 21012 HTTP 200 response started for ['127.0.0.1', 64227]
2023-07-05 18:03:19,085 DEBUG http_protocol 13584 21012 HTTP close for ['127.0.0.1', 64227]
2023-07-05 18:03:19,085 DEBUG http_protocol 13584 21012 HTTP response complete for ['127.0.0.1', 64227]
2023-07-05 18:03:19,085 INFO runserver 13584 21012 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:64227][0m
2023-07-05 18:03:22,896 DEBUG http_protocol 13584 21012 HTTP b'GET' request for ['127.0.0.1', 64227]
2023-07-05 18:03:22,897 DEBUG http_protocol 13584 21012 HTTP b'GET' request for ['127.0.0.1', 64229]
2023-07-05 18:03:23,033 ERROR log 13584 20232 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 255, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 18:03:23,050 DEBUG http_protocol 13584 21012 HTTP 500 response started for ['127.0.0.1', 64227]
2023-07-05 18:03:23,051 DEBUG http_protocol 13584 21012 HTTP response chunk for ['127.0.0.1', 64227]
2023-07-05 18:03:23,051 DEBUG http_protocol 13584 21012 HTTP response chunk for ['127.0.0.1', 64227]
2023-07-05 18:03:23,051 DEBUG http_protocol 13584 21012 HTTP close for ['127.0.0.1', 64227]
2023-07-05 18:03:23,051 DEBUG http_protocol 13584 21012 HTTP response complete for ['127.0.0.1', 64227]
2023-07-05 18:03:23,040 ERROR log 13584 18208 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 255, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 18:03:23,051 ERROR runserver 13584 21012 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.15, 127.0.0.1:64227][0m
2023-07-05 18:03:23,059 DEBUG http_protocol 13584 21012 HTTP 500 response started for ['127.0.0.1', 64229]
2023-07-05 18:03:23,059 DEBUG http_protocol 13584 21012 HTTP response chunk for ['127.0.0.1', 64229]
2023-07-05 18:03:23,060 DEBUG http_protocol 13584 21012 HTTP response chunk for ['127.0.0.1', 64229]
2023-07-05 18:03:23,060 DEBUG http_protocol 13584 21012 HTTP close for ['127.0.0.1', 64229]
2023-07-05 18:03:23,060 DEBUG http_protocol 13584 21012 HTTP response complete for ['127.0.0.1', 64229]
2023-07-05 18:03:23,060 ERROR runserver 13584 21012 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.16, 127.0.0.1:64229][0m
2023-07-05 18:07:07,046 DEBUG http_protocol 13584 21012 HTTP b'GET' request for ['127.0.0.1', 64268]
2023-07-05 18:07:07,048 DEBUG http_protocol 13584 21012 HTTP b'GET' request for ['127.0.0.1', 64269]
2023-07-05 18:07:07,106 DEBUG http_protocol 13584 21012 HTTP 200 response started for ['127.0.0.1', 64268]
2023-07-05 18:07:07,106 DEBUG http_protocol 13584 21012 HTTP close for ['127.0.0.1', 64268]
2023-07-05 18:07:07,106 DEBUG http_protocol 13584 21012 HTTP response complete for ['127.0.0.1', 64268]
2023-07-05 18:07:07,107 INFO runserver 13584 21012 [mHTTP GET /api/trading_profile/ 200 [0.06, 127.0.0.1:64268][0m
2023-07-05 18:07:07,111 DEBUG http_protocol 13584 21012 HTTP 200 response started for ['127.0.0.1', 64269]
2023-07-05 18:07:07,111 DEBUG http_protocol 13584 21012 HTTP close for ['127.0.0.1', 64269]
2023-07-05 18:07:07,112 DEBUG http_protocol 13584 21012 HTTP response complete for ['127.0.0.1', 64269]
2023-07-05 18:07:07,112 INFO runserver 13584 21012 [mHTTP GET /api/trading_profile/ 200 [0.06, 127.0.0.1:64269][0m
2023-07-05 18:07:18,406 DEBUG selector_events 4964 10464 Using selector: SelectSelector
2023-07-05 18:07:19,615 DEBUG functional 4964 10464 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-05 18:07:19,616 DEBUG functional 4964 10464 
def place_order_task(*args, **kwds):
    return 1

2023-07-05 18:07:19,616 DEBUG functional 4964 10464 
def close_position_task(*args, **kwds):
    return 1

2023-07-05 18:07:19,617 DEBUG functional 4964 10464 
def chunks(task, it, n):
    return 1

2023-07-05 18:07:19,617 DEBUG functional 4964 10464 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-05 18:07:19,617 DEBUG functional 4964 10464 
def backend_cleanup():
    return 1

2023-07-05 18:07:19,618 DEBUG functional 4964 10464 
def debug_task(self):
    return 1

2023-07-05 18:07:19,618 DEBUG functional 4964 10464 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-05 18:07:19,618 DEBUG functional 4964 10464 
def xmap(task, it):
    return 1

2023-07-05 18:07:19,619 DEBUG functional 4964 10464 
def chain(*args, **kwargs):
    return 1

2023-07-05 18:07:19,619 DEBUG functional 4964 10464 
def xstarmap(task, it):
    return 1

2023-07-05 18:07:19,619 DEBUG functional 4964 10464 
def db_update_task():
    return 1

2023-07-05 18:07:19,620 DEBUG functional 4964 10464 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-05 18:07:25,661 DEBUG http_protocol 13584 21012 HTTP b'OPTIONS' request for ['127.0.0.1', 64268]
2023-07-05 18:07:25,664 DEBUG http_protocol 13584 21012 HTTP 200 response started for ['127.0.0.1', 64268]
2023-07-05 18:07:25,664 DEBUG http_protocol 13584 21012 HTTP close for ['127.0.0.1', 64268]
2023-07-05 18:07:25,664 DEBUG http_protocol 13584 21012 HTTP response complete for ['127.0.0.1', 64268]
2023-07-05 18:07:25,664 INFO runserver 13584 21012 [mHTTP OPTIONS /api/market_buy/ 200 [0.00, 127.0.0.1:64268][0m
2023-07-05 18:07:25,666 DEBUG http_protocol 13584 21012 HTTP b'POST' request for ['127.0.0.1', 64269]
2023-07-05 18:07:25,714 WARNING log 13584 18208 Bad Request: /api/market_buy/
2023-07-05 18:07:25,714 DEBUG http_protocol 13584 21012 HTTP 400 response started for ['127.0.0.1', 64269]
2023-07-05 18:07:25,715 DEBUG http_protocol 13584 21012 HTTP close for ['127.0.0.1', 64269]
2023-07-05 18:07:25,715 DEBUG http_protocol 13584 21012 HTTP response complete for ['127.0.0.1', 64269]
2023-07-05 18:07:25,715 WARNING runserver 13584 21012 [31;1mHTTP POST /api/market_buy/ 400 [0.05, 127.0.0.1:64269][0m
2023-07-05 18:07:42,050 DEBUG http_protocol 13584 21012 HTTP b'POST' request for ['127.0.0.1', 64268]
2023-07-05 18:07:42,100 WARNING log 13584 20232 Bad Request: /api/market_buy/
2023-07-05 18:07:42,101 DEBUG http_protocol 13584 21012 HTTP 400 response started for ['127.0.0.1', 64268]
2023-07-05 18:07:42,102 DEBUG http_protocol 13584 21012 HTTP close for ['127.0.0.1', 64268]
2023-07-05 18:07:42,102 DEBUG http_protocol 13584 21012 HTTP response complete for ['127.0.0.1', 64268]
2023-07-05 18:07:42,102 WARNING runserver 13584 21012 [31;1mHTTP POST /api/market_buy/ 400 [0.05, 127.0.0.1:64268][0m
2023-07-05 18:10:26,670 DEBUG selector_events 14828 10820 Using selector: SelectSelector
2023-07-05 18:10:27,978 DEBUG functional 14828 10820 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-05 18:10:27,979 DEBUG functional 14828 10820 
def place_order_task(*args, **kwds):
    return 1

2023-07-05 18:10:27,979 DEBUG functional 14828 10820 
def close_position_task(*args, **kwds):
    return 1

2023-07-05 18:10:27,979 DEBUG functional 14828 10820 
def chunks(task, it, n):
    return 1

2023-07-05 18:10:27,980 DEBUG functional 14828 10820 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-05 18:10:27,980 DEBUG functional 14828 10820 
def backend_cleanup():
    return 1

2023-07-05 18:10:27,981 DEBUG functional 14828 10820 
def debug_task(self):
    return 1

2023-07-05 18:10:27,981 DEBUG functional 14828 10820 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-05 18:10:27,981 DEBUG functional 14828 10820 
def xmap(task, it):
    return 1

2023-07-05 18:10:27,982 DEBUG functional 14828 10820 
def chain(*args, **kwargs):
    return 1

2023-07-05 18:10:27,982 DEBUG functional 14828 10820 
def xstarmap(task, it):
    return 1

2023-07-05 18:10:27,982 DEBUG functional 14828 10820 
def db_update_task():
    return 1

2023-07-05 18:10:27,983 DEBUG functional 14828 10820 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-05 18:10:30,712 DEBUG http_protocol 13584 21012 HTTP b'POST' request for ['127.0.0.1', 64323]
2023-07-05 18:10:30,761 WARNING log 13584 18208 Bad Request: /api/market_buy/
2023-07-05 18:10:30,762 DEBUG http_protocol 13584 21012 HTTP 400 response started for ['127.0.0.1', 64323]
2023-07-05 18:10:30,762 DEBUG http_protocol 13584 21012 HTTP close for ['127.0.0.1', 64323]
2023-07-05 18:10:30,763 DEBUG http_protocol 13584 21012 HTTP response complete for ['127.0.0.1', 64323]
2023-07-05 18:10:30,763 WARNING runserver 13584 21012 [31;1mHTTP POST /api/market_buy/ 400 [0.05, 127.0.0.1:64323][0m
2023-07-05 18:11:08,803 DEBUG http_protocol 13584 21012 HTTP b'POST' request for ['127.0.0.1', 64323]
2023-07-05 18:11:08,853 WARNING log 13584 20232 Bad Request: /api/market_buy/
2023-07-05 18:11:08,853 DEBUG http_protocol 13584 21012 HTTP 400 response started for ['127.0.0.1', 64323]
2023-07-05 18:11:08,854 DEBUG http_protocol 13584 21012 HTTP close for ['127.0.0.1', 64323]
2023-07-05 18:11:08,854 DEBUG http_protocol 13584 21012 HTTP response complete for ['127.0.0.1', 64323]
2023-07-05 18:11:08,854 WARNING runserver 13584 21012 [31;1mHTTP POST /api/market_buy/ 400 [0.05, 127.0.0.1:64323][0m
2023-07-05 18:13:05,953 DEBUG http_protocol 13584 21012 HTTP b'POST' request for ['127.0.0.1', 64362]
2023-07-05 18:13:06,003 WARNING log 13584 18208 Bad Request: /api/market_buy/
2023-07-05 18:13:06,004 DEBUG http_protocol 13584 21012 HTTP 400 response started for ['127.0.0.1', 64362]
2023-07-05 18:13:06,004 DEBUG http_protocol 13584 21012 HTTP close for ['127.0.0.1', 64362]
2023-07-05 18:13:06,004 DEBUG http_protocol 13584 21012 HTTP response complete for ['127.0.0.1', 64362]
2023-07-05 18:13:06,004 WARNING runserver 13584 21012 [31;1mHTTP POST /api/market_buy/ 400 [0.05, 127.0.0.1:64362][0m
2023-07-05 18:15:17,760 DEBUG http_protocol 13584 21012 HTTP b'POST' request for ['127.0.0.1', 64383]
2023-07-05 18:15:17,810 WARNING log 13584 20232 Bad Request: /api/market_buy/
2023-07-05 18:15:17,811 DEBUG http_protocol 13584 21012 HTTP 400 response started for ['127.0.0.1', 64383]
2023-07-05 18:15:17,811 DEBUG http_protocol 13584 21012 HTTP close for ['127.0.0.1', 64383]
2023-07-05 18:15:17,811 DEBUG http_protocol 13584 21012 HTTP response complete for ['127.0.0.1', 64383]
2023-07-05 18:15:17,811 WARNING runserver 13584 21012 [31;1mHTTP POST /api/market_buy/ 400 [0.05, 127.0.0.1:64383][0m
2023-07-05 18:18:57,837 DEBUG http_protocol 13584 21012 HTTP b'GET' request for ['127.0.0.1', 64405]
2023-07-05 18:18:57,901 DEBUG http_protocol 13584 21012 HTTP 200 response started for ['127.0.0.1', 64405]
2023-07-05 18:18:57,902 DEBUG http_protocol 13584 21012 HTTP close for ['127.0.0.1', 64405]
2023-07-05 18:18:57,902 DEBUG http_protocol 13584 21012 HTTP response complete for ['127.0.0.1', 64405]
2023-07-05 18:18:57,902 INFO runserver 13584 21012 [mHTTP GET /api/trading_profile/ 200 [0.06, 127.0.0.1:64405][0m
2023-07-05 18:19:01,106 DEBUG http_protocol 13584 21012 HTTP b'GET' request for ['127.0.0.1', 64405]
2023-07-05 18:19:01,108 DEBUG http_protocol 13584 21012 HTTP b'GET' request for ['127.0.0.1', 64408]
2023-07-05 18:19:01,227 ERROR log 13584 18208 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 255, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 18:19:01,256 DEBUG http_protocol 13584 21012 HTTP 500 response started for ['127.0.0.1', 64405]
2023-07-05 18:19:01,257 DEBUG http_protocol 13584 21012 HTTP response chunk for ['127.0.0.1', 64405]
2023-07-05 18:19:01,257 DEBUG http_protocol 13584 21012 HTTP response chunk for ['127.0.0.1', 64405]
2023-07-05 18:19:01,257 DEBUG http_protocol 13584 21012 HTTP close for ['127.0.0.1', 64405]
2023-07-05 18:19:01,258 DEBUG http_protocol 13584 21012 HTTP response complete for ['127.0.0.1', 64405]
2023-07-05 18:19:01,254 ERROR log 13584 20232 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 255, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 18:19:01,258 ERROR runserver 13584 21012 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.15, 127.0.0.1:64405][0m
2023-07-05 18:19:01,266 DEBUG http_protocol 13584 21012 HTTP 500 response started for ['127.0.0.1', 64408]
2023-07-05 18:19:01,267 DEBUG http_protocol 13584 21012 HTTP response chunk for ['127.0.0.1', 64408]
2023-07-05 18:19:01,267 DEBUG http_protocol 13584 21012 HTTP response chunk for ['127.0.0.1', 64408]
2023-07-05 18:19:01,267 DEBUG http_protocol 13584 21012 HTTP close for ['127.0.0.1', 64408]
2023-07-05 18:19:01,267 DEBUG http_protocol 13584 21012 HTTP response complete for ['127.0.0.1', 64408]
2023-07-05 18:19:01,267 ERROR runserver 13584 21012 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.16, 127.0.0.1:64408][0m
2023-07-05 18:20:29,848 DEBUG selector_events 23104 720 Using selector: SelectSelector
2023-07-05 18:20:31,650 DEBUG selector_events 16620 10860 Using selector: SelectSelector
2023-07-05 18:20:32,470 INFO autoreload 16620 10860 Watching for file changes with StatReloader
2023-07-05 18:20:32,914 INFO server 16620 19384 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 18:20:32,915 INFO server 16620 19384 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 18:20:32,915 INFO server 16620 19384 Listening on TCP address 127.0.0.1:8000
2023-07-05 18:20:46,823 DEBUG http_protocol 16620 19384 HTTP b'GET' request for ['127.0.0.1', 64485]
2023-07-05 18:20:46,957 DEBUG core 16620 18600 Successfully imported extension module "markdown.extensions.toc".
2023-07-05 18:20:46,957 DEBUG core 16620 18600 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-05 18:20:46,980 DEBUG http_protocol 16620 19384 HTTP 200 response started for ['127.0.0.1', 64485]
2023-07-05 18:20:46,980 DEBUG http_protocol 16620 19384 HTTP close for ['127.0.0.1', 64485]
2023-07-05 18:20:46,981 DEBUG http_protocol 16620 19384 HTTP response complete for ['127.0.0.1', 64485]
2023-07-05 18:20:46,981 INFO runserver 16620 19384 [mHTTP GET /api/open_positions/ 200 [0.16, 127.0.0.1:64485][0m
2023-07-05 18:20:47,790 DEBUG http_protocol 16620 19384 HTTP b'GET' request for ['127.0.0.1', 64485]
2023-07-05 18:20:47,839 DEBUG core 16620 22608 Successfully imported extension module "markdown.extensions.toc".
2023-07-05 18:20:47,839 DEBUG core 16620 22608 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-05 18:20:47,844 DEBUG http_protocol 16620 19384 HTTP 200 response started for ['127.0.0.1', 64485]
2023-07-05 18:20:47,844 DEBUG http_protocol 16620 19384 HTTP close for ['127.0.0.1', 64485]
2023-07-05 18:20:47,844 DEBUG http_protocol 16620 19384 HTTP response complete for ['127.0.0.1', 64485]
2023-07-05 18:20:47,844 INFO runserver 16620 19384 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:64485][0m
2023-07-05 18:20:48,232 DEBUG http_protocol 16620 19384 HTTP b'GET' request for ['127.0.0.1', 64485]
2023-07-05 18:20:48,302 DEBUG core 16620 8440 Successfully imported extension module "markdown.extensions.toc".
2023-07-05 18:20:48,303 DEBUG core 16620 8440 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-05 18:20:48,310 DEBUG http_protocol 16620 19384 HTTP 200 response started for ['127.0.0.1', 64485]
2023-07-05 18:20:48,311 DEBUG http_protocol 16620 19384 HTTP close for ['127.0.0.1', 64485]
2023-07-05 18:20:48,311 DEBUG http_protocol 16620 19384 HTTP response complete for ['127.0.0.1', 64485]
2023-07-05 18:20:48,312 INFO runserver 16620 19384 [mHTTP GET /api/open_positions/ 200 [0.08, 127.0.0.1:64485][0m
2023-07-05 18:20:50,584 DEBUG http_protocol 16620 19384 HTTP b'GET' request for ['127.0.0.1', 64485]
2023-07-05 18:20:50,636 DEBUG core 16620 13900 Successfully imported extension module "markdown.extensions.toc".
2023-07-05 18:20:50,636 DEBUG core 16620 13900 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-05 18:20:50,643 DEBUG http_protocol 16620 19384 HTTP 200 response started for ['127.0.0.1', 64485]
2023-07-05 18:20:50,643 DEBUG http_protocol 16620 19384 HTTP close for ['127.0.0.1', 64485]
2023-07-05 18:20:50,643 DEBUG http_protocol 16620 19384 HTTP response complete for ['127.0.0.1', 64485]
2023-07-05 18:20:50,643 INFO runserver 16620 19384 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:64485][0m
2023-07-05 18:20:54,939 DEBUG http_protocol 16620 19384 HTTP b'POST' request for ['127.0.0.1', 64500]
2023-07-05 18:20:55,251 DEBUG http_protocol 16620 19384 HTTP 200 response started for ['127.0.0.1', 64500]
2023-07-05 18:20:55,251 DEBUG http_protocol 16620 19384 HTTP close for ['127.0.0.1', 64500]
2023-07-05 18:20:55,251 DEBUG http_protocol 16620 19384 HTTP response complete for ['127.0.0.1', 64500]
2023-07-05 18:20:55,251 INFO runserver 16620 19384 [mHTTP POST /api/login/ 200 [0.31, 127.0.0.1:64500][0m
2023-07-05 18:20:55,267 DEBUG http_protocol 16620 19384 HTTP b'GET' request for ['127.0.0.1', 64500]
2023-07-05 18:20:55,269 DEBUG http_protocol 16620 19384 HTTP b'GET' request for ['127.0.0.1', 64502]
2023-07-05 18:20:55,435 ERROR log 16620 17660 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 255, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 18:20:55,470 DEBUG http_protocol 16620 19384 HTTP 500 response started for ['127.0.0.1', 64500]
2023-07-05 18:20:55,471 DEBUG http_protocol 16620 19384 HTTP response chunk for ['127.0.0.1', 64500]
2023-07-05 18:20:55,471 DEBUG http_protocol 16620 19384 HTTP response chunk for ['127.0.0.1', 64500]
2023-07-05 18:20:55,471 DEBUG http_protocol 16620 19384 HTTP close for ['127.0.0.1', 64500]
2023-07-05 18:20:55,471 DEBUG http_protocol 16620 19384 HTTP response complete for ['127.0.0.1', 64500]
2023-07-05 18:20:55,458 ERROR log 16620 10820 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 255, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 18:20:55,471 ERROR runserver 16620 19384 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.20, 127.0.0.1:64500][0m
2023-07-05 18:20:55,479 DEBUG http_protocol 16620 19384 HTTP 500 response started for ['127.0.0.1', 64502]
2023-07-05 18:20:55,479 DEBUG http_protocol 16620 19384 HTTP response chunk for ['127.0.0.1', 64502]
2023-07-05 18:20:55,479 DEBUG http_protocol 16620 19384 HTTP response chunk for ['127.0.0.1', 64502]
2023-07-05 18:20:55,479 DEBUG http_protocol 16620 19384 HTTP close for ['127.0.0.1', 64502]
2023-07-05 18:20:55,479 DEBUG http_protocol 16620 19384 HTTP response complete for ['127.0.0.1', 64502]
2023-07-05 18:20:55,479 ERROR runserver 16620 19384 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.21, 127.0.0.1:64502][0m
2023-07-05 18:21:38,760 DEBUG http_protocol 16620 19384 HTTP b'POST' request for ['127.0.0.1', 64500]
2023-07-05 18:21:39,059 DEBUG http_protocol 16620 19384 HTTP 200 response started for ['127.0.0.1', 64500]
2023-07-05 18:21:39,060 DEBUG http_protocol 16620 19384 HTTP close for ['127.0.0.1', 64500]
2023-07-05 18:21:39,060 DEBUG http_protocol 16620 19384 HTTP response complete for ['127.0.0.1', 64500]
2023-07-05 18:21:39,060 INFO runserver 16620 19384 [mHTTP POST /api/login/ 200 [0.30, 127.0.0.1:64500][0m
2023-07-05 18:21:39,079 DEBUG http_protocol 16620 19384 HTTP b'GET' request for ['127.0.0.1', 64502]
2023-07-05 18:21:39,080 DEBUG http_protocol 16620 19384 HTTP b'GET' request for ['127.0.0.1', 64500]
2023-07-05 18:21:39,202 ERROR log 16620 10820 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 255, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 18:21:39,234 DEBUG http_protocol 16620 19384 HTTP 500 response started for ['127.0.0.1', 64502]
2023-07-05 18:21:39,234 DEBUG http_protocol 16620 19384 HTTP response chunk for ['127.0.0.1', 64502]
2023-07-05 18:21:39,234 DEBUG http_protocol 16620 19384 HTTP response chunk for ['127.0.0.1', 64502]
2023-07-05 18:21:39,234 DEBUG http_protocol 16620 19384 HTTP close for ['127.0.0.1', 64502]
2023-07-05 18:21:39,234 DEBUG http_protocol 16620 19384 HTTP response complete for ['127.0.0.1', 64502]
2023-07-05 18:21:39,224 ERROR log 16620 17660 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 255, in get
    best_trade = ClosedPositions.objects.filter(user_profile=user_profile).order_by('-profit_or_loss').first()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1383, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg, summarize)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1193, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1681, in names_to_path
    raise FieldError(
django.core.exceptions.FieldError: Cannot resolve keyword 'user_profile' into field. Choices are: close_price, close_time, direction, fund_cost, id, leverage, open_price, open_time, profit_or_loss, quantity, stop_loss, symbol, trading_profile, trading_profile_id
2023-07-05 18:21:39,234 ERROR runserver 16620 19384 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.15, 127.0.0.1:64502][0m
2023-07-05 18:21:39,243 DEBUG http_protocol 16620 19384 HTTP 500 response started for ['127.0.0.1', 64500]
2023-07-05 18:21:39,243 DEBUG http_protocol 16620 19384 HTTP response chunk for ['127.0.0.1', 64500]
2023-07-05 18:21:39,243 DEBUG http_protocol 16620 19384 HTTP response chunk for ['127.0.0.1', 64500]
2023-07-05 18:21:39,243 DEBUG http_protocol 16620 19384 HTTP close for ['127.0.0.1', 64500]
2023-07-05 18:21:39,243 DEBUG http_protocol 16620 19384 HTTP response complete for ['127.0.0.1', 64500]
2023-07-05 18:21:39,243 ERROR runserver 16620 19384 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.16, 127.0.0.1:64500][0m
2023-07-05 18:22:20,848 DEBUG http_protocol 16620 19384 HTTP b'GET' request for ['127.0.0.1', 64647]
2023-07-05 18:22:20,866 WARNING log 16620 10820 Not Found: /api/trading_profiles/
2023-07-05 18:22:20,867 DEBUG http_protocol 16620 19384 HTTP 404 response started for ['127.0.0.1', 64647]
2023-07-05 18:22:20,867 DEBUG http_protocol 16620 19384 HTTP close for ['127.0.0.1', 64647]
2023-07-05 18:22:20,867 DEBUG http_protocol 16620 19384 HTTP response complete for ['127.0.0.1', 64647]
2023-07-05 18:22:20,867 WARNING runserver 16620 19384 [33mHTTP GET /api/trading_profiles/ 404 [0.02, 127.0.0.1:64647][0m
2023-07-05 18:22:20,901 DEBUG http_protocol 16620 19384 HTTP b'GET' request for ['127.0.0.1', 64647]
2023-07-05 18:22:20,903 DEBUG http_protocol 16620 19384 HTTP disconnect for ['127.0.0.1', 64647]
2023-07-05 18:22:20,914 WARNING log 16620 10820 Not Found: /favicon.ico
2023-07-05 18:22:24,777 DEBUG http_protocol 16620 19384 HTTP b'GET' request for ['127.0.0.1', 64649]
2023-07-05 18:22:24,865 ERROR log 16620 17660 Internal Server Error: /api/trading_profile/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\fields\__init__.py", line 2055, in get_prep_value
    return int(value)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\contrib\auth\models.py", line 437, in __int__
    raise TypeError(
TypeError: Cannot cast AnonymousUser to int. Are you trying to use it in place of User?

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 230, in get
    user_profile = UserProfile.objects.get(user=request.user)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 623, in get
    clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1448, in build_filter
    condition = self.build_lookup(lookups, col, value)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1275, in build_lookup
    lookup = lookup_class(lhs, rhs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\lookups.py", line 27, in __init__
    self.rhs = self.get_prep_lookup()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\fields\related_lookups.py", line 166, in get_prep_lookup
    self.rhs = target_field.get_prep_value(self.rhs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\fields\__init__.py", line 2057, in get_prep_value
    raise e.__class__(
TypeError: Field 'id' expected a number but got <django.contrib.auth.models.AnonymousUser object at 0x000002039CDE9990>.
2023-07-05 18:22:24,878 DEBUG http_protocol 16620 19384 HTTP 500 response started for ['127.0.0.1', 64649]
2023-07-05 18:22:24,878 DEBUG http_protocol 16620 19384 HTTP response chunk for ['127.0.0.1', 64649]
2023-07-05 18:22:24,878 DEBUG http_protocol 16620 19384 HTTP response chunk for ['127.0.0.1', 64649]
2023-07-05 18:22:24,878 DEBUG http_protocol 16620 19384 HTTP close for ['127.0.0.1', 64649]
2023-07-05 18:22:24,878 DEBUG http_protocol 16620 19384 HTTP response complete for ['127.0.0.1', 64649]
2023-07-05 18:22:24,878 ERROR runserver 16620 19384 [35;1mHTTP GET /api/trading_profile/ 500 [0.10, 127.0.0.1:64649][0m
2023-07-05 18:22:24,922 DEBUG http_protocol 16620 19384 HTTP b'GET' request for ['127.0.0.1', 64649]
2023-07-05 18:22:24,923 DEBUG http_protocol 16620 19384 HTTP disconnect for ['127.0.0.1', 64649]
2023-07-05 18:22:24,933 WARNING log 16620 10820 Not Found: /favicon.ico
2023-07-05 18:33:53,541 DEBUG selector_events 21228 2312 Using selector: SelectSelector
2023-07-05 18:33:55,255 DEBUG selector_events 15260 20012 Using selector: SelectSelector
2023-07-05 18:33:56,069 INFO autoreload 15260 20012 Watching for file changes with StatReloader
2023-07-05 18:33:56,501 INFO server 15260 21572 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 18:33:56,502 INFO server 15260 21572 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 18:33:56,502 INFO server 15260 21572 Listening on TCP address 127.0.0.1:8000
2023-07-05 18:34:12,123 DEBUG http_protocol 15260 21572 HTTP b'POST' request for ['127.0.0.1', 64761]
2023-07-05 18:34:12,424 DEBUG http_protocol 15260 21572 HTTP 200 response started for ['127.0.0.1', 64761]
2023-07-05 18:34:12,425 DEBUG http_protocol 15260 21572 HTTP close for ['127.0.0.1', 64761]
2023-07-05 18:34:12,425 DEBUG http_protocol 15260 21572 HTTP response complete for ['127.0.0.1', 64761]
2023-07-05 18:34:12,425 INFO runserver 15260 21572 [mHTTP POST /api/login/ 200 [0.30, 127.0.0.1:64761][0m
2023-07-05 18:34:12,441 DEBUG http_protocol 15260 21572 HTTP b'GET' request for ['127.0.0.1', 64761]
2023-07-05 18:34:12,442 DEBUG http_protocol 15260 21572 HTTP b'GET' request for ['127.0.0.1', 64763]
2023-07-05 18:34:12,506 DEBUG http_protocol 15260 21572 HTTP 200 response started for ['127.0.0.1', 64761]
2023-07-05 18:34:12,506 DEBUG http_protocol 15260 21572 HTTP close for ['127.0.0.1', 64761]
2023-07-05 18:34:12,506 DEBUG http_protocol 15260 21572 HTTP response complete for ['127.0.0.1', 64761]
2023-07-05 18:34:12,507 INFO runserver 15260 21572 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:64761][0m
2023-07-05 18:34:12,508 DEBUG http_protocol 15260 21572 HTTP 200 response started for ['127.0.0.1', 64763]
2023-07-05 18:34:12,508 DEBUG http_protocol 15260 21572 HTTP close for ['127.0.0.1', 64763]
2023-07-05 18:34:12,508 DEBUG http_protocol 15260 21572 HTTP response complete for ['127.0.0.1', 64763]
2023-07-05 18:34:12,508 INFO runserver 15260 21572 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:64763][0m
2023-07-05 18:35:19,479 DEBUG selector_events 1428 4388 Using selector: SelectSelector
2023-07-05 18:35:21,161 DEBUG selector_events 5388 4196 Using selector: SelectSelector
2023-07-05 18:35:21,955 INFO autoreload 5388 4196 Watching for file changes with StatReloader
2023-07-05 18:35:22,373 INFO server 5388 11624 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 18:35:22,373 INFO server 5388 11624 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 18:35:22,374 INFO server 5388 11624 Listening on TCP address 127.0.0.1:8000
2023-07-05 18:35:25,324 DEBUG http_protocol 5388 11624 HTTP b'GET' request for ['127.0.0.1', 64828]
2023-07-05 18:35:25,351 WARNING log 5388 10916 Not Found: /
2023-07-05 18:35:25,352 DEBUG http_protocol 5388 11624 HTTP 404 response started for ['127.0.0.1', 64828]
2023-07-05 18:35:25,352 DEBUG http_protocol 5388 11624 HTTP close for ['127.0.0.1', 64828]
2023-07-05 18:35:25,353 DEBUG http_protocol 5388 11624 HTTP response complete for ['127.0.0.1', 64828]
2023-07-05 18:35:25,353 WARNING runserver 5388 11624 [33mHTTP GET / 404 [0.03, 127.0.0.1:64828][0m
2023-07-05 18:35:25,406 DEBUG http_protocol 5388 11624 HTTP b'GET' request for ['127.0.0.1', 64828]
2023-07-05 18:35:25,408 DEBUG http_protocol 5388 11624 HTTP disconnect for ['127.0.0.1', 64828]
2023-07-05 18:35:25,421 WARNING log 5388 10916 Not Found: /favicon.ico
2023-07-05 18:35:40,036 DEBUG http_protocol 5388 11624 HTTP b'GET' request for ['127.0.0.1', 64830]
2023-07-05 18:35:40,142 ERROR log 5388 10916 Internal Server Error: /api/trading_profile/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\fields\__init__.py", line 2055, in get_prep_value
    return int(value)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\contrib\auth\models.py", line 437, in __int__
    raise TypeError(
TypeError: Cannot cast AnonymousUser to int. Are you trying to use it in place of User?

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 230, in get
    user_profile = UserProfile.objects.get(user=request.user)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 623, in get
    clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1448, in build_filter
    condition = self.build_lookup(lookups, col, value)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1275, in build_lookup
    lookup = lookup_class(lhs, rhs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\lookups.py", line 27, in __init__
    self.rhs = self.get_prep_lookup()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\fields\related_lookups.py", line 166, in get_prep_lookup
    self.rhs = target_field.get_prep_value(self.rhs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\fields\__init__.py", line 2057, in get_prep_value
    raise e.__class__(
TypeError: Field 'id' expected a number but got <django.contrib.auth.models.AnonymousUser object at 0x0000026DE2F9D270>.
2023-07-05 18:35:40,157 DEBUG http_protocol 5388 11624 HTTP 500 response started for ['127.0.0.1', 64830]
2023-07-05 18:35:40,158 DEBUG http_protocol 5388 11624 HTTP response chunk for ['127.0.0.1', 64830]
2023-07-05 18:35:40,158 DEBUG http_protocol 5388 11624 HTTP response chunk for ['127.0.0.1', 64830]
2023-07-05 18:35:40,158 DEBUG http_protocol 5388 11624 HTTP close for ['127.0.0.1', 64830]
2023-07-05 18:35:40,159 DEBUG http_protocol 5388 11624 HTTP response complete for ['127.0.0.1', 64830]
2023-07-05 18:35:40,159 ERROR runserver 5388 11624 [35;1mHTTP GET /api/trading_profile/ 500 [0.12, 127.0.0.1:64830][0m
2023-07-05 18:35:40,210 DEBUG http_protocol 5388 11624 HTTP b'GET' request for ['127.0.0.1', 64830]
2023-07-05 18:35:40,211 DEBUG http_protocol 5388 11624 HTTP disconnect for ['127.0.0.1', 64830]
2023-07-05 18:35:40,220 WARNING log 5388 10916 Not Found: /favicon.ico
2023-07-05 18:37:37,550 DEBUG http_protocol 5388 11624 HTTP b'GET' request for ['127.0.0.1', 64847]
2023-07-05 18:37:37,608 ERROR log 5388 10916 Internal Server Error: /api/profile_dashboard/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\fields\__init__.py", line 2055, in get_prep_value
    return int(value)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\contrib\auth\models.py", line 437, in __int__
    raise TypeError(
TypeError: Cannot cast AnonymousUser to int. Are you trying to use it in place of User?

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 251, in get
    user_profile = UserProfile.objects.get(user=request.user)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 623, in get
    clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1436, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1454, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\query.py", line 1461, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1502, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1533, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1448, in build_filter
    condition = self.build_lookup(lookups, col, value)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\sql\query.py", line 1275, in build_lookup
    lookup = lookup_class(lhs, rhs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\lookups.py", line 27, in __init__
    self.rhs = self.get_prep_lookup()
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\fields\related_lookups.py", line 166, in get_prep_lookup
    self.rhs = target_field.get_prep_value(self.rhs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\db\models\fields\__init__.py", line 2057, in get_prep_value
    raise e.__class__(
TypeError: Field 'id' expected a number but got <django.contrib.auth.models.AnonymousUser object at 0x0000026DE30D0190>.
2023-07-05 18:37:37,618 DEBUG http_protocol 5388 11624 HTTP 500 response started for ['127.0.0.1', 64847]
2023-07-05 18:37:37,618 DEBUG http_protocol 5388 11624 HTTP response chunk for ['127.0.0.1', 64847]
2023-07-05 18:37:37,619 DEBUG http_protocol 5388 11624 HTTP response chunk for ['127.0.0.1', 64847]
2023-07-05 18:37:37,619 DEBUG http_protocol 5388 11624 HTTP close for ['127.0.0.1', 64847]
2023-07-05 18:37:37,619 DEBUG http_protocol 5388 11624 HTTP response complete for ['127.0.0.1', 64847]
2023-07-05 18:37:37,619 ERROR runserver 5388 11624 [35;1mHTTP GET /api/profile_dashboard/ 500 [0.07, 127.0.0.1:64847][0m
2023-07-05 18:37:37,666 DEBUG http_protocol 5388 11624 HTTP b'GET' request for ['127.0.0.1', 64847]
2023-07-05 18:37:37,667 DEBUG http_protocol 5388 11624 HTTP disconnect for ['127.0.0.1', 64847]
2023-07-05 18:37:37,676 WARNING log 5388 10916 Not Found: /favicon.ico
2023-07-05 18:37:53,014 DEBUG selector_events 3700 8268 Using selector: SelectSelector
2023-07-05 18:37:54,754 DEBUG selector_events 7656 10904 Using selector: SelectSelector
2023-07-05 18:37:55,556 INFO autoreload 7656 10904 Watching for file changes with StatReloader
2023-07-05 18:37:55,985 INFO server 7656 16100 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 18:37:55,985 INFO server 7656 16100 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 18:37:55,986 INFO server 7656 16100 Listening on TCP address 127.0.0.1:8000
2023-07-05 18:38:10,915 DEBUG http_protocol 7656 16100 HTTP b'POST' request for ['127.0.0.1', 64869]
2023-07-05 18:38:11,327 DEBUG http_protocol 7656 16100 HTTP 200 response started for ['127.0.0.1', 64869]
2023-07-05 18:38:11,328 DEBUG http_protocol 7656 16100 HTTP close for ['127.0.0.1', 64869]
2023-07-05 18:38:11,328 DEBUG http_protocol 7656 16100 HTTP response complete for ['127.0.0.1', 64869]
2023-07-05 18:38:11,328 INFO runserver 7656 16100 [mHTTP POST /api/login/ 200 [0.41, 127.0.0.1:64869][0m
2023-07-05 18:38:11,345 DEBUG http_protocol 7656 16100 HTTP b'GET' request for ['127.0.0.1', 64869]
2023-07-05 18:38:11,405 DEBUG http_protocol 7656 16100 HTTP 200 response started for ['127.0.0.1', 64869]
2023-07-05 18:38:11,405 DEBUG http_protocol 7656 16100 HTTP close for ['127.0.0.1', 64869]
2023-07-05 18:38:11,405 DEBUG http_protocol 7656 16100 HTTP response complete for ['127.0.0.1', 64869]
2023-07-05 18:38:11,405 INFO runserver 7656 16100 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:64869][0m
2023-07-05 18:38:11,407 DEBUG http_protocol 7656 16100 HTTP b'GET' request for ['127.0.0.1', 64869]
2023-07-05 18:38:11,469 DEBUG http_protocol 7656 16100 HTTP 200 response started for ['127.0.0.1', 64869]
2023-07-05 18:38:11,469 DEBUG http_protocol 7656 16100 HTTP close for ['127.0.0.1', 64869]
2023-07-05 18:38:11,469 DEBUG http_protocol 7656 16100 HTTP response complete for ['127.0.0.1', 64869]
2023-07-05 18:38:11,469 INFO runserver 7656 16100 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:64869][0m
2023-07-05 20:06:28,423 DEBUG selector_events 9692 19116 Using selector: SelectSelector
2023-07-05 20:06:30,230 DEBUG selector_events 7392 19556 Using selector: SelectSelector
2023-07-05 20:06:31,088 INFO autoreload 7392 19556 Watching for file changes with StatReloader
2023-07-05 20:06:31,545 INFO server 7392 8788 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 20:06:31,545 INFO server 7392 8788 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 20:06:31,546 INFO server 7392 8788 Listening on TCP address 127.0.0.1:8000
2023-07-05 20:06:49,853 DEBUG http_protocol 7392 8788 HTTP b'OPTIONS' request for ['127.0.0.1', 60846]
2023-07-05 20:06:49,857 DEBUG http_protocol 7392 8788 HTTP 200 response started for ['127.0.0.1', 60846]
2023-07-05 20:06:49,857 DEBUG http_protocol 7392 8788 HTTP close for ['127.0.0.1', 60846]
2023-07-05 20:06:49,857 DEBUG http_protocol 7392 8788 HTTP response complete for ['127.0.0.1', 60846]
2023-07-05 20:06:49,857 INFO runserver 7392 8788 [mHTTP OPTIONS /api/login/ 200 [0.00, 127.0.0.1:60846][0m
2023-07-05 20:06:49,901 DEBUG http_protocol 7392 8788 HTTP b'POST' request for ['127.0.0.1', 60846]
2023-07-05 20:06:50,203 DEBUG http_protocol 7392 8788 HTTP 200 response started for ['127.0.0.1', 60846]
2023-07-05 20:06:50,203 DEBUG http_protocol 7392 8788 HTTP close for ['127.0.0.1', 60846]
2023-07-05 20:06:50,204 DEBUG http_protocol 7392 8788 HTTP response complete for ['127.0.0.1', 60846]
2023-07-05 20:06:50,204 INFO runserver 7392 8788 [mHTTP POST /api/login/ 200 [0.30, 127.0.0.1:60846][0m
2023-07-05 20:06:50,276 DEBUG http_protocol 7392 8788 HTTP b'OPTIONS' request for ['127.0.0.1', 60846]
2023-07-05 20:06:50,277 DEBUG http_protocol 7392 8788 HTTP b'OPTIONS' request for ['127.0.0.1', 60848]
2023-07-05 20:06:50,281 DEBUG http_protocol 7392 8788 HTTP 200 response started for ['127.0.0.1', 60846]
2023-07-05 20:06:50,281 DEBUG http_protocol 7392 8788 HTTP close for ['127.0.0.1', 60846]
2023-07-05 20:06:50,282 DEBUG http_protocol 7392 8788 HTTP response complete for ['127.0.0.1', 60846]
2023-07-05 20:06:50,282 INFO runserver 7392 8788 [mHTTP OPTIONS /api/profile_dashboard/ 200 [0.01, 127.0.0.1:60846][0m
2023-07-05 20:06:50,283 DEBUG http_protocol 7392 8788 HTTP 200 response started for ['127.0.0.1', 60848]
2023-07-05 20:06:50,283 DEBUG http_protocol 7392 8788 HTTP close for ['127.0.0.1', 60848]
2023-07-05 20:06:50,283 DEBUG http_protocol 7392 8788 HTTP response complete for ['127.0.0.1', 60848]
2023-07-05 20:06:50,284 INFO runserver 7392 8788 [mHTTP OPTIONS /api/profile_dashboard/ 200 [0.01, 127.0.0.1:60848][0m
2023-07-05 20:06:50,326 DEBUG http_protocol 7392 8788 HTTP b'GET' request for ['127.0.0.1', 60846]
2023-07-05 20:06:50,327 DEBUG http_protocol 7392 8788 HTTP b'GET' request for ['127.0.0.1', 60848]
2023-07-05 20:06:50,392 DEBUG http_protocol 7392 8788 HTTP 200 response started for ['127.0.0.1', 60846]
2023-07-05 20:06:50,392 DEBUG http_protocol 7392 8788 HTTP close for ['127.0.0.1', 60846]
2023-07-05 20:06:50,393 DEBUG http_protocol 7392 8788 HTTP response complete for ['127.0.0.1', 60846]
2023-07-05 20:06:50,393 INFO runserver 7392 8788 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:60846][0m
2023-07-05 20:06:50,394 DEBUG http_protocol 7392 8788 HTTP 200 response started for ['127.0.0.1', 60848]
2023-07-05 20:06:50,394 DEBUG http_protocol 7392 8788 HTTP close for ['127.0.0.1', 60848]
2023-07-05 20:06:50,394 DEBUG http_protocol 7392 8788 HTTP response complete for ['127.0.0.1', 60848]
2023-07-05 20:06:50,394 INFO runserver 7392 8788 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:60848][0m
2023-07-05 20:12:30,973 DEBUG http_protocol 7392 8788 HTTP b'POST' request for ['127.0.0.1', 60972]
2023-07-05 20:12:31,267 DEBUG http_protocol 7392 8788 HTTP 200 response started for ['127.0.0.1', 60972]
2023-07-05 20:12:31,268 DEBUG http_protocol 7392 8788 HTTP close for ['127.0.0.1', 60972]
2023-07-05 20:12:31,268 DEBUG http_protocol 7392 8788 HTTP response complete for ['127.0.0.1', 60972]
2023-07-05 20:12:31,268 INFO runserver 7392 8788 [mHTTP POST /api/login/ 200 [0.29, 127.0.0.1:60972][0m
2023-07-05 20:12:31,285 DEBUG http_protocol 7392 8788 HTTP b'GET' request for ['127.0.0.1', 60972]
2023-07-05 20:12:31,344 DEBUG http_protocol 7392 8788 HTTP 200 response started for ['127.0.0.1', 60972]
2023-07-05 20:12:31,344 DEBUG http_protocol 7392 8788 HTTP close for ['127.0.0.1', 60972]
2023-07-05 20:12:31,345 DEBUG http_protocol 7392 8788 HTTP response complete for ['127.0.0.1', 60972]
2023-07-05 20:12:31,345 INFO runserver 7392 8788 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:60972][0m
2023-07-05 20:12:31,347 DEBUG http_protocol 7392 8788 HTTP b'GET' request for ['127.0.0.1', 60972]
2023-07-05 20:12:31,408 DEBUG http_protocol 7392 8788 HTTP 200 response started for ['127.0.0.1', 60972]
2023-07-05 20:12:31,408 DEBUG http_protocol 7392 8788 HTTP close for ['127.0.0.1', 60972]
2023-07-05 20:12:31,408 DEBUG http_protocol 7392 8788 HTTP response complete for ['127.0.0.1', 60972]
2023-07-05 20:12:31,408 INFO runserver 7392 8788 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:60972][0m
2023-07-05 20:13:14,936 DEBUG http_protocol 7392 8788 HTTP b'POST' request for ['127.0.0.1', 60972]
2023-07-05 20:13:15,260 DEBUG http_protocol 7392 8788 HTTP 200 response started for ['127.0.0.1', 60972]
2023-07-05 20:13:15,260 DEBUG http_protocol 7392 8788 HTTP close for ['127.0.0.1', 60972]
2023-07-05 20:13:15,260 DEBUG http_protocol 7392 8788 HTTP response complete for ['127.0.0.1', 60972]
2023-07-05 20:13:15,260 INFO runserver 7392 8788 [mHTTP POST /api/login/ 200 [0.32, 127.0.0.1:60972][0m
2023-07-05 20:13:15,277 DEBUG http_protocol 7392 8788 HTTP b'GET' request for ['127.0.0.1', 60972]
2023-07-05 20:13:15,334 DEBUG http_protocol 7392 8788 HTTP 200 response started for ['127.0.0.1', 60972]
2023-07-05 20:13:15,334 DEBUG http_protocol 7392 8788 HTTP close for ['127.0.0.1', 60972]
2023-07-05 20:13:15,334 DEBUG http_protocol 7392 8788 HTTP response complete for ['127.0.0.1', 60972]
2023-07-05 20:13:15,334 INFO runserver 7392 8788 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:60972][0m
2023-07-05 20:13:15,336 DEBUG http_protocol 7392 8788 HTTP b'GET' request for ['127.0.0.1', 60972]
2023-07-05 20:13:15,397 DEBUG http_protocol 7392 8788 HTTP 200 response started for ['127.0.0.1', 60972]
2023-07-05 20:13:15,397 DEBUG http_protocol 7392 8788 HTTP close for ['127.0.0.1', 60972]
2023-07-05 20:13:15,397 DEBUG http_protocol 7392 8788 HTTP response complete for ['127.0.0.1', 60972]
2023-07-05 20:13:15,397 INFO runserver 7392 8788 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:60972][0m
2023-07-05 20:16:02,305 DEBUG http_protocol 7392 8788 HTTP b'POST' request for ['127.0.0.1', 61191]
2023-07-05 20:16:02,601 DEBUG http_protocol 7392 8788 HTTP 200 response started for ['127.0.0.1', 61191]
2023-07-05 20:16:02,601 DEBUG http_protocol 7392 8788 HTTP close for ['127.0.0.1', 61191]
2023-07-05 20:16:02,602 DEBUG http_protocol 7392 8788 HTTP response complete for ['127.0.0.1', 61191]
2023-07-05 20:16:02,602 INFO runserver 7392 8788 [mHTTP POST /api/login/ 200 [0.30, 127.0.0.1:61191][0m
2023-07-05 20:16:02,620 DEBUG http_protocol 7392 8788 HTTP b'GET' request for ['127.0.0.1', 61191]
2023-07-05 20:16:02,675 DEBUG http_protocol 7392 8788 HTTP 200 response started for ['127.0.0.1', 61191]
2023-07-05 20:16:02,675 DEBUG http_protocol 7392 8788 HTTP close for ['127.0.0.1', 61191]
2023-07-05 20:16:02,675 DEBUG http_protocol 7392 8788 HTTP response complete for ['127.0.0.1', 61191]
2023-07-05 20:16:02,675 INFO runserver 7392 8788 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:61191][0m
2023-07-05 20:16:02,677 DEBUG http_protocol 7392 8788 HTTP b'GET' request for ['127.0.0.1', 61191]
2023-07-05 20:16:02,735 DEBUG http_protocol 7392 8788 HTTP 200 response started for ['127.0.0.1', 61191]
2023-07-05 20:16:02,735 DEBUG http_protocol 7392 8788 HTTP close for ['127.0.0.1', 61191]
2023-07-05 20:16:02,735 DEBUG http_protocol 7392 8788 HTTP response complete for ['127.0.0.1', 61191]
2023-07-05 20:16:02,735 INFO runserver 7392 8788 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:61191][0m
2023-07-05 20:25:44,547 DEBUG http_protocol 7392 8788 HTTP b'POST' request for ['127.0.0.1', 61407]
2023-07-05 20:25:44,841 DEBUG http_protocol 7392 8788 HTTP 200 response started for ['127.0.0.1', 61407]
2023-07-05 20:25:44,841 DEBUG http_protocol 7392 8788 HTTP close for ['127.0.0.1', 61407]
2023-07-05 20:25:44,841 DEBUG http_protocol 7392 8788 HTTP response complete for ['127.0.0.1', 61407]
2023-07-05 20:25:44,841 INFO runserver 7392 8788 [mHTTP POST /api/login/ 200 [0.29, 127.0.0.1:61407][0m
2023-07-05 20:25:55,039 DEBUG http_protocol 7392 8788 HTTP b'POST' request for ['127.0.0.1', 61407]
2023-07-05 20:25:55,336 DEBUG http_protocol 7392 8788 HTTP 200 response started for ['127.0.0.1', 61407]
2023-07-05 20:25:55,336 DEBUG http_protocol 7392 8788 HTTP close for ['127.0.0.1', 61407]
2023-07-05 20:25:55,336 DEBUG http_protocol 7392 8788 HTTP response complete for ['127.0.0.1', 61407]
2023-07-05 20:25:55,336 INFO runserver 7392 8788 [mHTTP POST /api/login/ 200 [0.30, 127.0.0.1:61407][0m
2023-07-05 20:51:00,256 DEBUG selector_events 7440 12552 Using selector: SelectSelector
2023-07-05 20:51:01,977 DEBUG selector_events 15272 13556 Using selector: SelectSelector
2023-07-05 20:51:02,772 INFO autoreload 15272 13556 Watching for file changes with StatReloader
2023-07-05 20:51:03,200 INFO server 15272 7580 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 20:51:03,200 INFO server 15272 7580 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 20:51:03,200 INFO server 15272 7580 Listening on TCP address 127.0.0.1:8000
2023-07-05 20:51:28,329 DEBUG http_protocol 15272 7580 HTTP b'POST' request for ['127.0.0.1', 61625]
2023-07-05 20:51:28,627 DEBUG http_protocol 15272 7580 HTTP 200 response started for ['127.0.0.1', 61625]
2023-07-05 20:51:28,627 DEBUG http_protocol 15272 7580 HTTP close for ['127.0.0.1', 61625]
2023-07-05 20:51:28,628 DEBUG http_protocol 15272 7580 HTTP response complete for ['127.0.0.1', 61625]
2023-07-05 20:51:28,628 INFO runserver 15272 7580 [mHTTP POST /api/login/ 200 [0.30, 127.0.0.1:61625][0m
2023-07-05 20:54:21,023 DEBUG http_protocol 15272 7580 HTTP b'GET' request for ['127.0.0.1', 61672]
2023-07-05 20:54:21,029 DEBUG http_protocol 15272 7580 HTTP b'GET' request for ['127.0.0.1', 61673]
2023-07-05 20:54:21,113 DEBUG http_protocol 15272 7580 HTTP 200 response started for ['127.0.0.1', 61672]
2023-07-05 20:54:21,113 DEBUG http_protocol 15272 7580 HTTP close for ['127.0.0.1', 61672]
2023-07-05 20:54:21,114 DEBUG http_protocol 15272 7580 HTTP response complete for ['127.0.0.1', 61672]
2023-07-05 20:54:21,114 INFO runserver 15272 7580 [mHTTP GET /api/profile_dashboard/ 200 [0.09, 127.0.0.1:61672][0m
2023-07-05 20:54:21,120 DEBUG http_protocol 15272 7580 HTTP 200 response started for ['127.0.0.1', 61673]
2023-07-05 20:54:21,120 DEBUG http_protocol 15272 7580 HTTP close for ['127.0.0.1', 61673]
2023-07-05 20:54:21,121 DEBUG http_protocol 15272 7580 HTTP response complete for ['127.0.0.1', 61673]
2023-07-05 20:54:21,121 INFO runserver 15272 7580 [mHTTP GET /api/profile_dashboard/ 200 [0.09, 127.0.0.1:61673][0m
2023-07-05 20:54:48,731 DEBUG selector_events 17716 1852 Using selector: SelectSelector
2023-07-05 20:54:50,553 DEBUG selector_events 12492 13708 Using selector: SelectSelector
2023-07-05 20:54:51,354 INFO autoreload 12492 13708 Watching for file changes with StatReloader
2023-07-05 20:54:51,780 INFO server 12492 11908 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 20:54:51,780 INFO server 12492 11908 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 20:54:51,781 INFO server 12492 11908 Listening on TCP address 127.0.0.1:8000
2023-07-05 20:55:15,339 DEBUG http_protocol 12492 11908 HTTP b'POST' request for ['127.0.0.1', 61732]
2023-07-05 20:55:15,641 DEBUG http_protocol 12492 11908 HTTP 200 response started for ['127.0.0.1', 61732]
2023-07-05 20:55:15,641 DEBUG http_protocol 12492 11908 HTTP close for ['127.0.0.1', 61732]
2023-07-05 20:55:15,641 DEBUG http_protocol 12492 11908 HTTP response complete for ['127.0.0.1', 61732]
2023-07-05 20:55:15,641 INFO runserver 12492 11908 [mHTTP POST /api/login/ 200 [0.30, 127.0.0.1:61732][0m
2023-07-05 20:55:15,656 DEBUG http_protocol 12492 11908 HTTP b'GET' request for ['127.0.0.1', 61732]
2023-07-05 20:55:15,716 DEBUG http_protocol 12492 11908 HTTP 200 response started for ['127.0.0.1', 61732]
2023-07-05 20:55:15,717 DEBUG http_protocol 12492 11908 HTTP close for ['127.0.0.1', 61732]
2023-07-05 20:55:15,717 DEBUG http_protocol 12492 11908 HTTP response complete for ['127.0.0.1', 61732]
2023-07-05 20:55:15,717 INFO runserver 12492 11908 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:61732][0m
2023-07-05 20:55:15,719 DEBUG http_protocol 12492 11908 HTTP b'GET' request for ['127.0.0.1', 61732]
2023-07-05 20:55:15,778 DEBUG http_protocol 12492 11908 HTTP 200 response started for ['127.0.0.1', 61732]
2023-07-05 20:55:15,778 DEBUG http_protocol 12492 11908 HTTP close for ['127.0.0.1', 61732]
2023-07-05 20:55:15,778 DEBUG http_protocol 12492 11908 HTTP response complete for ['127.0.0.1', 61732]
2023-07-05 20:55:15,778 INFO runserver 12492 11908 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:61732][0m
2023-07-05 20:57:15,409 DEBUG http_protocol 12492 11908 HTTP b'OPTIONS' request for ['127.0.0.1', 61765]
2023-07-05 20:57:15,412 DEBUG http_protocol 12492 11908 HTTP 200 response started for ['127.0.0.1', 61765]
2023-07-05 20:57:15,412 DEBUG http_protocol 12492 11908 HTTP close for ['127.0.0.1', 61765]
2023-07-05 20:57:15,412 DEBUG http_protocol 12492 11908 HTTP response complete for ['127.0.0.1', 61765]
2023-07-05 20:57:15,412 INFO runserver 12492 11908 [mHTTP OPTIONS /api/trading_profile/ 200 [0.00, 127.0.0.1:61765][0m
2023-07-05 20:57:15,416 DEBUG http_protocol 12492 11908 HTTP b'GET' request for ['127.0.0.1', 61765]
2023-07-05 20:57:15,473 DEBUG http_protocol 12492 11908 HTTP 200 response started for ['127.0.0.1', 61765]
2023-07-05 20:57:15,474 DEBUG http_protocol 12492 11908 HTTP close for ['127.0.0.1', 61765]
2023-07-05 20:57:15,474 DEBUG http_protocol 12492 11908 HTTP response complete for ['127.0.0.1', 61765]
2023-07-05 20:57:15,474 INFO runserver 12492 11908 [mHTTP GET /api/trading_profile/ 200 [0.06, 127.0.0.1:61765][0m
2023-07-05 20:57:15,478 DEBUG http_protocol 12492 11908 HTTP b'GET' request for ['127.0.0.1', 61765]
2023-07-05 20:57:15,544 DEBUG http_protocol 12492 11908 HTTP 200 response started for ['127.0.0.1', 61765]
2023-07-05 20:57:15,544 DEBUG http_protocol 12492 11908 HTTP close for ['127.0.0.1', 61765]
2023-07-05 20:57:15,545 DEBUG http_protocol 12492 11908 HTTP response complete for ['127.0.0.1', 61765]
2023-07-05 20:57:15,545 INFO runserver 12492 11908 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:61765][0m
2023-07-05 20:57:29,379 DEBUG http_protocol 12492 11908 HTTP b'OPTIONS' request for ['127.0.0.1', 61765]
2023-07-05 20:57:29,382 DEBUG http_protocol 12492 11908 HTTP 200 response started for ['127.0.0.1', 61765]
2023-07-05 20:57:29,382 DEBUG http_protocol 12492 11908 HTTP close for ['127.0.0.1', 61765]
2023-07-05 20:57:29,382 DEBUG http_protocol 12492 11908 HTTP response complete for ['127.0.0.1', 61765]
2023-07-05 20:57:29,383 INFO runserver 12492 11908 [mHTTP OPTIONS /api/market_buy/ 200 [0.00, 127.0.0.1:61765][0m
2023-07-05 20:57:29,385 DEBUG http_protocol 12492 11908 HTTP b'POST' request for ['127.0.0.1', 61765]
2023-07-05 20:57:29,432 WARNING log 12492 9640 Bad Request: /api/market_buy/
2023-07-05 20:57:29,433 DEBUG http_protocol 12492 11908 HTTP 400 response started for ['127.0.0.1', 61765]
2023-07-05 20:57:29,433 DEBUG http_protocol 12492 11908 HTTP close for ['127.0.0.1', 61765]
2023-07-05 20:57:29,433 DEBUG http_protocol 12492 11908 HTTP response complete for ['127.0.0.1', 61765]
2023-07-05 20:57:29,433 WARNING runserver 12492 11908 [31;1mHTTP POST /api/market_buy/ 400 [0.05, 127.0.0.1:61765][0m
2023-07-05 20:59:33,120 DEBUG selector_events 20904 5608 Using selector: SelectSelector
2023-07-05 20:59:34,281 DEBUG functional 20904 5608 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-05 20:59:34,282 DEBUG functional 20904 5608 
def place_order_task(*args, **kwds):
    return 1

2023-07-05 20:59:34,282 DEBUG functional 20904 5608 
def close_position_task(*args, **kwds):
    return 1

2023-07-05 20:59:34,282 DEBUG functional 20904 5608 
def chunks(task, it, n):
    return 1

2023-07-05 20:59:34,283 DEBUG functional 20904 5608 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-05 20:59:34,283 DEBUG functional 20904 5608 
def backend_cleanup():
    return 1

2023-07-05 20:59:34,284 DEBUG functional 20904 5608 
def debug_task(self):
    return 1

2023-07-05 20:59:34,284 DEBUG functional 20904 5608 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-05 20:59:34,284 DEBUG functional 20904 5608 
def xmap(task, it):
    return 1

2023-07-05 20:59:34,285 DEBUG functional 20904 5608 
def chain(*args, **kwargs):
    return 1

2023-07-05 20:59:34,285 DEBUG functional 20904 5608 
def xstarmap(task, it):
    return 1

2023-07-05 20:59:34,285 DEBUG functional 20904 5608 
def db_update_task():
    return 1

2023-07-05 20:59:34,286 DEBUG functional 20904 5608 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-05 20:59:40,101 DEBUG http_protocol 12492 11908 HTTP b'POST' request for ['127.0.0.1', 62040]
2023-07-05 20:59:40,151 WARNING log 12492 9640 Bad Request: /api/market_buy/
2023-07-05 20:59:40,151 DEBUG http_protocol 12492 11908 HTTP 400 response started for ['127.0.0.1', 62040]
2023-07-05 20:59:40,152 DEBUG http_protocol 12492 11908 HTTP close for ['127.0.0.1', 62040]
2023-07-05 20:59:40,152 DEBUG http_protocol 12492 11908 HTTP response complete for ['127.0.0.1', 62040]
2023-07-05 20:59:40,152 WARNING runserver 12492 11908 [31;1mHTTP POST /api/market_buy/ 400 [0.05, 127.0.0.1:62040][0m
2023-07-05 21:16:01,652 DEBUG selector_events 23108 9256 Using selector: SelectSelector
2023-07-05 21:16:03,442 DEBUG selector_events 9996 22400 Using selector: SelectSelector
2023-07-05 21:16:04,251 INFO autoreload 9996 22400 Watching for file changes with StatReloader
2023-07-05 21:16:04,703 INFO server 9996 18412 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 21:16:04,703 INFO server 9996 18412 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 21:16:04,704 INFO server 9996 18412 Listening on TCP address 127.0.0.1:8000
2023-07-05 21:16:22,269 DEBUG http_protocol 9996 18412 HTTP b'POST' request for ['127.0.0.1', 62147]
2023-07-05 21:16:22,573 DEBUG http_protocol 9996 18412 HTTP 200 response started for ['127.0.0.1', 62147]
2023-07-05 21:16:22,573 DEBUG http_protocol 9996 18412 HTTP close for ['127.0.0.1', 62147]
2023-07-05 21:16:22,573 DEBUG http_protocol 9996 18412 HTTP response complete for ['127.0.0.1', 62147]
2023-07-05 21:16:22,573 INFO runserver 9996 18412 [mHTTP POST /api/login/ 200 [0.30, 127.0.0.1:62147][0m
2023-07-05 21:16:22,594 DEBUG http_protocol 9996 18412 HTTP b'GET' request for ['127.0.0.1', 62147]
2023-07-05 21:16:22,651 DEBUG http_protocol 9996 18412 HTTP 200 response started for ['127.0.0.1', 62147]
2023-07-05 21:16:22,651 DEBUG http_protocol 9996 18412 HTTP close for ['127.0.0.1', 62147]
2023-07-05 21:16:22,651 DEBUG http_protocol 9996 18412 HTTP response complete for ['127.0.0.1', 62147]
2023-07-05 21:16:22,651 INFO runserver 9996 18412 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:62147][0m
2023-07-05 21:16:22,654 DEBUG http_protocol 9996 18412 HTTP b'GET' request for ['127.0.0.1', 62147]
2023-07-05 21:16:22,712 DEBUG http_protocol 9996 18412 HTTP 200 response started for ['127.0.0.1', 62147]
2023-07-05 21:16:22,712 DEBUG http_protocol 9996 18412 HTTP close for ['127.0.0.1', 62147]
2023-07-05 21:16:22,713 DEBUG http_protocol 9996 18412 HTTP response complete for ['127.0.0.1', 62147]
2023-07-05 21:16:22,713 INFO runserver 9996 18412 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:62147][0m
2023-07-05 21:16:23,320 DEBUG http_protocol 9996 18412 HTTP b'GET' request for ['127.0.0.1', 62147]
2023-07-05 21:16:23,324 DEBUG http_protocol 9996 18412 HTTP b'GET' request for ['127.0.0.1', 62151]
2023-07-05 21:16:23,387 DEBUG http_protocol 9996 18412 HTTP 200 response started for ['127.0.0.1', 62147]
2023-07-05 21:16:23,388 DEBUG http_protocol 9996 18412 HTTP close for ['127.0.0.1', 62147]
2023-07-05 21:16:23,388 DEBUG http_protocol 9996 18412 HTTP response complete for ['127.0.0.1', 62147]
2023-07-05 21:16:23,388 INFO runserver 9996 18412 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:62147][0m
2023-07-05 21:16:23,391 DEBUG http_protocol 9996 18412 HTTP 200 response started for ['127.0.0.1', 62151]
2023-07-05 21:16:23,391 DEBUG http_protocol 9996 18412 HTTP close for ['127.0.0.1', 62151]
2023-07-05 21:16:23,392 DEBUG http_protocol 9996 18412 HTTP response complete for ['127.0.0.1', 62151]
2023-07-05 21:16:23,392 INFO runserver 9996 18412 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:62151][0m
2023-07-05 21:16:59,014 DEBUG selector_events 8804 5000 Using selector: SelectSelector
2023-07-05 21:17:00,255 DEBUG functional 8804 5000 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-05 21:17:00,256 DEBUG functional 8804 5000 
def place_order_task(*args, **kwds):
    return 1

2023-07-05 21:17:00,256 DEBUG functional 8804 5000 
def close_position_task(*args, **kwds):
    return 1

2023-07-05 21:17:00,256 DEBUG functional 8804 5000 
def chunks(task, it, n):
    return 1

2023-07-05 21:17:00,257 DEBUG functional 8804 5000 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-05 21:17:00,257 DEBUG functional 8804 5000 
def backend_cleanup():
    return 1

2023-07-05 21:17:00,258 DEBUG functional 8804 5000 
def debug_task(self):
    return 1

2023-07-05 21:17:00,258 DEBUG functional 8804 5000 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-05 21:17:00,258 DEBUG functional 8804 5000 
def xmap(task, it):
    return 1

2023-07-05 21:17:00,259 DEBUG functional 8804 5000 
def chain(*args, **kwargs):
    return 1

2023-07-05 21:17:00,259 DEBUG functional 8804 5000 
def xstarmap(task, it):
    return 1

2023-07-05 21:17:00,260 DEBUG functional 8804 5000 
def db_update_task():
    return 1

2023-07-05 21:17:00,260 DEBUG functional 8804 5000 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-05 21:17:07,969 DEBUG http_protocol 9996 18412 HTTP b'POST' request for ['127.0.0.1', 62147]
2023-07-05 21:17:08,018 WARNING log 9996 20116 Bad Request: /api/market_buy/
2023-07-05 21:17:08,019 DEBUG http_protocol 9996 18412 HTTP 400 response started for ['127.0.0.1', 62147]
2023-07-05 21:17:08,019 DEBUG http_protocol 9996 18412 HTTP close for ['127.0.0.1', 62147]
2023-07-05 21:17:08,019 DEBUG http_protocol 9996 18412 HTTP response complete for ['127.0.0.1', 62147]
2023-07-05 21:17:08,020 WARNING runserver 9996 18412 [31;1mHTTP POST /api/market_buy/ 400 [0.05, 127.0.0.1:62147][0m
2023-07-05 21:18:17,543 DEBUG http_protocol 9996 18412 HTTP b'POST' request for ['127.0.0.1', 62192]
2023-07-05 21:18:17,593 WARNING log 9996 20116 Bad Request: /api/market_buy/
2023-07-05 21:18:17,593 DEBUG http_protocol 9996 18412 HTTP 400 response started for ['127.0.0.1', 62192]
2023-07-05 21:18:17,593 DEBUG http_protocol 9996 18412 HTTP close for ['127.0.0.1', 62192]
2023-07-05 21:18:17,594 DEBUG http_protocol 9996 18412 HTTP response complete for ['127.0.0.1', 62192]
2023-07-05 21:18:17,594 WARNING runserver 9996 18412 [31;1mHTTP POST /api/market_buy/ 400 [0.05, 127.0.0.1:62192][0m
2023-07-05 21:18:33,254 DEBUG http_protocol 9996 18412 HTTP b'POST' request for ['127.0.0.1', 62192]
2023-07-05 21:18:33,307 WARNING log 9996 20116 Bad Request: /api/market_buy/
2023-07-05 21:18:33,308 DEBUG http_protocol 9996 18412 HTTP 400 response started for ['127.0.0.1', 62192]
2023-07-05 21:18:33,308 DEBUG http_protocol 9996 18412 HTTP close for ['127.0.0.1', 62192]
2023-07-05 21:18:33,308 DEBUG http_protocol 9996 18412 HTTP response complete for ['127.0.0.1', 62192]
2023-07-05 21:18:33,308 WARNING runserver 9996 18412 [31;1mHTTP POST /api/market_buy/ 400 [0.05, 127.0.0.1:62192][0m
2023-07-05 21:19:12,003 DEBUG http_protocol 9996 18412 HTTP b'POST' request for ['127.0.0.1', 62192]
2023-07-05 21:19:12,057 WARNING log 9996 20116 Bad Request: /api/market_buy/
2023-07-05 21:19:12,058 DEBUG http_protocol 9996 18412 HTTP 400 response started for ['127.0.0.1', 62192]
2023-07-05 21:19:12,058 DEBUG http_protocol 9996 18412 HTTP close for ['127.0.0.1', 62192]
2023-07-05 21:19:12,058 DEBUG http_protocol 9996 18412 HTTP response complete for ['127.0.0.1', 62192]
2023-07-05 21:19:12,058 WARNING runserver 9996 18412 [31;1mHTTP POST /api/market_buy/ 400 [0.06, 127.0.0.1:62192][0m
2023-07-05 21:24:13,099 DEBUG http_protocol 9996 18412 HTTP b'POST' request for ['127.0.0.1', 62256]
2023-07-05 21:24:13,249 WARNING log 9996 20116 Bad Request: /api/market_buy/
2023-07-05 21:24:13,250 DEBUG http_protocol 9996 18412 HTTP 400 response started for ['127.0.0.1', 62256]
2023-07-05 21:24:13,250 DEBUG http_protocol 9996 18412 HTTP close for ['127.0.0.1', 62256]
2023-07-05 21:24:13,250 DEBUG http_protocol 9996 18412 HTTP response complete for ['127.0.0.1', 62256]
2023-07-05 21:24:13,250 WARNING runserver 9996 18412 [31;1mHTTP POST /api/market_buy/ 400 [0.15, 127.0.0.1:62256][0m
2023-07-05 21:25:08,970 DEBUG http_protocol 9996 18412 HTTP b'POST' request for ['127.0.0.1', 62256]
2023-07-05 21:25:09,019 WARNING log 9996 20116 Bad Request: /api/market_buy/
2023-07-05 21:25:09,019 DEBUG http_protocol 9996 18412 HTTP 400 response started for ['127.0.0.1', 62256]
2023-07-05 21:25:09,019 DEBUG http_protocol 9996 18412 HTTP close for ['127.0.0.1', 62256]
2023-07-05 21:25:09,020 DEBUG http_protocol 9996 18412 HTTP response complete for ['127.0.0.1', 62256]
2023-07-05 21:25:09,020 WARNING runserver 9996 18412 [31;1mHTTP POST /api/market_buy/ 400 [0.05, 127.0.0.1:62256][0m
2023-07-05 21:26:14,164 DEBUG http_protocol 9996 18412 HTTP b'GET' request for ['127.0.0.1', 62319]
2023-07-05 21:26:14,179 DEBUG http_protocol 9996 18412 HTTP b'GET' request for ['127.0.0.1', 62321]
2023-07-05 21:26:14,235 DEBUG http_protocol 9996 18412 HTTP 200 response started for ['127.0.0.1', 62319]
2023-07-05 21:26:14,235 DEBUG http_protocol 9996 18412 HTTP close for ['127.0.0.1', 62319]
2023-07-05 21:26:14,235 DEBUG http_protocol 9996 18412 HTTP response complete for ['127.0.0.1', 62319]
2023-07-05 21:26:14,235 INFO runserver 9996 18412 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:62319][0m
2023-07-05 21:26:14,252 DEBUG http_protocol 9996 18412 HTTP 200 response started for ['127.0.0.1', 62321]
2023-07-05 21:26:14,252 DEBUG http_protocol 9996 18412 HTTP close for ['127.0.0.1', 62321]
2023-07-05 21:26:14,253 DEBUG http_protocol 9996 18412 HTTP response complete for ['127.0.0.1', 62321]
2023-07-05 21:26:14,253 INFO runserver 9996 18412 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:62321][0m
2023-07-05 21:26:59,044 DEBUG http_protocol 9996 18412 HTTP b'GET' request for ['127.0.0.1', 62319]
2023-07-05 21:26:59,105 DEBUG http_protocol 9996 18412 HTTP 200 response started for ['127.0.0.1', 62319]
2023-07-05 21:26:59,106 DEBUG http_protocol 9996 18412 HTTP close for ['127.0.0.1', 62319]
2023-07-05 21:26:59,106 DEBUG http_protocol 9996 18412 HTTP response complete for ['127.0.0.1', 62319]
2023-07-05 21:26:59,106 INFO runserver 9996 18412 [mHTTP GET /api/trading_profile/ 200 [0.06, 127.0.0.1:62319][0m
2023-07-05 21:28:18,668 DEBUG http_protocol 9996 18412 HTTP b'POST' request for ['127.0.0.1', 62340]
2023-07-05 21:28:18,718 WARNING log 9996 20116 Bad Request: /api/market_buy/
2023-07-05 21:28:18,719 DEBUG http_protocol 9996 18412 HTTP 400 response started for ['127.0.0.1', 62340]
2023-07-05 21:28:18,719 DEBUG http_protocol 9996 18412 HTTP close for ['127.0.0.1', 62340]
2023-07-05 21:28:18,719 DEBUG http_protocol 9996 18412 HTTP response complete for ['127.0.0.1', 62340]
2023-07-05 21:28:18,719 WARNING runserver 9996 18412 [31;1mHTTP POST /api/market_buy/ 400 [0.05, 127.0.0.1:62340][0m
2023-07-05 21:29:45,156 DEBUG http_protocol 9996 18412 HTTP b'GET' request for ['127.0.0.1', 62360]
2023-07-05 21:29:45,223 DEBUG http_protocol 9996 18412 HTTP 200 response started for ['127.0.0.1', 62360]
2023-07-05 21:29:45,223 DEBUG http_protocol 9996 18412 HTTP close for ['127.0.0.1', 62360]
2023-07-05 21:29:45,223 DEBUG http_protocol 9996 18412 HTTP response complete for ['127.0.0.1', 62360]
2023-07-05 21:29:45,223 INFO runserver 9996 18412 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:62360][0m
2023-07-05 21:30:00,387 DEBUG http_protocol 9996 18412 HTTP b'GET' request for ['127.0.0.1', 62360]
2023-07-05 21:30:00,445 DEBUG http_protocol 9996 18412 HTTP 200 response started for ['127.0.0.1', 62360]
2023-07-05 21:30:00,445 DEBUG http_protocol 9996 18412 HTTP close for ['127.0.0.1', 62360]
2023-07-05 21:30:00,446 DEBUG http_protocol 9996 18412 HTTP response complete for ['127.0.0.1', 62360]
2023-07-05 21:30:00,446 INFO runserver 9996 18412 [mHTTP GET /api/trading_profile/ 200 [0.06, 127.0.0.1:62360][0m
2023-07-05 21:38:21,068 DEBUG http_protocol 9996 18412 HTTP b'POST' request for ['127.0.0.1', 62481]
2023-07-05 21:38:21,129 WARNING log 9996 20116 Bad Request: /api/market_buy/
2023-07-05 21:38:21,129 DEBUG http_protocol 9996 18412 HTTP 400 response started for ['127.0.0.1', 62481]
2023-07-05 21:38:21,130 DEBUG http_protocol 9996 18412 HTTP close for ['127.0.0.1', 62481]
2023-07-05 21:38:21,130 DEBUG http_protocol 9996 18412 HTTP response complete for ['127.0.0.1', 62481]
2023-07-05 21:38:21,130 WARNING runserver 9996 18412 [31;1mHTTP POST /api/market_buy/ 400 [0.06, 127.0.0.1:62481][0m
2023-07-05 21:54:25,965 DEBUG selector_events 12700 17764 Using selector: SelectSelector
2023-07-05 21:54:27,691 DEBUG selector_events 4468 22708 Using selector: SelectSelector
2023-07-05 21:54:28,514 INFO autoreload 4468 22708 Watching for file changes with StatReloader
2023-07-05 21:54:28,965 INFO server 4468 16424 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 21:54:28,965 INFO server 4468 16424 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 21:54:28,966 INFO server 4468 16424 Listening on TCP address 127.0.0.1:8000
2023-07-05 21:55:15,563 DEBUG selector_events 20892 18532 Using selector: SelectSelector
2023-07-05 21:55:16,797 DEBUG functional 20892 18532 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-05 21:55:16,797 DEBUG functional 20892 18532 
def place_order_task(*args, **kwds):
    return 1

2023-07-05 21:55:16,797 DEBUG functional 20892 18532 
def close_position_task(*args, **kwds):
    return 1

2023-07-05 21:55:16,798 DEBUG functional 20892 18532 
def chunks(task, it, n):
    return 1

2023-07-05 21:55:16,798 DEBUG functional 20892 18532 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-05 21:55:16,799 DEBUG functional 20892 18532 
def backend_cleanup():
    return 1

2023-07-05 21:55:16,799 DEBUG functional 20892 18532 
def debug_task(self):
    return 1

2023-07-05 21:55:16,799 DEBUG functional 20892 18532 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-05 21:55:16,800 DEBUG functional 20892 18532 
def xmap(task, it):
    return 1

2023-07-05 21:55:16,800 DEBUG functional 20892 18532 
def chain(*args, **kwargs):
    return 1

2023-07-05 21:55:16,800 DEBUG functional 20892 18532 
def xstarmap(task, it):
    return 1

2023-07-05 21:55:16,801 DEBUG functional 20892 18532 
def db_update_task():
    return 1

2023-07-05 21:55:16,801 DEBUG functional 20892 18532 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-05 21:55:20,212 DEBUG http_protocol 4468 16424 HTTP b'POST' request for ['127.0.0.1', 62682]
2023-07-05 21:55:20,505 DEBUG http_protocol 4468 16424 HTTP 200 response started for ['127.0.0.1', 62682]
2023-07-05 21:55:20,505 DEBUG http_protocol 4468 16424 HTTP close for ['127.0.0.1', 62682]
2023-07-05 21:55:20,506 DEBUG http_protocol 4468 16424 HTTP response complete for ['127.0.0.1', 62682]
2023-07-05 21:55:20,506 INFO runserver 4468 16424 [mHTTP POST /api/login/ 200 [0.29, 127.0.0.1:62682][0m
2023-07-05 21:55:20,524 DEBUG http_protocol 4468 16424 HTTP b'GET' request for ['127.0.0.1', 62682]
2023-07-05 21:55:20,582 DEBUG http_protocol 4468 16424 HTTP 200 response started for ['127.0.0.1', 62682]
2023-07-05 21:55:20,583 DEBUG http_protocol 4468 16424 HTTP close for ['127.0.0.1', 62682]
2023-07-05 21:55:20,583 DEBUG http_protocol 4468 16424 HTTP response complete for ['127.0.0.1', 62682]
2023-07-05 21:55:20,583 INFO runserver 4468 16424 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:62682][0m
2023-07-05 21:55:20,585 DEBUG http_protocol 4468 16424 HTTP b'GET' request for ['127.0.0.1', 62682]
2023-07-05 21:55:20,647 DEBUG http_protocol 4468 16424 HTTP 200 response started for ['127.0.0.1', 62682]
2023-07-05 21:55:20,648 DEBUG http_protocol 4468 16424 HTTP close for ['127.0.0.1', 62682]
2023-07-05 21:55:20,648 DEBUG http_protocol 4468 16424 HTTP response complete for ['127.0.0.1', 62682]
2023-07-05 21:55:20,648 INFO runserver 4468 16424 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:62682][0m
2023-07-05 21:55:21,583 DEBUG http_protocol 4468 16424 HTTP b'GET' request for ['127.0.0.1', 62682]
2023-07-05 21:55:21,587 DEBUG http_protocol 4468 16424 HTTP b'GET' request for ['127.0.0.1', 62686]
2023-07-05 21:55:21,651 DEBUG http_protocol 4468 16424 HTTP 200 response started for ['127.0.0.1', 62682]
2023-07-05 21:55:21,651 DEBUG http_protocol 4468 16424 HTTP close for ['127.0.0.1', 62682]
2023-07-05 21:55:21,652 DEBUG http_protocol 4468 16424 HTTP response complete for ['127.0.0.1', 62682]
2023-07-05 21:55:21,652 INFO runserver 4468 16424 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:62682][0m
2023-07-05 21:55:21,653 DEBUG http_protocol 4468 16424 HTTP 200 response started for ['127.0.0.1', 62686]
2023-07-05 21:55:21,653 DEBUG http_protocol 4468 16424 HTTP close for ['127.0.0.1', 62686]
2023-07-05 21:55:21,653 DEBUG http_protocol 4468 16424 HTTP response complete for ['127.0.0.1', 62686]
2023-07-05 21:55:21,653 INFO runserver 4468 16424 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:62686][0m
2023-07-05 21:56:10,791 DEBUG http_protocol 4468 16424 HTTP b'POST' request for ['127.0.0.1', 62682]
2023-07-05 21:56:10,851 DEBUG functional 4468 22460 
def xstarmap(task, it):
    return 1

2023-07-05 21:56:10,852 DEBUG functional 4468 22460 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-05 21:56:10,853 DEBUG functional 4468 22460 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-05 21:56:10,853 DEBUG functional 4468 22460 
def db_update_task():
    return 1

2023-07-05 21:56:10,853 DEBUG functional 4468 22460 
def chunks(task, it, n):
    return 1

2023-07-05 21:56:10,854 DEBUG functional 4468 22460 
def debug_task(self):
    return 1

2023-07-05 21:56:10,854 DEBUG functional 4468 22460 
def close_position_task(*args, **kwds):
    return 1

2023-07-05 21:56:10,854 DEBUG functional 4468 22460 
def place_order_task(*args, **kwds):
    return 1

2023-07-05 21:56:10,855 DEBUG functional 4468 22460 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-05 21:56:10,855 DEBUG functional 4468 22460 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-05 21:56:10,855 DEBUG functional 4468 22460 
def xmap(task, it):
    return 1

2023-07-05 21:56:10,856 DEBUG functional 4468 22460 
def backend_cleanup():
    return 1

2023-07-05 21:56:10,856 DEBUG functional 4468 22460 
def chain(*args, **kwargs):
    return 1

2023-07-05 21:56:11,011 DEBUG http_protocol 4468 16424 HTTP 200 response started for ['127.0.0.1', 62682]
2023-07-05 21:56:11,011 DEBUG http_protocol 4468 16424 HTTP close for ['127.0.0.1', 62682]
2023-07-05 21:56:11,011 DEBUG http_protocol 4468 16424 HTTP response complete for ['127.0.0.1', 62682]
2023-07-05 21:56:11,011 INFO runserver 4468 16424 [mHTTP POST /api/market_buy/ 200 [0.22, 127.0.0.1:62682][0m
2023-07-05 23:36:08,275 DEBUG selector_events 10192 19780 Using selector: SelectSelector
2023-07-05 23:36:10,130 DEBUG selector_events 8796 13672 Using selector: SelectSelector
2023-07-05 23:36:11,006 INFO autoreload 8796 13672 Watching for file changes with StatReloader
2023-07-05 23:36:11,522 INFO server 8796 18876 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-05 23:36:11,522 INFO server 8796 18876 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-05 23:36:11,523 INFO server 8796 18876 Listening on TCP address 127.0.0.1:8000
2023-07-05 23:36:35,388 DEBUG http_protocol 8796 18876 HTTP b'OPTIONS' request for ['127.0.0.1', 54117]
2023-07-05 23:36:35,392 DEBUG http_protocol 8796 18876 HTTP 200 response started for ['127.0.0.1', 54117]
2023-07-05 23:36:35,393 DEBUG http_protocol 8796 18876 HTTP close for ['127.0.0.1', 54117]
2023-07-05 23:36:35,393 DEBUG http_protocol 8796 18876 HTTP response complete for ['127.0.0.1', 54117]
2023-07-05 23:36:35,393 INFO runserver 8796 18876 [mHTTP OPTIONS /api/login/ 200 [0.01, 127.0.0.1:54117][0m
2023-07-05 23:36:35,396 DEBUG http_protocol 8796 18876 HTTP b'POST' request for ['127.0.0.1', 54117]
2023-07-05 23:36:35,804 DEBUG http_protocol 8796 18876 HTTP 200 response started for ['127.0.0.1', 54117]
2023-07-05 23:36:35,804 DEBUG http_protocol 8796 18876 HTTP close for ['127.0.0.1', 54117]
2023-07-05 23:36:35,804 DEBUG http_protocol 8796 18876 HTTP response complete for ['127.0.0.1', 54117]
2023-07-05 23:36:35,804 INFO runserver 8796 18876 [mHTTP POST /api/login/ 200 [0.41, 127.0.0.1:54117][0m
2023-07-05 23:36:35,877 DEBUG http_protocol 8796 18876 HTTP b'OPTIONS' request for ['127.0.0.1', 54117]
2023-07-05 23:36:35,879 DEBUG http_protocol 8796 18876 HTTP 200 response started for ['127.0.0.1', 54117]
2023-07-05 23:36:35,880 DEBUG http_protocol 8796 18876 HTTP close for ['127.0.0.1', 54117]
2023-07-05 23:36:35,880 DEBUG http_protocol 8796 18876 HTTP response complete for ['127.0.0.1', 54117]
2023-07-05 23:36:35,880 INFO runserver 8796 18876 [mHTTP OPTIONS /api/profile_dashboard/ 200 [0.00, 127.0.0.1:54117][0m
2023-07-05 23:36:35,927 DEBUG http_protocol 8796 18876 HTTP b'GET' request for ['127.0.0.1', 54117]
2023-07-05 23:36:35,981 DEBUG http_protocol 8796 18876 HTTP 200 response started for ['127.0.0.1', 54117]
2023-07-05 23:36:35,981 DEBUG http_protocol 8796 18876 HTTP close for ['127.0.0.1', 54117]
2023-07-05 23:36:35,981 DEBUG http_protocol 8796 18876 HTTP response complete for ['127.0.0.1', 54117]
2023-07-05 23:36:35,981 INFO runserver 8796 18876 [mHTTP GET /api/profile_dashboard/ 200 [0.05, 127.0.0.1:54117][0m
2023-07-05 23:36:35,984 DEBUG http_protocol 8796 18876 HTTP b'GET' request for ['127.0.0.1', 54117]
2023-07-05 23:36:36,041 DEBUG http_protocol 8796 18876 HTTP 200 response started for ['127.0.0.1', 54117]
2023-07-05 23:36:36,041 DEBUG http_protocol 8796 18876 HTTP close for ['127.0.0.1', 54117]
2023-07-05 23:36:36,041 DEBUG http_protocol 8796 18876 HTTP response complete for ['127.0.0.1', 54117]
2023-07-05 23:36:36,041 INFO runserver 8796 18876 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:54117][0m
2023-07-05 23:36:36,963 DEBUG http_protocol 8796 18876 HTTP b'OPTIONS' request for ['127.0.0.1', 54117]
2023-07-05 23:36:36,965 DEBUG http_protocol 8796 18876 HTTP b'OPTIONS' request for ['127.0.0.1', 54121]
2023-07-05 23:36:36,967 DEBUG http_protocol 8796 18876 HTTP 200 response started for ['127.0.0.1', 54117]
2023-07-05 23:36:36,967 DEBUG http_protocol 8796 18876 HTTP close for ['127.0.0.1', 54117]
2023-07-05 23:36:36,967 DEBUG http_protocol 8796 18876 HTTP response complete for ['127.0.0.1', 54117]
2023-07-05 23:36:36,968 INFO runserver 8796 18876 [mHTTP OPTIONS /api/trading_profile/ 200 [0.01, 127.0.0.1:54117][0m
2023-07-05 23:36:36,970 DEBUG http_protocol 8796 18876 HTTP 200 response started for ['127.0.0.1', 54121]
2023-07-05 23:36:36,970 DEBUG http_protocol 8796 18876 HTTP close for ['127.0.0.1', 54121]
2023-07-05 23:36:36,971 DEBUG http_protocol 8796 18876 HTTP response complete for ['127.0.0.1', 54121]
2023-07-05 23:36:36,971 INFO runserver 8796 18876 [mHTTP OPTIONS /api/trading_profile/ 200 [0.01, 127.0.0.1:54121][0m
2023-07-05 23:36:36,972 DEBUG http_protocol 8796 18876 HTTP b'GET' request for ['127.0.0.1', 54117]
2023-07-05 23:36:36,974 DEBUG http_protocol 8796 18876 HTTP b'GET' request for ['127.0.0.1', 54121]
2023-07-05 23:36:37,041 DEBUG http_protocol 8796 18876 HTTP 200 response started for ['127.0.0.1', 54117]
2023-07-05 23:36:37,041 DEBUG http_protocol 8796 18876 HTTP close for ['127.0.0.1', 54117]
2023-07-05 23:36:37,041 DEBUG http_protocol 8796 18876 HTTP response complete for ['127.0.0.1', 54117]
2023-07-05 23:36:37,041 INFO runserver 8796 18876 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:54117][0m
2023-07-05 23:36:37,042 DEBUG http_protocol 8796 18876 HTTP 200 response started for ['127.0.0.1', 54121]
2023-07-05 23:36:37,043 DEBUG http_protocol 8796 18876 HTTP close for ['127.0.0.1', 54121]
2023-07-05 23:36:37,043 DEBUG http_protocol 8796 18876 HTTP response complete for ['127.0.0.1', 54121]
2023-07-05 23:36:37,043 INFO runserver 8796 18876 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:54121][0m
2023-07-06 10:20:16,590 DEBUG selector_events 16900 20848 Using selector: SelectSelector
2023-07-06 10:20:18,434 DEBUG selector_events 23612 13436 Using selector: SelectSelector
2023-07-06 10:20:19,225 INFO autoreload 23612 13436 Watching for file changes with StatReloader
2023-07-06 10:20:19,851 INFO server 23612 6132 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-06 10:20:19,851 INFO server 23612 6132 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-06 10:20:19,852 INFO server 23612 6132 Listening on TCP address 127.0.0.1:8000
2023-07-06 10:20:55,285 DEBUG selector_events 15868 11804 Using selector: SelectSelector
2023-07-06 10:20:56,379 DEBUG functional 15868 11804 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-06 10:20:56,380 DEBUG functional 15868 11804 
def place_order_task(*args, **kwds):
    return 1

2023-07-06 10:20:56,380 DEBUG functional 15868 11804 
def close_position_task(*args, **kwds):
    return 1

2023-07-06 10:20:56,380 DEBUG functional 15868 11804 
def chunks(task, it, n):
    return 1

2023-07-06 10:20:56,381 DEBUG functional 15868 11804 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-06 10:20:56,381 DEBUG functional 15868 11804 
def backend_cleanup():
    return 1

2023-07-06 10:20:56,381 DEBUG functional 15868 11804 
def debug_task(self):
    return 1

2023-07-06 10:20:56,382 DEBUG functional 15868 11804 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-06 10:20:56,382 DEBUG functional 15868 11804 
def xmap(task, it):
    return 1

2023-07-06 10:20:56,382 DEBUG functional 15868 11804 
def chain(*args, **kwargs):
    return 1

2023-07-06 10:20:56,383 DEBUG functional 15868 11804 
def xstarmap(task, it):
    return 1

2023-07-06 10:20:56,383 DEBUG functional 15868 11804 
def db_update_task():
    return 1

2023-07-06 10:20:56,383 DEBUG functional 15868 11804 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-06 10:21:08,558 DEBUG selector_events 24452 8472 Using selector: SelectSelector
2023-07-06 10:21:09,669 DEBUG functional 24452 8472 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-06 10:21:09,669 DEBUG functional 24452 8472 
def backend_cleanup():
    return 1

2023-07-06 10:21:09,670 DEBUG functional 24452 8472 
def db_update_task():
    return 1

2023-07-06 10:21:09,670 DEBUG functional 24452 8472 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-06 10:21:09,670 DEBUG functional 24452 8472 
def place_order_task(*args, **kwds):
    return 1

2023-07-06 10:21:09,671 DEBUG functional 24452 8472 
def close_position_task(*args, **kwds):
    return 1

2023-07-06 10:21:09,671 DEBUG functional 24452 8472 
def xmap(task, it):
    return 1

2023-07-06 10:21:09,671 DEBUG functional 24452 8472 
def chain(*args, **kwargs):
    return 1

2023-07-06 10:21:09,672 DEBUG functional 24452 8472 
def debug_task(self):
    return 1

2023-07-06 10:21:09,672 DEBUG functional 24452 8472 
def xstarmap(task, it):
    return 1

2023-07-06 10:21:09,673 DEBUG functional 24452 8472 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-06 10:21:09,673 DEBUG functional 24452 8472 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-06 10:21:09,673 DEBUG functional 24452 8472 
def chunks(task, it, n):
    return 1

2023-07-06 10:27:58,517 DEBUG selector_events 2372 17476 Using selector: SelectSelector
2023-07-06 10:28:00,356 DEBUG selector_events 14148 2112 Using selector: SelectSelector
2023-07-06 10:28:01,290 INFO autoreload 14148 2112 Watching for file changes with StatReloader
2023-07-06 10:28:01,796 INFO server 14148 16148 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-06 10:28:01,796 INFO server 14148 16148 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-06 10:28:01,797 INFO server 14148 16148 Listening on TCP address 127.0.0.1:8000
2023-07-06 10:28:22,928 DEBUG selector_events 20140 18716 Using selector: SelectSelector
2023-07-06 10:28:24,095 DEBUG functional 20140 18716 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-06 10:28:24,096 DEBUG functional 20140 18716 
def place_order_task(*args, **kwds):
    return 1

2023-07-06 10:28:24,096 DEBUG functional 20140 18716 
def close_position_task(*args, **kwds):
    return 1

2023-07-06 10:28:24,097 DEBUG functional 20140 18716 
def chunks(task, it, n):
    return 1

2023-07-06 10:28:24,097 DEBUG functional 20140 18716 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-06 10:28:24,097 DEBUG functional 20140 18716 
def backend_cleanup():
    return 1

2023-07-06 10:28:24,098 DEBUG functional 20140 18716 
def debug_task(self):
    return 1

2023-07-06 10:28:24,098 DEBUG functional 20140 18716 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-06 10:28:24,098 DEBUG functional 20140 18716 
def xmap(task, it):
    return 1

2023-07-06 10:28:24,099 DEBUG functional 20140 18716 
def chain(*args, **kwargs):
    return 1

2023-07-06 10:28:24,099 DEBUG functional 20140 18716 
def xstarmap(task, it):
    return 1

2023-07-06 10:28:24,099 DEBUG functional 20140 18716 
def db_update_task():
    return 1

2023-07-06 10:28:24,100 DEBUG functional 20140 18716 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-06 10:28:35,779 DEBUG selector_events 20648 12768 Using selector: SelectSelector
2023-07-06 10:28:37,031 DEBUG functional 20648 12768 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-06 10:28:37,032 DEBUG functional 20648 12768 
def backend_cleanup():
    return 1

2023-07-06 10:28:37,032 DEBUG functional 20648 12768 
def db_update_task():
    return 1

2023-07-06 10:28:37,033 DEBUG functional 20648 12768 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-06 10:28:37,033 DEBUG functional 20648 12768 
def place_order_task(*args, **kwds):
    return 1

2023-07-06 10:28:37,033 DEBUG functional 20648 12768 
def close_position_task(*args, **kwds):
    return 1

2023-07-06 10:28:37,034 DEBUG functional 20648 12768 
def xmap(task, it):
    return 1

2023-07-06 10:28:37,034 DEBUG functional 20648 12768 
def chain(*args, **kwargs):
    return 1

2023-07-06 10:28:37,034 DEBUG functional 20648 12768 
def debug_task(self):
    return 1

2023-07-06 10:28:37,035 DEBUG functional 20648 12768 
def xstarmap(task, it):
    return 1

2023-07-06 10:28:37,035 DEBUG functional 20648 12768 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-06 10:28:37,036 DEBUG functional 20648 12768 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-06 10:28:37,036 DEBUG functional 20648 12768 
def chunks(task, it, n):
    return 1

2023-07-06 10:29:04,756 INFO autoreload 14148 2112 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-06 10:29:06,036 DEBUG selector_events 6692 9344 Using selector: SelectSelector
2023-07-06 10:29:06,951 INFO autoreload 6692 9344 Watching for file changes with StatReloader
2023-07-06 10:29:07,394 INFO server 6692 20708 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-06 10:29:07,394 INFO server 6692 20708 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-06 10:29:07,395 INFO server 6692 20708 Listening on TCP address 127.0.0.1:8000
2023-07-06 10:29:09,767 DEBUG selector_events 6384 14408 Using selector: SelectSelector
2023-07-06 10:29:10,849 DEBUG functional 6384 14408 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-06 10:29:10,850 DEBUG functional 6384 14408 
def place_order_task(*args, **kwds):
    return 1

2023-07-06 10:29:10,850 DEBUG functional 6384 14408 
def close_position_task(*args, **kwds):
    return 1

2023-07-06 10:29:10,850 DEBUG functional 6384 14408 
def chunks(task, it, n):
    return 1

2023-07-06 10:29:10,851 DEBUG functional 6384 14408 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-06 10:29:10,851 DEBUG functional 6384 14408 
def backend_cleanup():
    return 1

2023-07-06 10:29:10,851 DEBUG functional 6384 14408 
def debug_task(self):
    return 1

2023-07-06 10:29:10,852 DEBUG functional 6384 14408 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-06 10:29:10,852 DEBUG functional 6384 14408 
def xmap(task, it):
    return 1

2023-07-06 10:29:10,852 DEBUG functional 6384 14408 
def chain(*args, **kwargs):
    return 1

2023-07-06 10:29:10,853 DEBUG functional 6384 14408 
def xstarmap(task, it):
    return 1

2023-07-06 10:29:10,853 DEBUG functional 6384 14408 
def db_update_task():
    return 1

2023-07-06 10:29:10,853 DEBUG functional 6384 14408 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-06 10:29:16,072 DEBUG selector_events 13236 13092 Using selector: SelectSelector
2023-07-06 10:29:17,160 DEBUG functional 13236 13092 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-06 10:29:17,160 DEBUG functional 13236 13092 
def backend_cleanup():
    return 1

2023-07-06 10:29:17,161 DEBUG functional 13236 13092 
def db_update_task():
    return 1

2023-07-06 10:29:17,161 DEBUG functional 13236 13092 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-06 10:29:17,161 DEBUG functional 13236 13092 
def place_order_task(*args, **kwds):
    return 1

2023-07-06 10:29:17,162 DEBUG functional 13236 13092 
def close_position_task(*args, **kwds):
    return 1

2023-07-06 10:29:17,162 DEBUG functional 13236 13092 
def xmap(task, it):
    return 1

2023-07-06 10:29:17,162 DEBUG functional 13236 13092 
def chain(*args, **kwargs):
    return 1

2023-07-06 10:29:17,163 DEBUG functional 13236 13092 
def debug_task(self):
    return 1

2023-07-06 10:29:17,163 DEBUG functional 13236 13092 
def xstarmap(task, it):
    return 1

2023-07-06 10:29:17,163 DEBUG functional 13236 13092 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-06 10:29:17,164 DEBUG functional 13236 13092 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-06 10:29:17,164 DEBUG functional 13236 13092 
def chunks(task, it, n):
    return 1

2023-07-06 10:29:27,299 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 52621]
2023-07-06 10:29:27,423 DEBUG core 6692 2332 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:29:27,423 DEBUG core 6692 2332 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:29:27,449 DEBUG http_protocol 6692 20708 HTTP 200 response started for ['127.0.0.1', 52621]
2023-07-06 10:29:27,449 DEBUG http_protocol 6692 20708 HTTP close for ['127.0.0.1', 52621]
2023-07-06 10:29:27,449 DEBUG http_protocol 6692 20708 HTTP response complete for ['127.0.0.1', 52621]
2023-07-06 10:29:27,449 INFO runserver 6692 20708 [mHTTP GET /api/open_positions/ 200 [0.15, 127.0.0.1:52621][0m
2023-07-06 10:29:27,501 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 52621]
2023-07-06 10:29:27,502 DEBUG http_protocol 6692 20708 HTTP disconnect for ['127.0.0.1', 52621]
2023-07-06 10:29:27,504 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 52625]
2023-07-06 10:29:27,506 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 52626]
2023-07-06 10:29:27,506 DEBUG http_protocol 6692 20708 HTTP disconnect for ['127.0.0.1', 52625]
2023-07-06 10:29:27,507 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 52627]
2023-07-06 10:29:27,508 DEBUG http_protocol 6692 20708 HTTP disconnect for ['127.0.0.1', 52626]
2023-07-06 10:29:27,509 DEBUG http_protocol 6692 20708 HTTP disconnect for ['127.0.0.1', 52627]
2023-07-06 10:29:27,517 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 52628]
2023-07-06 10:29:27,518 DEBUG http_protocol 6692 20708 HTTP disconnect for ['127.0.0.1', 52628]
2023-07-06 10:29:33,446 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 64184]
2023-07-06 10:29:33,496 DEBUG core 6692 10016 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:29:33,496 DEBUG core 6692 10016 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:29:33,545 DEBUG http_protocol 6692 20708 HTTP 200 response started for ['127.0.0.1', 64184]
2023-07-06 10:29:33,545 DEBUG http_protocol 6692 20708 HTTP close for ['127.0.0.1', 64184]
2023-07-06 10:29:33,545 DEBUG http_protocol 6692 20708 HTTP response complete for ['127.0.0.1', 64184]
2023-07-06 10:29:33,545 INFO runserver 6692 20708 [mHTTP GET /api/open_positions/ 200 [0.10, 127.0.0.1:64184][0m
2023-07-06 10:29:33,595 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 64184]
2023-07-06 10:29:33,597 DEBUG http_protocol 6692 20708 HTTP disconnect for ['127.0.0.1', 64184]
2023-07-06 10:29:33,654 WARNING log 6692 14108 Not Found: /favicon.ico
2023-07-06 10:29:35,226 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 63048]
2023-07-06 10:29:35,275 DEBUG core 6692 15660 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:29:35,275 DEBUG core 6692 15660 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:29:35,281 DEBUG http_protocol 6692 20708 HTTP 200 response started for ['127.0.0.1', 63048]
2023-07-06 10:29:35,281 DEBUG http_protocol 6692 20708 HTTP close for ['127.0.0.1', 63048]
2023-07-06 10:29:35,282 DEBUG http_protocol 6692 20708 HTTP response complete for ['127.0.0.1', 63048]
2023-07-06 10:29:35,282 INFO runserver 6692 20708 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:63048][0m
2023-07-06 10:29:35,327 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 63048]
2023-07-06 10:29:35,328 DEBUG http_protocol 6692 20708 HTTP disconnect for ['127.0.0.1', 63048]
2023-07-06 10:29:35,337 WARNING log 6692 14096 Not Found: /favicon.ico
2023-07-06 10:29:35,726 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 63050]
2023-07-06 10:29:35,774 DEBUG core 6692 19192 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:29:35,774 DEBUG core 6692 19192 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:29:35,780 DEBUG http_protocol 6692 20708 HTTP 200 response started for ['127.0.0.1', 63050]
2023-07-06 10:29:35,780 DEBUG http_protocol 6692 20708 HTTP close for ['127.0.0.1', 63050]
2023-07-06 10:29:35,780 DEBUG http_protocol 6692 20708 HTTP response complete for ['127.0.0.1', 63050]
2023-07-06 10:29:35,780 INFO runserver 6692 20708 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:63050][0m
2023-07-06 10:29:36,122 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 63050]
2023-07-06 10:29:36,171 DEBUG core 6692 24128 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:29:36,171 DEBUG core 6692 24128 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:29:36,176 DEBUG http_protocol 6692 20708 HTTP 200 response started for ['127.0.0.1', 63050]
2023-07-06 10:29:36,176 DEBUG http_protocol 6692 20708 HTTP close for ['127.0.0.1', 63050]
2023-07-06 10:29:36,177 DEBUG http_protocol 6692 20708 HTTP response complete for ['127.0.0.1', 63050]
2023-07-06 10:29:36,177 INFO runserver 6692 20708 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:63050][0m
2023-07-06 10:29:36,427 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 63050]
2023-07-06 10:29:36,480 DEBUG core 6692 24528 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:29:36,480 DEBUG core 6692 24528 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:29:36,485 DEBUG http_protocol 6692 20708 HTTP 200 response started for ['127.0.0.1', 63050]
2023-07-06 10:29:36,486 DEBUG http_protocol 6692 20708 HTTP close for ['127.0.0.1', 63050]
2023-07-06 10:29:36,486 DEBUG http_protocol 6692 20708 HTTP response complete for ['127.0.0.1', 63050]
2023-07-06 10:29:36,486 INFO runserver 6692 20708 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:63050][0m
2023-07-06 10:29:36,662 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 63050]
2023-07-06 10:29:36,708 DEBUG core 6692 11712 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:29:36,708 DEBUG core 6692 11712 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:29:36,714 DEBUG http_protocol 6692 20708 HTTP 200 response started for ['127.0.0.1', 63050]
2023-07-06 10:29:36,714 DEBUG http_protocol 6692 20708 HTTP close for ['127.0.0.1', 63050]
2023-07-06 10:29:36,714 DEBUG http_protocol 6692 20708 HTTP response complete for ['127.0.0.1', 63050]
2023-07-06 10:29:36,714 INFO runserver 6692 20708 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:63050][0m
2023-07-06 10:29:36,904 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 63050]
2023-07-06 10:29:36,952 DEBUG core 6692 5332 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:29:36,953 DEBUG core 6692 5332 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:29:36,959 DEBUG http_protocol 6692 20708 HTTP 200 response started for ['127.0.0.1', 63050]
2023-07-06 10:29:36,959 DEBUG http_protocol 6692 20708 HTTP close for ['127.0.0.1', 63050]
2023-07-06 10:29:36,959 DEBUG http_protocol 6692 20708 HTTP response complete for ['127.0.0.1', 63050]
2023-07-06 10:29:36,960 INFO runserver 6692 20708 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:63050][0m
2023-07-06 10:29:37,189 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 63050]
2023-07-06 10:29:37,238 DEBUG core 6692 4228 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:29:37,238 DEBUG core 6692 4228 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:29:37,244 DEBUG http_protocol 6692 20708 HTTP 200 response started for ['127.0.0.1', 63050]
2023-07-06 10:29:37,244 DEBUG http_protocol 6692 20708 HTTP close for ['127.0.0.1', 63050]
2023-07-06 10:29:37,244 DEBUG http_protocol 6692 20708 HTTP response complete for ['127.0.0.1', 63050]
2023-07-06 10:29:37,244 INFO runserver 6692 20708 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:63050][0m
2023-07-06 10:29:37,529 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 63050]
2023-07-06 10:29:37,579 DEBUG core 6692 7020 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:29:37,579 DEBUG core 6692 7020 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:29:37,584 DEBUG http_protocol 6692 20708 HTTP 200 response started for ['127.0.0.1', 63050]
2023-07-06 10:29:37,585 DEBUG http_protocol 6692 20708 HTTP close for ['127.0.0.1', 63050]
2023-07-06 10:29:37,585 DEBUG http_protocol 6692 20708 HTTP response complete for ['127.0.0.1', 63050]
2023-07-06 10:29:37,585 INFO runserver 6692 20708 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:63050][0m
2023-07-06 10:29:38,126 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 63050]
2023-07-06 10:29:38,174 DEBUG core 6692 2928 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:29:38,174 DEBUG core 6692 2928 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:29:38,179 DEBUG http_protocol 6692 20708 HTTP 200 response started for ['127.0.0.1', 63050]
2023-07-06 10:29:38,180 DEBUG http_protocol 6692 20708 HTTP close for ['127.0.0.1', 63050]
2023-07-06 10:29:38,180 DEBUG http_protocol 6692 20708 HTTP response complete for ['127.0.0.1', 63050]
2023-07-06 10:29:38,180 INFO runserver 6692 20708 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:63050][0m
2023-07-06 10:29:39,077 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 63050]
2023-07-06 10:29:39,231 DEBUG core 6692 14296 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:29:39,232 DEBUG core 6692 14296 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:29:39,238 DEBUG http_protocol 6692 20708 HTTP 200 response started for ['127.0.0.1', 63050]
2023-07-06 10:29:39,238 DEBUG http_protocol 6692 20708 HTTP close for ['127.0.0.1', 63050]
2023-07-06 10:29:39,239 DEBUG http_protocol 6692 20708 HTTP response complete for ['127.0.0.1', 63050]
2023-07-06 10:29:39,239 INFO runserver 6692 20708 [mHTTP GET /api/open_positions/ 200 [0.16, 127.0.0.1:63050][0m
2023-07-06 10:29:39,298 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 63050]
2023-07-06 10:29:39,299 DEBUG http_protocol 6692 20708 HTTP disconnect for ['127.0.0.1', 63050]
2023-07-06 10:29:39,308 WARNING log 6692 5356 Not Found: /favicon.ico
2023-07-06 10:29:39,585 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 51550]
2023-07-06 10:29:39,633 DEBUG core 6692 14064 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:29:39,633 DEBUG core 6692 14064 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:29:39,639 DEBUG http_protocol 6692 20708 HTTP 200 response started for ['127.0.0.1', 51550]
2023-07-06 10:29:39,639 DEBUG http_protocol 6692 20708 HTTP close for ['127.0.0.1', 51550]
2023-07-06 10:29:39,639 DEBUG http_protocol 6692 20708 HTTP response complete for ['127.0.0.1', 51550]
2023-07-06 10:29:39,639 INFO runserver 6692 20708 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:51550][0m
2023-07-06 10:29:40,859 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 51550]
2023-07-06 10:29:40,906 DEBUG core 6692 9568 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:29:40,906 DEBUG core 6692 9568 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:29:40,912 DEBUG http_protocol 6692 20708 HTTP 200 response started for ['127.0.0.1', 51550]
2023-07-06 10:29:40,912 DEBUG http_protocol 6692 20708 HTTP close for ['127.0.0.1', 51550]
2023-07-06 10:29:40,912 DEBUG http_protocol 6692 20708 HTTP response complete for ['127.0.0.1', 51550]
2023-07-06 10:29:40,912 INFO runserver 6692 20708 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:51550][0m
2023-07-06 10:29:43,395 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 51550]
2023-07-06 10:29:43,443 DEBUG core 6692 20716 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:29:43,443 DEBUG core 6692 20716 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:29:43,448 DEBUG http_protocol 6692 20708 HTTP 200 response started for ['127.0.0.1', 51550]
2023-07-06 10:29:43,449 DEBUG http_protocol 6692 20708 HTTP close for ['127.0.0.1', 51550]
2023-07-06 10:29:43,449 DEBUG http_protocol 6692 20708 HTTP response complete for ['127.0.0.1', 51550]
2023-07-06 10:29:43,449 INFO runserver 6692 20708 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:51550][0m
2023-07-06 10:29:44,012 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 51550]
2023-07-06 10:29:44,062 DEBUG core 6692 12484 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:29:44,062 DEBUG core 6692 12484 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:29:44,068 DEBUG http_protocol 6692 20708 HTTP 200 response started for ['127.0.0.1', 51550]
2023-07-06 10:29:44,068 DEBUG http_protocol 6692 20708 HTTP close for ['127.0.0.1', 51550]
2023-07-06 10:29:44,068 DEBUG http_protocol 6692 20708 HTTP response complete for ['127.0.0.1', 51550]
2023-07-06 10:29:44,068 INFO runserver 6692 20708 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:51550][0m
2023-07-06 10:29:44,495 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 51550]
2023-07-06 10:29:44,545 DEBUG core 6692 10064 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:29:44,545 DEBUG core 6692 10064 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:29:44,550 DEBUG http_protocol 6692 20708 HTTP 200 response started for ['127.0.0.1', 51550]
2023-07-06 10:29:44,550 DEBUG http_protocol 6692 20708 HTTP close for ['127.0.0.1', 51550]
2023-07-06 10:29:44,550 DEBUG http_protocol 6692 20708 HTTP response complete for ['127.0.0.1', 51550]
2023-07-06 10:29:44,550 INFO runserver 6692 20708 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:51550][0m
2023-07-06 10:29:44,591 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 51550]
2023-07-06 10:29:44,592 DEBUG http_protocol 6692 20708 HTTP disconnect for ['127.0.0.1', 51550]
2023-07-06 10:29:44,601 WARNING log 6692 14108 Not Found: /favicon.ico
2023-07-06 10:29:44,976 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 54532]
2023-07-06 10:29:45,024 DEBUG core 6692 3628 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:29:45,024 DEBUG core 6692 3628 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:29:45,030 DEBUG http_protocol 6692 20708 HTTP 200 response started for ['127.0.0.1', 54532]
2023-07-06 10:29:45,030 DEBUG http_protocol 6692 20708 HTTP close for ['127.0.0.1', 54532]
2023-07-06 10:29:45,030 DEBUG http_protocol 6692 20708 HTTP response complete for ['127.0.0.1', 54532]
2023-07-06 10:29:45,030 INFO runserver 6692 20708 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:54532][0m
2023-07-06 10:29:52,837 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 54532]
2023-07-06 10:29:52,883 DEBUG core 6692 22308 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:29:52,883 DEBUG core 6692 22308 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:29:52,889 DEBUG http_protocol 6692 20708 HTTP 200 response started for ['127.0.0.1', 54532]
2023-07-06 10:29:52,889 DEBUG http_protocol 6692 20708 HTTP close for ['127.0.0.1', 54532]
2023-07-06 10:29:52,889 DEBUG http_protocol 6692 20708 HTTP response complete for ['127.0.0.1', 54532]
2023-07-06 10:29:52,889 INFO runserver 6692 20708 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:54532][0m
2023-07-06 10:30:04,305 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 54532]
2023-07-06 10:30:04,354 DEBUG core 6692 13184 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:30:04,354 DEBUG core 6692 13184 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:30:04,360 DEBUG http_protocol 6692 20708 HTTP 200 response started for ['127.0.0.1', 54532]
2023-07-06 10:30:04,360 DEBUG http_protocol 6692 20708 HTTP close for ['127.0.0.1', 54532]
2023-07-06 10:30:04,360 DEBUG http_protocol 6692 20708 HTTP response complete for ['127.0.0.1', 54532]
2023-07-06 10:30:04,360 INFO runserver 6692 20708 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:54532][0m
2023-07-06 10:30:04,403 DEBUG http_protocol 6692 20708 HTTP b'GET' request for ['127.0.0.1', 54532]
2023-07-06 10:30:04,405 DEBUG http_protocol 6692 20708 HTTP disconnect for ['127.0.0.1', 54532]
2023-07-06 10:30:04,415 WARNING log 6692 14096 Not Found: /favicon.ico
2023-07-06 10:32:17,269 INFO autoreload 6692 9344 C:\Users\Evert\Desktop\Django\monreal\accounts\views.py changed, reloading.
2023-07-06 10:32:18,333 DEBUG selector_events 712 5500 Using selector: SelectSelector
2023-07-06 10:32:19,177 INFO autoreload 712 5500 Watching for file changes with StatReloader
2023-07-06 10:32:19,597 INFO server 712 15052 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-06 10:32:19,597 INFO server 712 15052 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-06 10:32:19,598 INFO server 712 15052 Listening on TCP address 127.0.0.1:8000
2023-07-06 10:33:40,800 INFO autoreload 712 5500 C:\Users\Evert\Desktop\Django\monreal\accounts\tasks.py changed, reloading.
2023-07-06 10:33:41,931 DEBUG selector_events 19304 23152 Using selector: SelectSelector
2023-07-06 10:33:42,836 INFO autoreload 19304 23152 Watching for file changes with StatReloader
2023-07-06 10:33:43,299 INFO server 19304 2764 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-06 10:33:43,299 INFO server 19304 2764 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-06 10:33:43,300 INFO server 19304 2764 Listening on TCP address 127.0.0.1:8000
2023-07-06 10:33:57,311 DEBUG http_protocol 19304 2764 HTTP b'GET' request for ['127.0.0.1', 56340]
2023-07-06 10:33:57,431 DEBUG core 19304 24316 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:33:57,432 DEBUG core 19304 24316 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:33:57,455 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 56340]
2023-07-06 10:33:57,455 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 56340]
2023-07-06 10:33:57,455 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 56340]
2023-07-06 10:33:57,456 INFO runserver 19304 2764 [mHTTP GET /api/open_positions/ 200 [0.15, 127.0.0.1:56340][0m
2023-07-06 10:33:57,501 DEBUG http_protocol 19304 2764 HTTP b'GET' request for ['127.0.0.1', 56340]
2023-07-06 10:33:57,502 DEBUG http_protocol 19304 2764 HTTP disconnect for ['127.0.0.1', 56340]
2023-07-06 10:33:57,515 WARNING log 19304 24556 Not Found: /favicon.ico
2023-07-06 10:33:58,175 DEBUG http_protocol 19304 2764 HTTP b'GET' request for ['127.0.0.1', 56342]
2023-07-06 10:33:58,222 DEBUG core 19304 15104 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:33:58,222 DEBUG core 19304 15104 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:33:58,227 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 56342]
2023-07-06 10:33:58,227 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 56342]
2023-07-06 10:33:58,227 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 56342]
2023-07-06 10:33:58,227 INFO runserver 19304 2764 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56342][0m
2023-07-06 10:34:05,853 DEBUG http_protocol 19304 2764 HTTP b'OPTIONS' request for ['127.0.0.1', 52732]
2023-07-06 10:34:05,856 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 52732]
2023-07-06 10:34:05,856 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 52732]
2023-07-06 10:34:05,856 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 52732]
2023-07-06 10:34:05,856 INFO runserver 19304 2764 [mHTTP OPTIONS /api/login/ 200 [0.00, 127.0.0.1:52732][0m
2023-07-06 10:34:05,859 DEBUG http_protocol 19304 2764 HTTP b'POST' request for ['127.0.0.1', 52732]
2023-07-06 10:34:06,161 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 52732]
2023-07-06 10:34:06,161 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 52732]
2023-07-06 10:34:06,162 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 52732]
2023-07-06 10:34:06,162 INFO runserver 19304 2764 [mHTTP POST /api/login/ 200 [0.30, 127.0.0.1:52732][0m
2023-07-06 10:34:06,229 DEBUG http_protocol 19304 2764 HTTP b'OPTIONS' request for ['127.0.0.1', 52732]
2023-07-06 10:34:06,231 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 52732]
2023-07-06 10:34:06,232 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 52732]
2023-07-06 10:34:06,232 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 52732]
2023-07-06 10:34:06,232 INFO runserver 19304 2764 [mHTTP OPTIONS /api/profile_dashboard/ 200 [0.00, 127.0.0.1:52732][0m
2023-07-06 10:34:06,279 DEBUG http_protocol 19304 2764 HTTP b'GET' request for ['127.0.0.1', 52732]
2023-07-06 10:34:06,375 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 52732]
2023-07-06 10:34:06,375 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 52732]
2023-07-06 10:34:06,375 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 52732]
2023-07-06 10:34:06,375 INFO runserver 19304 2764 [mHTTP GET /api/profile_dashboard/ 200 [0.10, 127.0.0.1:52732][0m
2023-07-06 10:34:06,377 DEBUG http_protocol 19304 2764 HTTP b'GET' request for ['127.0.0.1', 52732]
2023-07-06 10:34:06,439 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 52732]
2023-07-06 10:34:06,439 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 52732]
2023-07-06 10:34:06,440 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 52732]
2023-07-06 10:34:06,440 INFO runserver 19304 2764 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:52732][0m
2023-07-06 10:34:07,823 DEBUG http_protocol 19304 2764 HTTP b'OPTIONS' request for ['127.0.0.1', 52732]
2023-07-06 10:34:07,825 DEBUG http_protocol 19304 2764 HTTP b'OPTIONS' request for ['127.0.0.1', 59267]
2023-07-06 10:34:07,828 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 52732]
2023-07-06 10:34:07,828 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 52732]
2023-07-06 10:34:07,829 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 52732]
2023-07-06 10:34:07,829 INFO runserver 19304 2764 [mHTTP OPTIONS /api/trading_profile/ 200 [0.01, 127.0.0.1:52732][0m
2023-07-06 10:34:07,830 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 59267]
2023-07-06 10:34:07,830 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 59267]
2023-07-06 10:34:07,830 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 59267]
2023-07-06 10:34:07,831 INFO runserver 19304 2764 [mHTTP OPTIONS /api/trading_profile/ 200 [0.01, 127.0.0.1:59267][0m
2023-07-06 10:34:07,832 DEBUG http_protocol 19304 2764 HTTP b'GET' request for ['127.0.0.1', 52732]
2023-07-06 10:34:07,833 DEBUG http_protocol 19304 2764 HTTP b'GET' request for ['127.0.0.1', 59267]
2023-07-06 10:34:07,900 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 52732]
2023-07-06 10:34:07,900 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 52732]
2023-07-06 10:34:07,900 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 52732]
2023-07-06 10:34:07,900 INFO runserver 19304 2764 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:52732][0m
2023-07-06 10:34:07,905 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 59267]
2023-07-06 10:34:07,905 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 59267]
2023-07-06 10:34:07,906 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 59267]
2023-07-06 10:34:07,906 INFO runserver 19304 2764 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:59267][0m
2023-07-06 10:34:15,172 DEBUG selector_events 7924 19952 Using selector: SelectSelector
2023-07-06 10:34:16,460 DEBUG functional 7924 19952 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-06 10:34:16,460 DEBUG functional 7924 19952 
def chunks(task, it, n):
    return 1

2023-07-06 10:34:16,461 DEBUG functional 7924 19952 
def db_update_task():
    return 1

2023-07-06 10:34:16,461 DEBUG functional 7924 19952 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-06 10:34:16,462 DEBUG functional 7924 19952 
def backend_cleanup():
    return 1

2023-07-06 10:34:16,462 DEBUG functional 7924 19952 
def debug_task(self):
    return 1

2023-07-06 10:34:16,462 DEBUG functional 7924 19952 
def close_position_task(*args, **kwds):
    return 1

2023-07-06 10:34:16,463 DEBUG functional 7924 19952 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-06 10:34:16,463 DEBUG functional 7924 19952 
def place_order_task(*args, **kwds):
    return 1

2023-07-06 10:34:16,463 DEBUG functional 7924 19952 
def xmap(task, it):
    return 1

2023-07-06 10:34:16,464 DEBUG functional 7924 19952 
def chain(*args, **kwargs):
    return 1

2023-07-06 10:34:16,464 DEBUG functional 7924 19952 
def xstarmap(task, it):
    return 1

2023-07-06 10:34:16,464 DEBUG functional 7924 19952 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-06 10:34:23,520 DEBUG http_protocol 19304 2764 HTTP b'OPTIONS' request for ['127.0.0.1', 52732]
2023-07-06 10:34:23,522 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 52732]
2023-07-06 10:34:23,522 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 52732]
2023-07-06 10:34:23,523 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 52732]
2023-07-06 10:34:23,523 INFO runserver 19304 2764 [mHTTP OPTIONS /api/close_positions/ 200 [0.00, 127.0.0.1:52732][0m
2023-07-06 10:34:23,525 DEBUG http_protocol 19304 2764 HTTP b'POST' request for ['127.0.0.1', 52732]
2023-07-06 10:34:23,585 DEBUG functional 19304 18196 
def xstarmap(task, it):
    return 1

2023-07-06 10:34:23,587 DEBUG functional 19304 18196 
def db_update_task():
    return 1

2023-07-06 10:34:23,587 DEBUG functional 19304 18196 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-06 10:34:23,587 DEBUG functional 19304 18196 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-06 10:34:23,588 DEBUG functional 19304 18196 
def close_position_task(*args, **kwds):
    return 1

2023-07-06 10:34:23,588 DEBUG functional 19304 18196 
def chunks(task, it, n):
    return 1

2023-07-06 10:34:23,588 DEBUG functional 19304 18196 
def debug_task(self):
    return 1

2023-07-06 10:34:23,589 DEBUG functional 19304 18196 
def place_order_task(*args, **kwds):
    return 1

2023-07-06 10:34:23,589 DEBUG functional 19304 18196 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-06 10:34:23,589 DEBUG functional 19304 18196 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-06 10:34:23,590 DEBUG functional 19304 18196 
def xmap(task, it):
    return 1

2023-07-06 10:34:23,590 DEBUG functional 19304 18196 
def backend_cleanup():
    return 1

2023-07-06 10:34:23,590 DEBUG functional 19304 18196 
def chain(*args, **kwargs):
    return 1

2023-07-06 10:34:23,706 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 52732]
2023-07-06 10:34:23,706 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 52732]
2023-07-06 10:34:23,706 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 52732]
2023-07-06 10:34:23,707 INFO runserver 19304 2764 [mHTTP POST /api/close_positions/ 200 [0.18, 127.0.0.1:52732][0m
2023-07-06 10:34:31,939 DEBUG http_protocol 19304 2764 HTTP b'POST' request for ['127.0.0.1', 52732]
2023-07-06 10:34:32,072 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 52732]
2023-07-06 10:34:32,072 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 52732]
2023-07-06 10:34:32,073 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 52732]
2023-07-06 10:34:32,073 INFO runserver 19304 2764 [mHTTP POST /api/close_positions/ 200 [0.13, 127.0.0.1:52732][0m
2023-07-06 10:34:42,791 DEBUG http_protocol 19304 2764 HTTP b'GET' request for ['127.0.0.1', 56342]
2023-07-06 10:34:42,838 DEBUG core 19304 19288 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:34:42,838 DEBUG core 19304 19288 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:34:42,842 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 56342]
2023-07-06 10:34:42,842 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 56342]
2023-07-06 10:34:42,842 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 56342]
2023-07-06 10:34:42,842 INFO runserver 19304 2764 [mHTTP GET /api/open_positions/ 200 [0.05, 127.0.0.1:56342][0m
2023-07-06 10:34:42,895 DEBUG http_protocol 19304 2764 HTTP b'GET' request for ['127.0.0.1', 56342]
2023-07-06 10:34:42,896 DEBUG http_protocol 19304 2764 HTTP disconnect for ['127.0.0.1', 56342]
2023-07-06 10:34:42,906 WARNING log 19304 24556 Not Found: /favicon.ico
2023-07-06 10:34:46,444 DEBUG http_protocol 19304 2764 HTTP b'GET' request for ['127.0.0.1', 52732]
2023-07-06 10:34:46,445 DEBUG http_protocol 19304 2764 HTTP b'GET' request for ['127.0.0.1', 59267]
2023-07-06 10:34:46,512 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 52732]
2023-07-06 10:34:46,513 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 52732]
2023-07-06 10:34:46,513 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 52732]
2023-07-06 10:34:46,513 INFO runserver 19304 2764 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:52732][0m
2023-07-06 10:34:46,515 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 59267]
2023-07-06 10:34:46,516 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 59267]
2023-07-06 10:34:46,516 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 59267]
2023-07-06 10:34:46,516 INFO runserver 19304 2764 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:59267][0m
2023-07-06 10:35:34,056 DEBUG http_protocol 19304 2764 HTTP b'GET' request for ['127.0.0.1', 52732]
2023-07-06 10:35:34,059 DEBUG http_protocol 19304 2764 HTTP b'GET' request for ['127.0.0.1', 59267]
2023-07-06 10:35:34,125 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 52732]
2023-07-06 10:35:34,125 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 52732]
2023-07-06 10:35:34,125 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 52732]
2023-07-06 10:35:34,125 INFO runserver 19304 2764 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:52732][0m
2023-07-06 10:35:34,128 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 59267]
2023-07-06 10:35:34,128 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 59267]
2023-07-06 10:35:34,128 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 59267]
2023-07-06 10:35:34,128 INFO runserver 19304 2764 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:59267][0m
2023-07-06 10:35:38,337 DEBUG http_protocol 19304 2764 HTTP b'OPTIONS' request for ['127.0.0.1', 52732]
2023-07-06 10:35:38,340 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 52732]
2023-07-06 10:35:38,341 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 52732]
2023-07-06 10:35:38,341 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 52732]
2023-07-06 10:35:38,341 INFO runserver 19304 2764 [mHTTP OPTIONS /api/market_buy/ 200 [0.00, 127.0.0.1:52732][0m
2023-07-06 10:35:38,345 DEBUG http_protocol 19304 2764 HTTP b'POST' request for ['127.0.0.1', 59267]
2023-07-06 10:35:38,479 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 59267]
2023-07-06 10:35:38,480 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 59267]
2023-07-06 10:35:38,480 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 59267]
2023-07-06 10:35:38,480 INFO runserver 19304 2764 [mHTTP POST /api/market_buy/ 200 [0.14, 127.0.0.1:59267][0m
2023-07-06 10:35:42,922 DEBUG http_protocol 19304 2764 HTTP b'GET' request for ['127.0.0.1', 60787]
2023-07-06 10:35:42,978 DEBUG core 19304 15172 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:35:42,978 DEBUG core 19304 15172 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:35:42,985 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 60787]
2023-07-06 10:35:42,985 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 60787]
2023-07-06 10:35:42,986 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 60787]
2023-07-06 10:35:42,986 INFO runserver 19304 2764 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:60787][0m
2023-07-06 10:35:43,048 DEBUG http_protocol 19304 2764 HTTP b'GET' request for ['127.0.0.1', 60787]
2023-07-06 10:35:43,049 DEBUG http_protocol 19304 2764 HTTP disconnect for ['127.0.0.1', 60787]
2023-07-06 10:35:43,059 WARNING log 19304 24556 Not Found: /favicon.ico
2023-07-06 10:35:54,204 DEBUG http_protocol 19304 2764 HTTP b'POST' request for ['127.0.0.1', 52732]
2023-07-06 10:35:54,341 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 52732]
2023-07-06 10:35:54,341 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 52732]
2023-07-06 10:35:54,342 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 52732]
2023-07-06 10:35:54,342 INFO runserver 19304 2764 [mHTTP POST /api/close_positions/ 200 [0.14, 127.0.0.1:52732][0m
2023-07-06 10:36:23,665 DEBUG http_protocol 19304 2764 HTTP b'GET' request for ['127.0.0.1', 64700]
2023-07-06 10:36:23,718 DEBUG core 19304 23028 Successfully imported extension module "markdown.extensions.toc".
2023-07-06 10:36:23,718 DEBUG core 19304 23028 Successfully loaded extension "markdown.extensions.toc.TocExtension".
2023-07-06 10:36:23,723 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 64700]
2023-07-06 10:36:23,723 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 64700]
2023-07-06 10:36:23,723 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 64700]
2023-07-06 10:36:23,723 INFO runserver 19304 2764 [mHTTP GET /api/open_positions/ 200 [0.06, 127.0.0.1:64700][0m
2023-07-06 10:36:23,807 DEBUG http_protocol 19304 2764 HTTP b'GET' request for ['127.0.0.1', 64700]
2023-07-06 10:36:23,808 DEBUG http_protocol 19304 2764 HTTP disconnect for ['127.0.0.1', 64700]
2023-07-06 10:36:23,819 WARNING log 19304 24556 Not Found: /favicon.ico
2023-07-06 10:36:41,573 DEBUG http_protocol 19304 2764 HTTP b'GET' request for ['127.0.0.1', 52732]
2023-07-06 10:36:41,575 DEBUG http_protocol 19304 2764 HTTP b'GET' request for ['127.0.0.1', 63397]
2023-07-06 10:36:41,636 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 52732]
2023-07-06 10:36:41,637 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 52732]
2023-07-06 10:36:41,637 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 52732]
2023-07-06 10:36:41,637 INFO runserver 19304 2764 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:52732][0m
2023-07-06 10:36:41,639 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 63397]
2023-07-06 10:36:41,640 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 63397]
2023-07-06 10:36:41,640 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 63397]
2023-07-06 10:36:41,640 INFO runserver 19304 2764 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:63397][0m
2023-07-06 10:36:44,385 DEBUG http_protocol 19304 2764 HTTP b'OPTIONS' request for ['127.0.0.1', 52732]
2023-07-06 10:36:44,387 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 52732]
2023-07-06 10:36:44,387 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 52732]
2023-07-06 10:36:44,388 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 52732]
2023-07-06 10:36:44,388 INFO runserver 19304 2764 [mHTTP OPTIONS /api/game/ 200 [0.00, 127.0.0.1:52732][0m
2023-07-06 10:36:44,390 DEBUG http_protocol 19304 2764 HTTP b'POST' request for ['127.0.0.1', 63397]
2023-07-06 10:36:59,545 ERROR log 19304 24556 Internal Server Error: /api/game/
Traceback (most recent call last):
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 486, in thread_handler
    raise exc_info[1]
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\exception.py", line 42, in inner
    response = await get_response(request)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\core\handlers\base.py", line 253, in _get_response_async
    response = await wrapped_callback(
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File "c:\Users\Evert\anaconda3\lib\asyncio\tasks.py", line 408, in wait_for
    return await fut
  File "c:\Users\Evert\anaconda3\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\asgiref\sync.py", line 490, in thread_handler
    return func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\decorators\csrf.py", line 56, in wrapper_view
    return view_func(*args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\django\views\generic\base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "C:\Users\Evert\Desktop\Django\monreal\.venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 97, in post
    price_end = self.get_game_result()
  File "C:\Users\Evert\Desktop\Django\monreal\accounts\views.py", line 83, in get_game_result
    price = mean(prices)
  File "c:\Users\Evert\anaconda3\lib\statistics.py", line 328, in mean
    raise StatisticsError('mean requires at least one data point')
statistics.StatisticsError: mean requires at least one data point
2023-07-06 10:36:59,554 DEBUG http_protocol 19304 2764 HTTP 500 response started for ['127.0.0.1', 63397]
2023-07-06 10:36:59,554 DEBUG http_protocol 19304 2764 HTTP response chunk for ['127.0.0.1', 63397]
2023-07-06 10:36:59,554 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 63397]
2023-07-06 10:36:59,554 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 63397]
2023-07-06 10:36:59,554 ERROR runserver 19304 2764 [35;1mHTTP POST /api/game/ 500 [15.16, 127.0.0.1:63397][0m
2023-07-06 10:37:17,639 DEBUG http_protocol 19304 2764 HTTP b'POST' request for ['127.0.0.1', 63397]
2023-07-06 10:37:32,823 DEBUG http_protocol 19304 2764 HTTP 200 response started for ['127.0.0.1', 63397]
2023-07-06 10:37:32,824 DEBUG http_protocol 19304 2764 HTTP close for ['127.0.0.1', 63397]
2023-07-06 10:37:32,824 DEBUG http_protocol 19304 2764 HTTP response complete for ['127.0.0.1', 63397]
2023-07-06 10:37:32,824 INFO runserver 19304 2764 [mHTTP POST /api/game/ 200 [15.18, 127.0.0.1:63397][0m
2023-07-06 11:54:31,635 DEBUG selector_events 12876 21744 Using selector: SelectSelector
2023-07-06 11:54:33,615 DEBUG selector_events 16188 20836 Using selector: SelectSelector
2023-07-06 11:54:34,475 INFO autoreload 16188 20836 Watching for file changes with StatReloader
2023-07-06 11:54:34,943 INFO server 16188 14292 HTTP/2 support not enabled (install the http2 and tls Twisted extras)
2023-07-06 11:54:34,943 INFO server 16188 14292 Configuring endpoint tcp:port=8000:interface=127.0.0.1
2023-07-06 11:54:34,944 INFO server 16188 14292 Listening on TCP address 127.0.0.1:8000
2023-07-06 11:55:10,394 DEBUG selector_events 18928 10280 Using selector: SelectSelector
2023-07-06 11:55:11,638 DEBUG functional 18928 10280 
def accumulate(self, *args, **kwargs):
    return 1

2023-07-06 11:55:11,639 DEBUG functional 18928 10280 
def chunks(task, it, n):
    return 1

2023-07-06 11:55:11,639 DEBUG functional 18928 10280 
def db_update_task():
    return 1

2023-07-06 11:55:11,640 DEBUG functional 18928 10280 
def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1

2023-07-06 11:55:11,640 DEBUG functional 18928 10280 
def backend_cleanup():
    return 1

2023-07-06 11:55:11,641 DEBUG functional 18928 10280 
def debug_task(self):
    return 1

2023-07-06 11:55:11,641 DEBUG functional 18928 10280 
def close_position_task(*args, **kwds):
    return 1

2023-07-06 11:55:11,641 DEBUG functional 18928 10280 
def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1

2023-07-06 11:55:11,642 DEBUG functional 18928 10280 
def place_order_task(*args, **kwds):
    return 1

2023-07-06 11:55:11,642 DEBUG functional 18928 10280 
def xmap(task, it):
    return 1

2023-07-06 11:55:11,642 DEBUG functional 18928 10280 
def chain(*args, **kwargs):
    return 1

2023-07-06 11:55:11,643 DEBUG functional 18928 10280 
def xstarmap(task, it):
    return 1

2023-07-06 11:55:11,643 DEBUG functional 18928 10280 
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1

2023-07-06 11:55:40,182 DEBUG http_protocol 16188 14292 HTTP b'POST' request for ['127.0.0.1', 63307]
2023-07-06 11:55:40,499 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63307]
2023-07-06 11:55:40,499 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63307]
2023-07-06 11:55:40,499 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63307]
2023-07-06 11:55:40,500 INFO runserver 16188 14292 [mHTTP POST /api/login/ 200 [0.32, 127.0.0.1:63307][0m
2023-07-06 11:55:40,519 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63307]
2023-07-06 11:55:40,581 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63307]
2023-07-06 11:55:40,581 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63307]
2023-07-06 11:55:40,581 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63307]
2023-07-06 11:55:40,581 INFO runserver 16188 14292 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:63307][0m
2023-07-06 11:55:40,584 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63307]
2023-07-06 11:55:40,647 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63307]
2023-07-06 11:55:40,648 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63307]
2023-07-06 11:55:40,648 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63307]
2023-07-06 11:55:40,648 INFO runserver 16188 14292 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:63307][0m
2023-07-06 11:55:41,840 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63307]
2023-07-06 11:55:41,842 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63311]
2023-07-06 11:55:41,915 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63307]
2023-07-06 11:55:41,916 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63307]
2023-07-06 11:55:41,916 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63307]
2023-07-06 11:55:41,916 INFO runserver 16188 14292 [mHTTP GET /api/trading_profile/ 200 [0.08, 127.0.0.1:63307][0m
2023-07-06 11:55:41,919 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63311]
2023-07-06 11:55:41,919 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63311]
2023-07-06 11:55:41,919 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63311]
2023-07-06 11:55:41,920 INFO runserver 16188 14292 [mHTTP GET /api/trading_profile/ 200 [0.08, 127.0.0.1:63311][0m
2023-07-06 11:55:49,235 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63307]
2023-07-06 11:55:49,236 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63311]
2023-07-06 11:55:49,298 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63307]
2023-07-06 11:55:49,299 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63307]
2023-07-06 11:55:49,299 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63307]
2023-07-06 11:55:49,299 INFO runserver 16188 14292 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:63307][0m
2023-07-06 11:55:49,400 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63311]
2023-07-06 11:55:49,400 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63311]
2023-07-06 11:55:49,401 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63311]
2023-07-06 11:55:49,401 INFO runserver 16188 14292 [mHTTP GET /api/profile_dashboard/ 200 [0.16, 127.0.0.1:63311][0m
2023-07-06 11:55:51,026 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63307]
2023-07-06 11:55:51,087 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63307]
2023-07-06 11:55:51,087 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63307]
2023-07-06 11:55:51,087 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63307]
2023-07-06 11:55:51,087 INFO runserver 16188 14292 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:63307][0m
2023-07-06 11:55:51,090 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63311]
2023-07-06 11:55:51,155 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63311]
2023-07-06 11:55:51,156 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63311]
2023-07-06 11:55:51,156 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63311]
2023-07-06 11:55:51,156 INFO runserver 16188 14292 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:63311][0m
2023-07-06 11:55:53,960 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63307]
2023-07-06 11:55:53,962 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63311]
2023-07-06 11:55:54,031 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63307]
2023-07-06 11:55:54,031 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63307]
2023-07-06 11:55:54,031 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63307]
2023-07-06 11:55:54,031 INFO runserver 16188 14292 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:63307][0m
2023-07-06 11:55:54,035 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63311]
2023-07-06 11:55:54,035 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63311]
2023-07-06 11:55:54,035 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63311]
2023-07-06 11:55:54,036 INFO runserver 16188 14292 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:63311][0m
2023-07-06 11:55:54,788 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63307]
2023-07-06 11:55:54,791 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63311]
2023-07-06 11:55:54,851 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63307]
2023-07-06 11:55:54,851 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63307]
2023-07-06 11:55:54,852 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63307]
2023-07-06 11:55:54,852 INFO runserver 16188 14292 [mHTTP GET /api/trading_profile/ 200 [0.06, 127.0.0.1:63307][0m
2023-07-06 11:55:54,857 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63311]
2023-07-06 11:55:54,858 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63311]
2023-07-06 11:55:54,858 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63311]
2023-07-06 11:55:54,858 INFO runserver 16188 14292 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:63311][0m
2023-07-06 11:55:55,326 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63307]
2023-07-06 11:55:55,386 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63307]
2023-07-06 11:55:55,386 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63307]
2023-07-06 11:55:55,387 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63307]
2023-07-06 11:55:55,387 INFO runserver 16188 14292 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:63307][0m
2023-07-06 11:55:55,389 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63311]
2023-07-06 11:55:55,465 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63311]
2023-07-06 11:55:55,465 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63311]
2023-07-06 11:55:55,466 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63311]
2023-07-06 11:55:55,466 INFO runserver 16188 14292 [mHTTP GET /api/profile_dashboard/ 200 [0.08, 127.0.0.1:63311][0m
2023-07-06 11:55:56,408 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63307]
2023-07-06 11:55:56,410 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63311]
2023-07-06 11:55:56,474 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63307]
2023-07-06 11:55:56,475 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63307]
2023-07-06 11:55:56,475 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63307]
2023-07-06 11:55:56,475 INFO runserver 16188 14292 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:63307][0m
2023-07-06 11:55:56,477 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63311]
2023-07-06 11:55:56,478 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63311]
2023-07-06 11:55:56,478 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63311]
2023-07-06 11:55:56,478 INFO runserver 16188 14292 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:63311][0m
2023-07-06 11:55:57,426 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63307]
2023-07-06 11:55:57,428 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63311]
2023-07-06 11:55:57,497 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63311]
2023-07-06 11:55:57,498 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63311]
2023-07-06 11:55:57,498 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63311]
2023-07-06 11:55:57,498 INFO runserver 16188 14292 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:63311][0m
2023-07-06 11:55:57,501 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63307]
2023-07-06 11:55:57,501 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63307]
2023-07-06 11:55:57,501 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63307]
2023-07-06 11:55:57,501 INFO runserver 16188 14292 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:63307][0m
2023-07-06 11:55:58,330 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63311]
2023-07-06 11:55:58,331 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63307]
2023-07-06 11:55:58,394 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63311]
2023-07-06 11:55:58,395 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63311]
2023-07-06 11:55:58,395 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63311]
2023-07-06 11:55:58,395 INFO runserver 16188 14292 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:63311][0m
2023-07-06 11:55:58,398 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63307]
2023-07-06 11:55:58,398 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63307]
2023-07-06 11:55:58,399 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63307]
2023-07-06 11:55:58,399 INFO runserver 16188 14292 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:63307][0m
2023-07-06 11:56:02,012 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63311]
2023-07-06 11:56:02,072 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63311]
2023-07-06 11:56:02,072 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63311]
2023-07-06 11:56:02,072 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63311]
2023-07-06 11:56:02,072 INFO runserver 16188 14292 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:63311][0m
2023-07-06 11:56:02,074 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63307]
2023-07-06 11:56:02,183 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63307]
2023-07-06 11:56:02,183 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63307]
2023-07-06 11:56:02,183 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63307]
2023-07-06 11:56:02,183 INFO runserver 16188 14292 [mHTTP GET /api/profile_dashboard/ 200 [0.11, 127.0.0.1:63307][0m
2023-07-06 11:56:03,072 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63311]
2023-07-06 11:56:03,073 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63307]
2023-07-06 11:56:03,136 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63311]
2023-07-06 11:56:03,137 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63311]
2023-07-06 11:56:03,137 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63311]
2023-07-06 11:56:03,137 INFO runserver 16188 14292 [mHTTP GET /api/trading_profile/ 200 [0.06, 127.0.0.1:63311][0m
2023-07-06 11:56:03,141 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63307]
2023-07-06 11:56:03,141 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63307]
2023-07-06 11:56:03,141 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63307]
2023-07-06 11:56:03,141 INFO runserver 16188 14292 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:63307][0m
2023-07-06 11:56:05,614 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63311]
2023-07-06 11:56:05,616 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63307]
2023-07-06 11:56:05,682 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63307]
2023-07-06 11:56:05,682 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63307]
2023-07-06 11:56:05,682 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63307]
2023-07-06 11:56:05,683 INFO runserver 16188 14292 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:63307][0m
2023-07-06 11:56:05,684 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63311]
2023-07-06 11:56:05,684 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63311]
2023-07-06 11:56:05,684 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63311]
2023-07-06 11:56:05,684 INFO runserver 16188 14292 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:63311][0m
2023-07-06 11:57:08,039 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63336]
2023-07-06 11:57:08,042 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63337]
2023-07-06 11:57:08,111 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63336]
2023-07-06 11:57:08,112 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63336]
2023-07-06 11:57:08,112 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63336]
2023-07-06 11:57:08,112 INFO runserver 16188 14292 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:63336][0m
2023-07-06 11:57:08,115 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63337]
2023-07-06 11:57:08,116 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63337]
2023-07-06 11:57:08,116 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63337]
2023-07-06 11:57:08,116 INFO runserver 16188 14292 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:63337][0m
2023-07-06 11:57:13,070 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63336]
2023-07-06 11:57:13,071 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63337]
2023-07-06 11:57:13,138 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63337]
2023-07-06 11:57:13,139 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63337]
2023-07-06 11:57:13,139 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63337]
2023-07-06 11:57:13,139 INFO runserver 16188 14292 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:63337][0m
2023-07-06 11:57:13,142 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63336]
2023-07-06 11:57:13,142 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63336]
2023-07-06 11:57:13,142 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63336]
2023-07-06 11:57:13,142 INFO runserver 16188 14292 [mHTTP GET /api/profile_dashboard/ 200 [0.07, 127.0.0.1:63336][0m
2023-07-06 11:59:53,843 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63374]
2023-07-06 11:59:53,845 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63375]
2023-07-06 11:59:53,907 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63374]
2023-07-06 11:59:53,907 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63374]
2023-07-06 11:59:53,908 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63374]
2023-07-06 11:59:53,908 INFO runserver 16188 14292 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:63374][0m
2023-07-06 11:59:53,911 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63375]
2023-07-06 11:59:53,912 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63375]
2023-07-06 11:59:53,912 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63375]
2023-07-06 11:59:53,912 INFO runserver 16188 14292 [mHTTP GET /api/trading_profile/ 200 [0.07, 127.0.0.1:63375][0m
2023-07-06 11:59:56,840 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63374]
2023-07-06 11:59:56,896 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63374]
2023-07-06 11:59:56,897 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63374]
2023-07-06 11:59:56,897 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63374]
2023-07-06 11:59:56,897 INFO runserver 16188 14292 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:63374][0m
2023-07-06 11:59:56,899 DEBUG http_protocol 16188 14292 HTTP b'GET' request for ['127.0.0.1', 63374]
2023-07-06 11:59:56,963 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63374]
2023-07-06 11:59:56,963 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63374]
2023-07-06 11:59:56,963 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63374]
2023-07-06 11:59:56,963 INFO runserver 16188 14292 [mHTTP GET /api/profile_dashboard/ 200 [0.06, 127.0.0.1:63374][0m
2023-07-06 11:59:58,723 DEBUG http_protocol 16188 14292 HTTP b'OPTIONS' request for ['127.0.0.1', 63374]
2023-07-06 11:59:58,726 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63374]
2023-07-06 11:59:58,726 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63374]
2023-07-06 11:59:58,726 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63374]
2023-07-06 11:59:58,726 INFO runserver 16188 14292 [mHTTP OPTIONS /api/logout/ 200 [0.00, 127.0.0.1:63374][0m
2023-07-06 11:59:58,728 DEBUG http_protocol 16188 14292 HTTP b'POST' request for ['127.0.0.1', 63374]
2023-07-06 11:59:58,777 DEBUG http_protocol 16188 14292 HTTP 200 response started for ['127.0.0.1', 63374]
2023-07-06 11:59:58,777 DEBUG http_protocol 16188 14292 HTTP close for ['127.0.0.1', 63374]
2023-07-06 11:59:58,777 DEBUG http_protocol 16188 14292 HTTP response complete for ['127.0.0.1', 63374]
2023-07-06 11:59:58,777 INFO runserver 16188 14292 [mHTTP POST /api/logout/ 200 [0.05, 127.0.0.1:63374][0m
